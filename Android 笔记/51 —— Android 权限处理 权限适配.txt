


Android 权限管理
----------------------------------------------------------------------------------------------------------------------------------
 ※ 介绍
     权限在各个版本的表现：
      6.0之前，在安装时，根据权限声明产生一个权限列表，用户只有在同意之后才能完成app的安装，造成了我们想要使用某个app，就要默默忍受其一些不必要的权限（比如是个app都要访问通讯录、短信等）。
      6.0之后，我们可以直接安装，当app需要我们授予不恰当的权限的时候，我们可以同意个拒绝（比如：单机的象棋对战，请求访问任何权限，我都是不同意的）。当然你也可以在设置界面对每个app的权限进行查看，以及对单个权限进行授权或者解除授权。
               如果同意授权，则下次用到此权限时不会再弹框，如果不同意授权，则下次用到此权限时给出相应提示。


     权限在各个版本的编写：
      5.0以前，只需要manifest.xml中注册声明即可
      5.0以后，用户可以在安装的时候关闭某些权限
      6.0以后，需要判断 当使用到涉及到用户隐私的功能时(比如读取相册，读取通讯录)，需要弹框提示用户是否授予权限(和Iphone类似)
      8.0以后，编写方式与6.0类似，但授权机制有些许不同，
               在6.0时，如果你允许授权了某个的权限，则属于同一组的权限都会被授权(比如你同意授权READ_CONTACTS，那么属于他同一组的WRITE_CONTACTS也会被授权)
               在8.0时，如果你允许授权了某个的权限，则此权限会被授权，本组其他权限还是未被授权(比如你同意授权READ_CONTACTS，那么属于他同一组的WRITE_CONTACTS未被授权，需要用到WRITE_CONTACTS时，再授权)

     没做权限处理后果
      6.0以前, 如果没做此权限处理,则不会影响
      6.0以后, 如果没做此权限处理,则会出现一些不好的画面或者程序直接崩溃, 比如相机权限,如果没做处理的话,直接进入相机界面,则相机界面是黑的


     权限管理的好处
      1.新的权限机制更好的保护了用户的隐私
      2.给了程序想用户说明权限的作用
      3.可以防止一些恶意程序盗取用户或者手机信息，增强了Android系统的安全性



 ※ 权限的分类
    Google按照是否涉及用户隐私将权限分为两类：
    一类是Normal Permissions，  普通权限，这类不会涉及用户的隐私，不需要做授权处理，比如手机震动、访问网络等；
    一类是Dangerous Permission，危险权限，这类涉及到用户隐私，需要用户进行授权，比如读取sdcard、访问通讯录等。



 ※ 代码编写
    1.在AndoridManifest中添加需要的权限(不可省)
    2.打电话授权
      //判断打电话是否在已授权名单中
      if (ContextCompat.checkSelfPermission(thisActivity,Manifest.permission.CALL_PHONE)!= PackageManager.PERMISSION_GRANTED) {
           //用户未授权，进行弹框让用户授权
           ActivityCompat.requestPermissions(this,new String[]{Manifest.permission.CALL_PHONE},MY_PERMISSIONS_REQUEST_CALL_PHONE);
      } else {
        //用户已授权，则直接打电话
        callPhone();
      }


      @Override
      public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults){
        if (requestCode == MY_PERMISSIONS_REQUEST_CALL_PHONE){
            if (grantResults[0] == PackageManager.PERMISSION_GRANTED){
                callPhone();
            } else{
                // 用户不同意授权
                Toast.makeText(MainActivity.this, "Permission Denied", Toast.LENGTH_SHORT).show();
            }
            return;
        }
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
      }


 ※ PermissionsDispatcher框架的使用
    介绍：PermissionsDispatcher框架用于简化运行时权限的处理，他采用的是注解方式，支持Activity和Fragment
          而且可以配合插件一键生成代码 PermissionsDispatcher Plugin插件(https://www.jianshu.com/p/64e7334cde11)
          Github：https://link.jianshu.com/?t=https://github.com/hotchemi/PermissionsDispatcher

    代码编写(这里以联系人为例)
    1.添加依赖 (2.3.2版本可用，3.2.0报错 不知道原因)
       //PermissionsDispatcher
       compile 'com.github.hotchemi:permissionsdispatcher:2.3.2'
       annotationProcessor 'com.github.hotchemi:permissionsdispatcher-processor:2.3.2'

    2.在AndoridManifest中添加需要的权限(不可省)
      <uses-permission android:name="android.permission.READ_CONTACTS" />
      <uses-permission android:name="android.permission.WRITE_CONTACTS" />

    3.在代码中添加注解
      @RuntimePermissions
      public class MainActivity extends AppCompatActivity {

        @Override
        protected void onCreate(Bundle savedInstanceState) {
           ...
           findViewById(R.id.button_contacts).onClick{
	               //请求并验证权限 其中xxx为@NeedsPermission的方法名
                 SplashActivityPermissionsDispatcher.xxxxWithCheck(this);
           }
        }

        //权限回调 当用户允许全部权限后回调（权限可以写多个）
        @NeedsPermission({Manifest.permission.READ_CONTACTS, Manifest.permission.WRITE_CONTACTS})
        void onXXXPermissionAllow() {
            ...;
        }


        //权限回调 当全部选择完 若有某一项权限选择拒绝后回调（权限可以写多个）
        @OnPermissionDenied({Manifest.permission.READ_CONTACTS, Manifest.permission.WRITE_CONTACTS})
        void onXXXPermissionDenied() {
           showToast("联系人权限被拒绝。请考虑给予它以获得相机！");
        }


        //权限回调 当已经拒绝过一次,且未勾选不再提醒 再次调用权限时会直接调用此方法（此方法可不重写）
        @OnShowRationale({Manifest.permission.READ_CONTACTS, Manifest.permission.WRITE_CONTACTS})
        void onXXXPermissioRationale(final PermissionRequest request) {
           new AlertDialog.Builder(this)
                .setPositiveButton(R.string.button_allow, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(@NonNull DialogInterface dialog, int which) {
                        request.proceed();
                    }
                })
                .setNegativeButton(R.string.button_deny, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(@NonNull DialogInterface dialog, int which) {
                        request.cancel();
                    }
                })
                .setCancelable(false)
                .setMessage("需要联系人权限来演示访问联系人数据库的访问权限。")
                .show();
        }

        //权限回调 当全部选择完 若有某一项权限选择拒绝且勾选不再提醒后回调此方法（此方法可不重写）
        @OnNeverAskAgain({Manifest.permission.READ_CONTACTS, Manifest.permission.WRITE_CONTACTS})
        void onXXXPermissionNeverAskAgain() {
           showToast("联系人权限被拒绝，并不再要求再次询问。");
        }

        //固定写法 代理权限处理到自动生成的方法
        @Override
        public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
            super.onRequestPermissionsResult(requestCode, permissions, grantResults);
            MainActivityPermissionsDispatcher.onRequestPermissionsResult(this, requestCode, grantResults);
        }
      }



 ※ 参考
    Android 权限学习 http://blog.csdn.net/lmj623565791/article/details/50709663
    目前最流行的框架对比 https://blog.csdn.net/totond/article/details/73648103

----------------------------------------------------------------------------------------------------------------------------------------

