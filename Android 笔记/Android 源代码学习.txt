

Android 源代码学习
----------------------------------------------------------------------------------------------------------------------------------

 ※ 为有什么要进行源代码分析
     1.学习Android源码有助于我们学习其中的设计模式、思想、架构。
     2.

熟悉整个源码的架构，有助于我们更加正确地调用 Android 提供的 SDK，写出高效正确的代码。
     3.

学习源码有助于我们面试，因为大公司都喜欢问这些。


     4.学习源码有助于我们学习一些黑科技，比如学习插件化的从时候我们需要学习 Hook 机制，但是学习Hook机制的时候我们需要掌握Activity的启动流程、消息机制等等机制。


 ※ 源码的下载与查看、工具介绍
     1.Ubuntu/Mac 系统下，推荐使用 Android Studio进行查看。
     2.Windows系统下，推荐使用 Source Insight 进行查看。
     3.UML建模工具：推荐使用Start UML，用于画类图以及时序图。
     4.下载源码，推荐下面文章中使用网盘下载的方式。


 ※ 相关下载及知识
     1.关于源码：网络下载后查看(已经备份到网盘 直接下载后解压) 源码在线查看http://androidxref.com/ 推荐下载后查看
 
    2.关于Source Insight的使用：

http://blog.csdn.net/shulianghan/article/details/50553001


     3.关于UML建模的知识：

http://www.jianshu.com/p/a0704aa2b092


 ※ 源码分析方法与经验



关于源码架构的介绍
     参考下面的文章：

http://blog.csdn.net/itachi85/article/details/54695046
     

从顶层到底层，Android源码是十分庞大与复杂的，这里推荐一些源码分析的经验：
    

  1.先结合官网等资料对整个Android系统做一个整体的把握，然后进行具体学习，接着持续迭代学习过程。


      2.使用Source Insight/Android Studio等高效率的工具看源码、进行代码的跟踪，必要的时候进行Debug。


      3.结合UML建模，画类图/时序图，避免思路混乱。
      4.

推荐“囫囵吞枣”式的学习，先粗略学习，然后细节深入。囫囵吞枣在这里并不是说不求甚解，这里的囫囵吞枣是要知道“吞了几个”，
        将来自己需要的时候再进行补充。跳跃式的学习、渐进式学习相结合。
      5.

先顶层，再到底层，从常用的系统级API或者插件级API进行入手学习。





 ※ 参考
    https://blog.csdn.net/c10WTiybQ1Ye3/article/details/78282309

----------------------------------------------------------------------------------------------------------------------------------------


