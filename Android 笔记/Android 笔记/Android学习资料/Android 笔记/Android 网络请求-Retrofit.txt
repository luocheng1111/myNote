

Retrofit
----------------------------------------------------------------------------------------------------------------------------------

※ 介绍
   Retrofit是Square公司开源的一个高质量高效率的http库，
   是针对于Android/Java的、基于okHttp的、一种轻量级且安全的、并使用注解方式的网络请求框架。


※ 优势
   1.Retrofit使用注解方式，大大简化了我们的URL拼写形式，而且注解含义一目了然，简单易懂；
   2.Retrofit使用简单，结构层次分明，每一步都能清晰的表达出之所以要使用的寓意；
   3.Retrofit支持同步和异步执行，使得请求变得异常简单，只要调用enqueue/execute即可完成；
   4.Retrofit更大自由度的支持我们自定义的业务逻辑，如自定义Converters。


※ 使用(基于Retrofit2) (Get请求为例 数据采用Gson解析)
   1.添加依赖
     compile 'com.squareup.retrofit2:retrofit:2.1.0'
     compile 'com.squareup.retrofit2:converter-gson:2.1.0' (此依赖可变)
   2.添加权限
     <uses-permission android:name="android.permission.INTERNET"/>
   3.创建interface服务接口
     public interface API {
        @GET("/s6/weather/forecast")
	Call<WeatherBean> getWeather(@Query("key")String key, @Query("location")String location);
     }
   4.代码编写
     //1.构建Retrofit
     Retrofit retrofit2 = new Retrofit.Builder()
           .baseUrl("https://free-api.heweather.com/")
           .addConverterFactory(GsonConverterFactory.create())
           .build();

     //2.创建请求，设置请求参数
     API api = retrofit2.create(API.class);
     Call<WeatherBean> call = api.getWeather("a93d0176c5394ed1b2020f9b97f42267","上海");


     //3.执行请求
     call.enqueue(new Callback<WeatherBean>() {
         @Override
         public void onResponse(Call<WeatherBean> call, Response<WeatherBean> response) {
              WeatherBean weatherBean = response.body();
              tv.setText(weatherBean.HeWeather6.get(0).basic.location+"");
         }

         @Override
         public void onFailure(Call<WeatherBean> call, Throwable t) {
              Log.d("cylog", "Error" + t.toString());
         }
     });



※ interface服务接口 配置参数说明
   1). @PATH  动态获取URL地址
       比如:http://192.168.1.102:8080/springmvc_users/user/zhy
	    http://192.168.1.102:8080/springmvc_users/user/lmj
       则可:
       public interface IUserBiz{
	    @GET("{username}")
	    Call<User> getUser(@Path("username") String username);
       }


   2). @Query 动态指定条件获取信息  用于Get请求
       比如:http://baseurl/users?sortby=username&flag=2
	    http://baseurl/users?sortby=id&flag=3

       @GET("users")
       Call<List<User>> getUsersBySort(@Query("sortby") String sortby, @Query("flag") int flag);


   3). @QueryMap 动态指定条件组获取信息 用于Get请求
       比如:http://baseurl/users?sortby=username&flag=1
	    http://baseurl/users?sortby=id&flag=2

       @GET("users")
       Call<List<User>> getUsersBySort(@QueryMap Map<String,String> map);


   4). @Body 携带数据类型为对象时 传入实体,它会自行转化成Json 用于Post请求
       @POST("users/new")
       Call<WeatherBean> createUser(@Body WeatherBean user);


   5). @Field @FormUrlEncoded  携带数据类型为表单键值对时 用于Post请求
       @FormUrlEncoded
       @POST("user/edit")
       Call<WeatherBean> updateUser(@Field("first_name") String first, @Field("last_name") String last);


   6). FiledMap  携带数据多个表单键值对时 用于Post请求
       @FormUrlEncoded
       @POST("user/edit")
       Call<WeatherBean> updateUser(@FieldMap Map<String,String> users);


   7). @Multipart 单文件上传
       @Multipart
       @POST("register")
       Call<User> registerUser(@Part("photo") RequestBody photo, @Part("description") RequestBody description);

       //使用方式
       Call<WeatherBean> updateUser(@FieldMap Map<String,String> users);
       File file = new File(Environment.getExternalStorageDirectory(), "ic_launcher.png");
       RequestBody photoRequestBody = RequestBody.create(MediaType.parse("image/png"), file);
       RequestBody descriptionRequestBody = RequestBody.create(null, "this is photo.");
       Call<User> call = service.updateUser(photoRequestBody, descriptionRequestBody);


   8). @PartMap 多文件上传
       @Multipart
       @POST("register")
       Call<User> registerUser(@PartMap Map<String, RequestBody> params,  @Part("description") RequestBody description);


   9). 下载文件
       @GET("download")
       Call<ResponseBody> downloadTest();


   10).添加头部信息
       //静态添加
       @Headers({
	    "Accept: application/vnd.github.v3.full+json",
	    "User-Agent: Retrofit-Sample-App"
       })
       @GET("users/{username}")
       Call<User> getUser(@Path("username") String username);

       //动态添加
       @GET("user")
       Call<User> getUser(@Header("Authorization") String authorization)



※ 其他设置
   1.添加依赖
     Retrofit支持不同的响应类型(比如Json、xml等)，但需要自己配置Retrofit2的返回值转换器，比如GsonConverterFactory。对应的就是Gson解析,
     如果我们需要指定其他的转换器,则需要添加其他的转换器依赖，官网给出了如下六种Converter：
        compile 'com.squareup.retrofit2:converter-gson:2.0.2' //Gson解析
	compile 'com.squareup.retrofit2:converter-jackson     //Jackson解析
	compile 'com.squareup.retrofit2:converter-moshi       //Moshi
	compile 'com.squareup.retrofit2:converter-protobuf    //Protobuf
	compile 'com.squareup.retrofit2:converter-wire        //Wire
	compile 'com.squareup.retrofit2:converter-simplexml   //Simple XML解析
	compile 'com.squareup.retrofit2:converter-scalars     //Scalars


   2.Retrofit参数设置
     1).配置参数设置 OkHttpClient
        很多时候，比如你使用retrofit需要统一的log管理，给每个请求添加统一的header等，这些都应该通过okhttpclient去操作，比如addInterceptor
        代码:
	OkHttpClient client = new OkHttpClient.Builder().addInterceptor(new Interceptor(){ //log，统一的header等
	   @Override
	   public okhttp3.Response intercept(Chain chain) throws IOException{
		return null;
	   }
        }).build();
       或许你需要更多的配置，你可以单独写一个OkhttpClient的单例生成类，在这个里面完成你所需的所有的配置，然后将OkhttpClient实例通过方法公布出来，设置给retrofit。
       设置方式：//callFactory方法接受一个okhttp3.Call.Factory对象，OkHttpClient即为一个实现类。
       Retrofit retrofit = new Retrofit.Builder()
       .callFactory(OkHttpUtils.getClient())
       .build();

     2).配置ConverterFactory转换器
        大多数情况下,我们用GsonConverterFactory转换器就好了,但避免不了后台返回的各式各样的接口,于是在解析前增加一层判断,这样就需要自定义转换器
        具体自定义方式见博客底部 http://blog.csdn.net/lmj623565791/article/details/51304204


   3.Get的四种写法
     //第一种写法 固定的请求路径
     @GET("/s6/weather/forecast?location=%E4%B8%8A%E6%B5%B7&key=a93d0176c5394ed1b2020f9b97f42267")
     Call<WeatherBean> getWeather();

     //第二种写法 使用@Query 动态设置请求参数 最常见
     @GET("/s6/weather/forecast")
     Call<WeatherBean> getWeather(@Query("key")String key, @Query("location")String location);

     //第三种写法 使用@QueryMap 动态设置请求参数 需要传递key和value
     @GET("/s6/weather/forecast")
     Call<WeatherBean> getWeather(@QueryMap Map<String,String> map);

     //第四种写法 动态请求路径替换
     @GET("/s6/{words}/forecast")
     Call<WeatherBean> getWeather(@Path("words")String words, @Query("key")String key, @Query("location")String location);



※ 参考
   入门及其使用 很好的教程   https://www.jianshu.com/p/eab096d82ce1
   Retrofit2使用详解及从源码中解析原理 http://blog.csdn.net/guiman/article/details/51480497
   Retrofit2 完全解析 探索与okhttp之间的关系 http://blog.csdn.net/lmj623565791/article/details/51304204



※ Demo位置: /Demo/retrofit2-demo.zip


----------------------------------------------------------------------------------------------------------------------------------



