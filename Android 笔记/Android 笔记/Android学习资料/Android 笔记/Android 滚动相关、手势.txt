

scrollTo()、scrollBy()、getScrollX()、getScrollY()
----------------------------------------------------------------------------------------------------------------------------------------
 ◆ 牛人笔记
     http://blog.csdn.net/vipzjyno1/article/details/24577023
     http://cheng330301560.iteye.com/blog/1462792

 ※ scrollTo(int x, int y)
     将View中内容偏移x、y个单位，参考的坐标系原点为parent View的左上角。
     如：
      我要移动view到坐标点（100，100），那么我的偏移量就是(0,，0)  - （100，100） = （-100 ，-100）  ，我就要执行view.scrollTo(-100,-100),达到这个效果。
      x为正，向左偏移、x为负，向右偏移
      x,y代表的是偏移量，而不是坐标点

 ※ scrollBy(int x, int y)
     实际上是调用了scrollTo(mScrollX + x, mScrollY + y)
     移动的是相当位置，指相对于现在位置，再移动多少位置

 ※ 注意点
     1.根据父类VIEW里面移动，如果移动到了超出的地方，就不会显示。
     2.x为正，向左偏移、x为负，向右偏移
     3.x,y代表的是偏移量，而不是坐标点。
     4.getScrollX()：表示离视图起始位置的x水平方向的偏移量
       getScrollY()：表示离视图起始位置的y垂直方向的偏移量

----------------------------------------------------------------------------------------------------------------------------------------



Scroller OverScroller用法
----------------------------------------------------------------------------------------------------------------------------------------
 ◆ 牛人笔记
     http://blog.csdn.net/chaoyue0071/article/details/44038641

 ※ 介绍
    Scrollers并不是控制View进行滚动，实际上，他只辅助计算类，如果想滚动，他能帮你计算什么时间应该滚到什么位置，
    如果我们想控制滚动距离，就需在computeScroll()里处理

※ computeScroll
    public void computeScroll() {  //一般写法
        // 先判断mScroller滚动是否完成  
        if (mScroller.computeScrollOffset()) {  
            // 这里调用View的scrollTo()完成实际的滚动  
            scrollTo( mScroller.getCurrX(), mScroller .getCurrY());  
            // 必须调用该方法，否则不一定能看到滚动效果  
            invalidate();  
        }  
        super.computeScroll();  
    }  


※ OverScroller和Scroller有什么区别呢？
   事实上，两个类都属Scrollers，Scroller出现的比较早，API1就有了，OverScroller API9才添加上，所以功能比较完善，
   Over意思是超出，即OverScroller提供了对超出滑动边界的情况的处理，这两个类80%的API是一致的，OverScroller比Scroller添加了一下几个方法
    ・isOverScrolled()
    ・springBack(int startX, int startY, int minX, int maxX, int minY, int maxY) 
    ・fling(int startX, int startY, int velocityX, int velocityY, int minX, int maxX, int minY, int maxY, int overX, int overY)
    ・notifyHorizontalEdgeReached(int startX, int finalX, int overX)
    ・notifyVerticalEdgeReached(int startY, int finalY, int overY)

※ 常用API。
   computeScrollOffset() 
     用来判断当前滑动是否完成，用法很单一，就是在computeScroll()里面来做判断滚动是否完成
   isFinished() 
     判断当前滚动是否结束
   startScroll(int startX, int startY, int dx, int dy) 
     调用这个方法后会触发computeScroll()的方法，在computeScroll里面获取滚动的信息，然后完成我们的需要。
     特别要注意这四个参数，startX和startY是开始的坐标位置，正数左上，负数右下，dx、dy为距离，同理，
   fling(int startX, int startY, int velocityX, int velocityY, int minX, int maxX, int minY, int maxY) 
     如果果你想实现滑动之后，布局能够根据移动速度，慢慢减速的话，就需要用这个来实现，这里需要加速度的参数，我们可以通过VelocityTracker这个类来获取，然后使用，
   spingBack(int startX, int startY, int minX, int maxX, int minY, int maxY) 
     回弹效果，
     前两个是开始位置，是绝对坐标，
     minX和maxX是用来设定滚动范围的，也是绝对坐标范围，
     如果startX不在这个范围里面，比如大于maxX，就会触发computeScroll()，我们可以移动距离，最终回弹到maxX所在的位置，并返回true，从而完成后续的滚动效果，
     比minX小的话，就会回弹到minX，一样的道理。所以我们可以像上面代码里面一样，判断是否在范围内，在的话，就invalidate()一下，触发滚动动画，
     
----------------------------------------------------------------------------------------------------------------------------------------



Android VelocityTracker类 滑动速度跟踪
----------------------------------------------------------------------------------------------------------------------------------------
 ◆ 牛人笔记
     http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2012/1117/574.html

 ※ 介绍
    VelocityTracker是速度跟踪的意思，我们可以获得触摸点的坐标，根据按下的时间可以简单的计算出速度大小
    VelocityTracker.obtain()： 获取VelocityTracker实例
    addMovement(MotionEvent)： 将当前的移动事件传递给VelocityTracker对象
    computeCurrentVelocity (int units)： 计算当前的速度
    getXVelocity ()、getYVelocity ()：获取当前的速度、从左向右划返回正数，从右向左划返回负数  
   
----------------------------------------------------------------------------------------------------------------------------------------




