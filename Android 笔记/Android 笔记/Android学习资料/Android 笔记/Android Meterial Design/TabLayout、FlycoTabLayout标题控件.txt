
TabLayout
----------------------------------------------------------------------------------------------------------------------------------------

 ※ 介绍及可以实现那些效果
    TabLayout是Meterial Design提供的新控件之一，提供了一个水平的布局用来展示Tabs
    配合着ViewPager和Fragment的使用，可以很简单就实现一个滑动标签页的效果
    (以前实现滑动标签效果都是用PagerSlidingTabStrip或者viewpagerindicator去实现, 现在我们可以使官方的库的TabLayout去实现了)
    缺点：不能定义下划线的宽度,于是改用FlycoTabLayout


 ※ 简单的TabLayout展示 思路
    1.build.gradle中引入design包：(版本要和v7包一致)
      compile 'com.android.support:design:23.3.0'

    2.布局文件中加入TabLayout和TabItem控件：
      <android.support.design.widget.TabLayout
        android:layout_width="wrap_content"
        android:layout_height="wrap_content">

        ....
        <android.support.design.widget.TabItem
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Tab3" />

     </android.support.design.widget.TabLayout>

   3.也可以代码动态添加
     tabLayout.addTab(tabLayout.newTab().setText("Tab 啦啦啦").setIcon(R.mipmap.ic_launcher));


 ※ 配合ViewPager实现滑动标签页
    1.build.gradle中引入design包：(版本要和v7包一致)
      compile 'com.android.support:design:23.3.0'

    2.布局文件中加入TabLayout和ViewPager控件：
      <android.support.design.widget.TabLayout
        android:id="@+id/tablayout"
        android:layout_width="match_parent"
        android:layout_height="@dimen/dp_48"
        android:background="@color/blue"
        app:tabTextAppearance="@style/TabLayoutTextStyle"
        ≈≈
        app:tabSelectedTextColor="@color/white"
        app:tabIndicatorColor="@color/white" />

      <android.support.v4.view.ViewPager
        android:id="@+id/viewpager"
        android:layout_width="match_parent"
        android:layout_height="match_parent" />

    3.代码中让TabLayout和ViewPager关联,有两个核心的地方
       1).设置属性, 通过setupWithViewPager将TabLayout和ViewPager绑定
          tabLayout.setupWithViewPager(viewPager);
       2).ViewPager的Adapter适配器中重写 getPageTitle方法,使ViewPager的滑动与标题进行联动
          @Override
          public CharSequence getPageTitle(int position) {
              return tabIndicators.get(position);
          }

        tabLayout.setTabTextColors(ContextCompat.getColor(this, R.color.gray), ContextCompat.getColor(this, R.color.white));
        tabLayout.setSelectedTabIndicatorColor(ContextCompat.getColor(this, R.color.white));
        ViewCompat.setElevation(tabLayout, 10);



 ※ TabLayout 属性说明 (记得加 xmlns:app="http://schemas.android.com/apk/res-auto")
     app:tabIndicatorHeight： 下划线高度 默认有个高度 如果设置0dp 则没有下划线
     app:tabIndicatorColor：  下划线颜色
     app:tabTextColor：     没有选中时的字体颜色
     app:tabSelectedTextColor：选中菜单项后字体的颜色。
     app:tabMode： 默认是fixed，固定的； scrollable：tab可滚动的  fixed标签很多时候会被挤压，不能滑动。scrollable标签超过屏幕宽度时可以滑动
     app:tabGravity： center整体选项卡居中，fill整体选项卡填充屏幕

     eg：
     app:tabMode="fixed"       app:tabGravity="fill"     填充平分整个屏幕
     app:tabMode="fixed"       app:tabGravity="center"   紧凑显示在屏幕中间
     app:tabMode="scrollable"  app:tabGravity="fill"     从左依次向右显示
     app:tabMode="scrollable"  app:tabGravity="center"   从左依次向右显示


 ※ 动态改变TabLayout文字的大小 选中时文字变大
   参考：https://blog.csdn.net/Dealpoor/article/details/80683348

    1).先写一个常规的出来
    2).自定义TabItem视图
       ....
       tabLayout.setupWithViewPager(viewPager);
       //用来循环适配器中的视图总数
       for (int i = 0; i < adapter.getCount(); i++) {
            //获取每一个tab对象
            TabLayout.Tab tabAt = tabLayout.getTabAt(i);
            //将每一个条目设置我们自定义的视图
            tabAt.setCustomView(R.layout.tablayout_item);
            //默认选中第一个
            if (i == defaultSelIndex) {
                updateTabView(tabAt, true);
            }else {
                updateTabView(tabAt, false);
            }
            TextView textView = (TextView) tabAt.getCustomView().findViewById(R.id.tv_tab);
            textView.setText(mTabTitlesArray[i]);//设置tab上的文字
       }

       //滑动监听
       tabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {
            @Override
            public void onTabSelected(TabLayout.Tab tab) {
                //定义方法，判断是否选中
                updateTabView(tab, true);
            }

            @Override
            public void onTabUnselected(TabLayout.Tab tab) {
                //定义方法，判断是否选中
                updateTabView(tab, false);
            }

            @Override
            public void onTabReselected(TabLayout.Tab tab) {
            }
        });

       /**
        *  用来改变tabLayout选中后的字体大小及颜色
        */
       private void updateTabView(TabLayout.Tab tab, boolean isSelect) {
        //找到自定义视图的控件ID
        tv_tab = (TextView) tab.getCustomView().findViewById(R.id.tv_tab);
        if (isSelect) {
            tv_tab.setSelected(true);
            //改变字体大小
            tv_tab.setTextSize(TypedValue.COMPLEX_UNIT_PX, getActivity().getResources().getDimensionPixelSize(R.dimen.sp_20));
        } else {
            tv_tab.setSelected(false);
            tv_tab.setTextSize(TypedValue.COMPLEX_UNIT_PX, getActivity().getResources().getDimensionPixelSize(R.dimen.sp_16));
        }
       }

      tablayout_item.xml
       <?xml version="1.0" encoding="utf-8"?>
       <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
          android:layout_width="match_parent"
          android:layout_height="match_parent">

          <TextView
            android:id="@+id/tv_tab"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_gravity="center"
            android:text="tabItem"
            android:textColor="@color/home_toptitle_sel"
            android:textSize="16sp" />
       </LinearLayout>


 ※ 设置Tab 图片+文字形式
   for (int i = 0; i < tabLayout.getTabCount(); i++) {
            TabLayout.Tab tab = tabLayout.getTabAt(i);
            tab.setCustomView(getTabView(i));
   }

   public View getTabView(int position){
        View view = LayoutInflater.from(context).inflate(R.layout.tab_item_view, null);
        TextView tv= view.findViewById(R.id.tv_tab);
        tv.setText(title[position]);
        ImageView img =  view.findViewById(R.id.iv_tab);
        img.setImageResource(titleResourceId[position]);

        return view;
   }


 ※ 修改Tab宽度
   Tablayout的指示条宽度和Tab的宽度一样，不支持修改（看了源码）
   参考：
   https://www.jianshu.com/p/031b44469476
   try {
            //拿到tabLayout的mTabStrip属性
            Field mTabStripField = tabLayout.getClass().getDeclaredField("mTabStrip");
            mTabStripField.setAccessible(true);
            LinearLayout mTabStrip = (LinearLayout) mTabStripField.get(tabLayout);
            int dp10 = DeviceUtils.dp2px(getActivity(), 8);

            for (int i = 0; i < mTabStrip.getChildCount(); i++) {
                View tabView = mTabStrip.getChildAt(i);

                //拿到tabView的mTextView属性
                Field mTextViewField = tabView.getClass().getDeclaredField("mTextView");
                mTextViewField.setAccessible(true);
                TextView mTextView = (TextView) mTextViewField.get(tabView);
                tabView.setPadding(0, 0, 0, 0);

                //因为我想要的效果是   字多宽线就多宽，所以测量mTextView的宽度
                mTextView.measure(0, 0);
                int width = mTextView.getMeasuredWidth();
                //设置tab左右间距为10dp  注意这里不能使用Padding 因为源码中线的宽度是根据 tabView的宽度来设置的
                LinearLayout.LayoutParams params = (LinearLayout.LayoutParams) tabView.getLayoutParams();
                params.width = width ;
                params.leftMargin = dp10;
                params.rightMargin = dp10;
                tabView.setLayoutParams(params);

                tabView.invalidate();
            }

    } catch (NoSuchFieldException e) {
            e.printStackTrace();
    } catch (IllegalAccessException e) {
            e.printStackTrace();
    }



 ※ 参考
    https://www.cnblogs.com/JohnTsai/p/4715454.html
    自定义TabLayout https://www.jianshu.com/p/7f79b08f5afa
    自定义TabLayout https://www.jianshu.com/p/e778a01c83d3


----------------------------------------------------------------------------------------------------------------------------------------






FlycoTabLayout
----------------------------------------------------------------------------------------------------------------------------------------

 ※ 介绍 https://github.com/H07000223/FlycoTabLayout/blob/master/README_CN.md
    BiliBili员工开发，有很多种TabLayout提供使用，提供了3种FlycoTabLayout
    1.最常用的SlidingTabLayout 与ViewPager关联使用
       1.支持多种Indicator显示器
       2.可以设置未读消息数和未读消息提示
       3.增加一键设置方法for懒癌患者
         /** 关联ViewPager,用于不想在ViewPager适配器中设置titles数据的情况 */
         public void setViewPager(ViewPager vp, String[] titles)

         /** 关联ViewPager,用于连适配器都不想自己实例化的情况 */
         public void setViewPager(ViewPager vp, String[] titles, FragmentActivity fa, ArrayList<Fragment> fragments)

    2.CommonTabLayout: 它是一个不依赖ViewPager可以与其他控件自由搭配使用的TabLayout.
    3.SegmentTabLayout: 仿IOS的单选指示器



 ※ 使用方法
    1.build.gradle中引入库：
      //TabLayout库 https://github.com/H07000223/FlycoTabLayout
      compile 'com.flyco.tablayout:FlycoTabLayout_Lib:2.1.2@aar'

    2.布局的写法：
      <com.flyco.tablayout.SlidingTabLayout
                android:id="@+id/tl_2"
                android:layout_width="match_parent"
                android:layout_height="48dp"
                android:background="#EEEEEE"
                app:tl_indicator_width="10dp"
                app:tl_indicator_height="3dp"
                app:tl_indicator_corner_radius="1.5dp"
                app:tl_indicator_color="@color/colorAccent"
                app:tl_textUnselectColor="#818181"
                app:tl_textSelectColor="@color/colorAccent"
                app:tl_textBold="BOTH"
                app:tl_textsize="16sp"/>

      <android.support.v4.view.ViewPager
            android:id="@+id/vp"
            android:layout_width="match_parent"
            android:layout_height="84dp"/>

   3.代码写法
      View decorView = getWindow().getDecorView();
      ViewPager vp = ViewFindUtils.find(decorView, R.id.vp);
      mAdapter = new MyPagerAdapter(getSupportFragmentManager());
      vp.setAdapter(mAdapter);
      tabLayout.setViewPager(vp);



 ※ TabLayout 属性说明 (记得加 xmlns:app="http://schemas.android.com/apk/res-auto")

     Tab本身设置：
     app:tl_tab_padding="0dp"
     app:tl_tab_width="95dp"  设置Tab固定大小的宽度
     app:tl_tab_space_equal   设置tab大小等分

     下标指示器：
     app:tl_indicator_width：  设置指示器 宽度
     app:tl_indicator_height： 设置指示器 高度
     app:tl_indicator_color：  设置指示器 颜色
     app:tl_indicator_corner_radius： 设置指示器 圆角弧度 如果长高一样，且弧度为一半，则会是个圆点
     app:tl_indicator_width_equal_title="true" 指示器同标题文字长度相等

     下标样式：
     app:tl_indicator_style   常规(NORMAL)或三角形(TRIANGLE)或背景色块(BLOCK)
     如果设置为背景色块(BLOCK)
     需设置:
     app:tl_indicator_margin_left="2dp"
     app:tl_indicator_margin_right="2dp"
     app:tl_indicator_color="#393E46"     色块颜色
     app:tl_indicator_corner_radius="5dp" 色块圆角弧度 如果不设置此项 则为圆弧背景色块


     下划线背景
     app:tl_underline_color="#1A000000"
     app:tl_underline_gravity="BOTTOM"
     app:tl_underline_height="1dp"

     标题文字显示：
     app:tl_textBold： SELECT：只是选中的文字加粗，BOTH：全部文字加粗
     app:tl_textsize   文字大小
     app:tl_textSelectColor   字体选中颜色
     app:tl_textUnselectColor 字体未选中颜色

     设置分割线：
     app:tl_divider_color="#1A000000"  分割线颜色
     app:tl_divider_padding="13dp"     分割线padding
     app:tl_divider_width="1dp"        分割线宽度


     设置提醒消息：
     tabLayout_1.showDot(4);    //设置后 position=4 的标题右上角有额小圆点
     tabLayout_2.showMsg(3, 5); //设置position=3的未读数量为5 设置此项后需设置margin，否则不好看
     tabLayout_2.setMsgMargin(3, 0, 10);  //设置未读消息位置
     MsgView rtv_2_3 = tabLayout_2.getMsgView(3);
     if (rtv_2_3 != null) {
         rtv_2_3.setBackgroundColor(Color.parseColor("#6D8FB0"));  //修改未读消息背景色
     }





----------------------------------------------------------------------------------------------------------------------------------------

