


Android 弹幕
----------------------------------------------------------------------------------------------------------------------------------------

 ※ 介绍
    一般使用的都是B站的开源代码框架
    https://github.com/Bilibili/DanmakuFlameMaster


 ※ 使用
    1).通过gradle的方式导入
       compile 'com.github.ctiao:DanmakuFlameMaster:0.9.25'
       compile 'com.github.ctiao:ndkbitmap-armv7a:0.9.21'

    2).在布局的xml中声名
       <master.flame.danmaku.ui.widget.DanmakuView
        android:id="@+id/danmaku_view"
        android:layout_width="match_parent"
        android:layout_height="match_parent" />

    3).在代码中初始化
       //实例化
       mDanmakuView = (IDanmakuView) findViewById(R.id.danmaku_view);

       // 设置弹幕的最大显示行数
       HashMap<Integer, Integer> maxLinesPair = new HashMap<Integer, Integer>();
       maxLinesPair.put(BaseDanmaku.TYPE_SCROLL_RL, 2); // 滚动弹幕最大显示行数

       // 设置是否禁止重叠
       HashMap<Integer, Boolean> overlappingEnablePair = new HashMap<Integer, Boolean>();
       overlappingEnablePair.put(BaseDanmaku.TYPE_SCROLL_LR, true);
       overlappingEnablePair.put(BaseDanmaku.TYPE_FIX_BOTTOM, true);

	   // 主要设置
       mDanmakuContext = DanmakuContext.create();
       mDanmakuContext.setDanmakuStyle(IDisplayer.DANMAKU_STYLE_STROKEN, 3) //设置描边样式
                .setDuplicateMergingEnabled(false)
                .setScrollSpeedFactor(1.2f) //是否启用合并重复弹幕
                .setScaleTextSize(1.2f) //设置弹幕滚动速度系数,只对滚动弹幕有效
                .setCacheStuffer(new SpannedCacheStuffer(), mCacheStufferAdapter)
                .setMaximumLines(maxLinesPair) //设置最大显示行数
                .preventOverlapping(overlappingEnablePair);

       mDanmakuView.prepare(new BaseDanmakuParser() {

            @Override
            protected Danmakus parse() {
                return new Danmakus();
            }
        }, mDanmakuContext);
        mDanmakuView.enableDanmakuDrawingCache(true);


       private BaseCacheStuffer.Proxy mCacheStufferAdapter = new BaseCacheStuffer.Proxy() {

        @Override
        public void prepareDrawing(final BaseDanmaku danmaku, boolean fromWorkerThread) {
//            if (danmaku.text instanceof Spanned) { // 根据你的条件检查是否需要需要更新弹幕
//            }
        }

        @Override
        public void releaseResource(BaseDanmaku danmaku) {
            // TODO 重要:清理含有ImageSpan的text中的一些占用内存的资源 例如drawable
            if (danmaku.text instanceof Spanned) {
                danmaku.text = "";
            }
        }
      };

     4).使用 发送一条弹幕
        private void addDanmaku(boolean islive) {
          BaseDanmaku danmaku = mContext.mDanmakuFactory.createDanmaku(BaseDanmaku.TYPE_SCROLL_RL);
          if (danmaku == null || mDanmakuView == null) {
             return;
          }
          danmaku.text = "这是一条弹幕" + System.nanoTime();
          danmaku.padding = 5;
          danmaku.priority = 0;  // 可能会被各种过滤器过滤并隐藏显示
          danmaku.isLive = islive;
          danmaku.setTime(mDanmakuView.getCurrentTime() + 1200);
          danmaku.textSize = 12;
          danmaku.textColor = Color.RED;
          danmaku.textShadowColor = Color.WHITE;
          danmaku.borderColor = Color.GREEN;
          mDanmakuView.addDanmaku(danmaku);
        }



 ※ 自己封装了代码 Deme见  ./实例 Demo/DanmuControlDemo 还未加入到King-TV中




----------------------------------------------------------------------------------------------------------------------------------------


