

自定义View的绘制流程
 1.View的绘制流程
 2.ViewRoot介绍
 3.DecorView介绍
 4.Window介绍
 5.Activity-Window-View三者的差别


自定义View的绘制流程
----------------------------------------------------------------------------------------------------------------------------------------

 ※ View/ViewGroup的绘制流程:
    View的绘制流程是从ViewRoot的performTraversals方法开始，它经过measure/layout/draw三个过程才能最终将一个View绘制出来。
    ViewRoot对应于ViewRootImpl类，它是连接WindowManager和DecorView的纽带。View的三大流程均是通过ViewRoot来完成的。
    在ActivityThread中，当Activity对象被创建完毕后，会将DecorView添加到WIndow中，同时会创建ViewRootImpl对象，并将ViewRootImpl对象和DecorView建立关联。


 ※ ViewRoot
     ViewRoot对应于ViewRootImpl类，View的三大流程都是通过ViewRoot来完成的。
     Android的所有触屏事件、按键事件、界面刷新等事件都是通过ViewRoot进行分发的。
     ViewRoot负责将DecorView和PhoneWindow“组合”起来，而View树的根节点严格意义上来说只有DecorView；每个DecorView都有一个ViewRoot与之关联，
     这种关联关系是由WindowManager去进行管理的；


 ※ DecorView
     DecorView是整个界面的最顶层View，它的尺寸通常就是屏幕尺寸，也就是说，DecorView是充满屏幕的，
     它实际上是一个FrameLayout，又包含了一个子元素LinearLayout，这个LinearLayout又包含两个FrameLayout，
     一个用来显示标题，一个用来显示内容。显示内容的FrameLayout，其ID为 android.R.id.content。


 ※ Window
     Window是一个抽象类，实际在Activity中持有的是其子类PhoneWindow。
     PhoneWindow中有个内部类DecorView，通过创建DecorView来加载Activity中设置的布局R.layout.activity_main。Window 通过WindowManager将DecorView加载其中，并将DecorView交给ViewRoot，进行视图绘制以及其他交互。


 ※ Activity-Window-View三者的差别
     Android中真正展示给用户的是window和view，activity在android中所的作用主要是处理一些逻辑问题，比如生命周期的管理、建立窗口等。
     可以理解为Activity包含了一个Window，这个Window其实是一个PhoneWindow，在PhoneWindow中包含了DecorView，变量名称为mDecor，mDecor有一个子View，这个子View的布局方式根据设定的主题来确定，果在Activity调用addView方式实际上是给PhoneWindow中的mContentParent添加子View

 ◆ 牛人笔记
     Window、Activity、DecorView以及ViewRoot之间的错综关系 https://www.jianshu.com/p/8766babc40e0
     Activity、Window、View三者关系：https://mp.weixin.qq.com/s/oFVBrIAUwD0wnlSfm-95bQ

----------------------------------------------------------------------------------------------------------------------------------------

