
介绍
----------------------------------------------------------------------------------------------------------------------------------
 ◆ 学习自
    http://blog.csdn.net/aigestudio/article/details/41960507
    https://hencoder.com/ui-1-1/

 ※ 画笔和画布
    画笔--Paint集成了所有"画的属性"
    画布Canvas定义了所有要画的东西

----------------------------------------------------------------------------------------------------------------------------------


Canvas 画布
----------------------------------------------------------------------------------------------------------------------------------
   Canvas所提供的各种方法根据功能来看大致可以分为几类，
   第一是以drawXXX为主的绘制方法，
   第二是以clipXXX为主的剪裁方法，
   第三是以scale、skew、translate和rotate组成的Canvas变换方法，
   最后一类则是以saveXXX和restoreXXX构成的画布锁定和还原

   1.Canvas.drawXXX
      绘制一个圆   canvas.drawCircle();
      绘制一个圆弧 canvas.drawArc();
      绘制一张位图 canvas.drawBitmap();
      绘制文本     canvas.drawText();

   2.Canvas.clipXXX
      eg1:
       canvas.drawColor(Color.BLUE);
       canvas.clipRect(0, 0, 500, 500);
       canvas.drawColor(Color.RED);
       结果：0-500显示红色，其他地方显示蓝色

      eg2:
       canvas.drawColor(Color.BLUE);
       canvas.clipRect(0, 0, 500, 500);
       canvas.drawColor(Color.RED);
       canvas.drawCircle(500, 600, 100, mPaint); //Paint为蓝色实心圆
       结果:0-500显示红色，右下角有个弧度绿色，其他地方为蓝色

      结论：裁剪之后，画布绘制的东西只会显示到裁剪区域

      其他方法：
       canvas.clipPath(mPath); //可绘制不规则图形
       clipPath(Path path, Region.Op op)
       clipRect(Rect rect, Region.Op op)
       clipRect(RectF rect, Region.Op op)
       clipRect(float left, float top, float right, float bottom, Region.Op op)
       clipRegion(Region region, Region.Op op)

      Region为何物？
       Region的意思是"区域", 在Android里它同样表示的是一块封闭的区域

      Region与Rect的区别?
       Region表示一个区域， Rect表示一个矩形
       Region不受Canvas的变换影响，比如Canvas放大时，Region的位置不会变，而Rect会改变

      Region.Op介绍
       Region.Op是一个枚举类，里面有6个枚举常量, 其意为组合模式
        DIFFERENCE  最终区域为第一个区域与第二个区域不同的区域
	INTERSECT   最终区域为第一个区域与第二个区域相交的区域
	REPLACE     最终区域为第二区域
	REVERSE_DIFFERENCE 最终区域为第二个区域与第一个区域不同的区域
	UNION   最终区域为第一个区域加第二个区域
	XOR     最终区域为第一个区域加第二个区域并减去两者相交的区域
       eg:
        Region mRegionA = new Region(100, 100, 300, 300);
	Region mRegionB = new Region(200, 200, 400, 400);
	//裁剪区域A
	canvas.clipRegion(mRegionA);
	//通过组合方式裁剪区域B
	canvas.clipRegion(mRegionB, Region.Op.DIFFERENCE);

----------------------------------------------------------------------------------------------------------------------------------


Canvas 图层的概念
----------------------------------------------------------------------------------------------------------------------------------
 ◆ 牛人笔记
     http://blog.csdn.net/aigestudio/article/details/41960507

 ※ 用saveXXX和restoreXXX方法来模拟图层的类似效果
    eg1:在红色矩形上面绘制一个蓝色矩形
     //绘制一个红色矩形
     mPaint.setColor(Color.RED);
     canvas.drawRect(mViewWidth / 2F - 200, mViewHeight / 2F - 200, mViewWidth / 2F + 200, mViewHeight / 2F + 200, mPaint);
     //保存画布并绘制一个蓝色的矩形
     canvas.save();
     mPaint.setColor(Color.BLUE);
     canvas.drawRect(mViewWidth / 2F - 100, mViewHeight / 2F - 100, mViewWidth / 2F + 100, mViewHeight / 2F + 100, mPaint);
     canvas.restore();

    eg2: 蓝色矩形旋转，红色不动
     mPainr.setColor(Color.RED);
     canvas.drawRect(mViewWidth / 2F - 200, mViewHeight / 2F - 200, mViewWidth / 2F + 200, mViewHeight / 2F + 200, mPaint);
     //保存画布并绘制一个蓝色的矩形
     canvas.save();
     mPaint.setColor(Color.BLUE);
     //旋转画布
     canvas.rotate(30);
     canvas.drawRect(mViewWidth/2F-100, mViewHeight/2F-100, mViewWidth / 2F + 100, mViewHeight / 2F + 100, mPaint);
     canvas.restore();

 ※ canvas.save()就是保存这一层，然后绘制下一层

 ※ save()和restore()的理解
     若只save却没restore，则save会继续影响下面的绘制，
     如果restore()，代表还原到上一层，代表上一个save操作的结束或者说回滚了

 ※ saveLayer()
     与save()不同的是，saveLayerXXX方法会将所有的操作存到一个新的Bitmap中不影响当前Canvas的Bitmap
     其类似一个剪裁效果

     //设定保存的区域
     canvas.saveLayer(0, 0, mViewWidth, mViewHeight, null, Canvas.ALL_SAVE_FLAG);

 ※ saveLayerAlpha()
     canvas.saveLayerAlpha(100, 100, 200, 200, 0x55, Canvas.ALL_SAVE_FLAG);
     保存并设置透明度
     其类似一个剪裁效果。

 ※ save()、saveLayer()、saveLayerAlpha()的区别和共同点
     区别：
      1、save()：保存图层
      2、saveLayer()： 保存其剪裁的区域，并以此为图层
      3、saveLayerAlpha()：相当于上面一个，增加了透明度

     相同点：
      都有一个saveXX(int saveFlags)，有6个值，6个值分别标示了我们调用restore()后还原什么
      平时用ALL_SAVE_FLAG就可以了

 ※ restoreToCount(int saveCount)
     saveXX都有一个int型的返回值, 该返回值标识唯一ID编号，
     可用restoreToCount(int saveCount)方法来指定在还原的时候还原哪一个保存操作


----------------------------------------------------------------------------------------------------------------------------------


