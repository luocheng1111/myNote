
本文整体介绍
1.MVC、MVP、MVVM、组件化相对整体介绍
MVC
 1.对MVC的介绍
 2.在Android中的表现并想象MVC的代表图
 3.实际项目中存在的问题
MVP
 1.对MVP的介绍
 2.在Android中的表现
 3.相对于MVC，最大的变化
 4.实际项目中存在的问题
 5.想象出一个MVP的Demo例子
 6.想象MVP封装后的Demo例子
MVVM
 1.MVVM的介绍
 ModelView
  1.ModelView的介绍
  2.使用示例
  3.初始化

Android MVC、MVP、MVVM
----------------------------------------------------------------------------------------------------------------------------------

※ 整体介绍
   MVC、MVP和MVVM是常见的三种架构设计模式，当前MVP和MVVM的使用相对比较广泛，当然MVC也并没有过时之说。
   而所谓的组件化就是指将应用根据业务需求划分成各个模块来进行开发，理论上讲，组件化和前面三种架构设计不是一个层次的。它们之间的关系是，组件化的各个组件可以使用前面三种架构设计


※ MVC介绍
   MVC是指模型(Model)、视图(View)、控制层(Controller)，是软件架构中最常见的一种框架，
   简单来说就是用户点击View、事件通过Controller的控制去操作model层的数据，并返回来给View层展示，（想象一张图）
   对于原生的Android项目来说，layout.xml文件相当于View层，Java bean相当于model层，而Activity、Fragment相当于Controller层

   实际项目存在的问题
    1.问题在于xml作为View层，控制能力太弱，如果你想动态的去改变一个背景，你只能把这些代码写在Activity或Fragment中，这样就造成
      Activity、Fragment即是Controller层又是View层,如果是一个逻辑很复杂的界面，动辄上千行代码，这样不仅写起来麻烦，维护起来更是噩梦
    2.View层和model层是相互可知的，这意味着这直接存在这耦合，耦合对于一个大型程序而言是非常致命的，因为这表示开发、测试、维护都需要
      花费大量的精力


※ MVP
   MVP(Model、View、Presenter)是MCV的演化版本，通过重新调整架构，让Activity、Fragment不再臃肿，解决了MVC的很多缺点，与MVC不同的是，
   MVP中的Model层变为数据的存取，View变成了xml、Activity和Fragment，而Presenter层变为控制层，负责响应View的事件，然后从Model层取数据，最后再展示在View层，
   整过过程中，View层和Model层完全没有联系，达到完全解耦，这就解决了MVC模式中测试、维护难的问题。(想象一张图)
   注：其实最好的方式是使用fragment作为view层，而activity则是用于创建view层(fragment)和presenter层(presenter)的一个控制器。

   实际项目存在的问题
    1.增加了很多类 相当于Mvc，原先一个Activit只用写一个类，如果用了Mvp，则需要增加XXContract、XXPrestener 2个类，
      会比Mvc繁琐
    2.Prestener层当接口回调时，要频繁的判断View是否为空的情况处理
    3.逻辑混淆，有时候主动权在V层，有时候主动权在P层，V层有时候还会处理一些逻辑，导致混乱

   MVP demo例子
    https://www.jianshu.com/p/a70c9140ba53

   MVP 封装后的例子
    见项目中的MvpBaseActivity例子

   参考:
     MVP入门，MVP例子  https://www.jianshu.com/p/a70c9140ba53
     MVP理解加深
      https://blog.csdn.net/ybf326/article/details/85059075?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task
     MVP封装
      https://www.jianshu.com/p/4e5c1fd007bf
      https://blog.csdn.net/w962035216/article/details/78737453


※ MVVM
   MVVM(Model、View、ViewModel)，MVVM是对MVP的进一步改进，他解决MVP的一些缺点且补充了一些功能，比如MVP逻辑混乱的问题，P层要频繁在请求接口后判断View是否为空的问题
   但一般情况下，要很好的使用ViewModel，还需要配合DataBinding、Lifecycles、LiveData的使用。
   (ViewModel、LiveData、DataBinding、Lifecycles的详细使用见下方)

   缺点：(其实就是DataBinding的缺点)
    1.AS对xml文件中的提示不足
    2.报错信息不直接，不直观，得自己去找

   Mvvm示例：https://github.com/android/architecture-samples/tree/dev-todo-mvvm-live

 ※  参考
     Mvp、Mvvm、组件化的对比和示例 https://www.jianshu.com/p/aeb7dad34f05
     Mvc、Mvp、Mvvm对比 https://blog.csdn.net/chaoshenzhaoxichao/article/details/79871145
     Mvc、Mvp、Mvvm对比 https://blog.csdn.net/qq_39037047/article/details/84726290
     Mvvm示例：https://github.com/android/architecture-samples/tree/dev-todo-mvvm-live
     MVVM Demo：https://www.cnblogs.com/jiani/p/12609272.html

----------------------------------------------------------------------------------------------------------------------------------


ViewModel
----------------------------------------------------------------------------------------------------------------------------------

※ 介绍
   ViewModel 用于将界面和数据从代码上进行了分离，它将页面所需的数据从页面中剥离出来，页面只需要处理用户交互，以及负责展示数据的工作。而且一些列生命周期变化导致的数据丢失问题
   ViewModel中数据会一直存活即使 activity configuration发生变化，比如横竖屏切换的时候。

  1.数据持久化，ViewModel 出现之前我们可以用 activity 的onSaveInstanceState()机制保存和恢复数据，但缺点明显onSaveInstanceState只适合保存少量数据，
    而由于ViewModel贯穿Activity整个省周期，所以可以很好的保存好数据
  2.异步回调问题,VM的生命周期与Activity生命周期绑定，当Activity结束时，VM也会结束，就自动解决了此痛点
  3.分担Controller负担，在MVP中，很多的交互是在View层进行的，这样会导致View层与P层的管理混乱，而ViewModel则是数据监听的模式，所以会把职责都交给VM
  4.可以实现Fragments 间数据共享，这可以很方便的管理抽离出一个Activity对应多个Fragment中的共有功能及接口问题
    但一般情况下，要很好的使用ViewModel，还需要配合DataBinding、Lifecycles、LiveData的使用。


※ 配置环境 (Android Studio环境需要在3.1.0以上)
    // ViewModel and LiveData
    implementation "android.arch.lifecycle:extensions:1.1.1"
    annotationProcessor "android.arch.lifecycle:compiler:1.1.1"


※ 使用：ViewModel一般配合 LiveData 使用

    public class SharedViewModel extends ViewModel {
      private final MutableLiveData<Item> selected = new MutableLiveData<Item>();

      public void select(Item item) {
        selected.setValue(item);
      }

      public LiveData<Item> getSelected() {
        return selected;
      }
    }


    public class MasterFragment extends Fragment {
      private SharedViewModel model;
      public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        model = ViewModelProviders.of(getActivity()).get(SharedViewModel.class);
        itemSelector.setOnClickListener(item -> {
            model.select(item);
        });
      }
    }

    public class DetailFragment extends Fragment {
      public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        SharedViewModel model = ViewModelProviders.of(getActivity()).get(SharedViewModel.class);
        model.getSelected().observe(this, { item ->
           // Update the UI.
        });
      }
    }


※ ViewModel的初始化，有两种方式
    方式一：
    MyViewModel model = ViewModelProviders.of(activity).get(MyViewModel.class);
    方式二：初始化ViewMode有参数时适合这种
    MyViewModel model = ViewModelProviders.of(activity，factory).get(MyViewModel.class);


※ 参考：
   https://zhuanlan.zhihu.com/p/76361500
   https://www.jianshu.com/p/35d143e84d42


----------------------------------------------------------------------------------------------------------------------------------



LiveData
----------------------------------------------------------------------------------------------------------------------------------

※ 介绍
  LiveData是一种可观察的数据存储器类。与常规的可观察类不同，LiveData 具有生命周期感知能力，意指它遵循其他应用组件（如 Activity、Fragment 或 Service）的生命周期。
  这种感知能力可确保 LiveData 仅更新处于活跃生命周期状态的应用组件观察者，从而不必担心 Activity 和 Fragment 的生命周期被销毁时的内存泄露
  1.数据可以被观察者订阅；
  2.能够感知组件（Fragment、Activity、Service）的生命周期；
  3.只有在组件出于激活状态（STARTED、RESUMED）才会通知观察者有数据更新,以解决 onStop 或 onDestory之后回调数据的问题；
  PS:“组件”皆指实现了LifecycleOwner接口Fragment、Activity。
  可以使用LiveData对象作为数据绑定源，在数据发生变化时自动通知UI。


※ 配置环境 (Android Studio环境需要在3.1.0以上)
   // ViewModel and LiveData
   implementation "android.arch.lifecycle:extensions:1.1.1"
   annotationProcessor "android.arch.lifecycle:compiler:1.1.1"


※ 基本使用
  见ViewModel中的例子,其中MutableLiveData<XX> 为泛型，支持任意类型


※ 其他使用
  Transformations.map()：数据转换
  eg：
   LiveData<User> userLiveData = ...;
   LiveData<String> userName = Transformations.map(userLiveData, user -> {
      user.name + " " + user.lastName
   });

  Transformations.switchMap()：数据转换 与map不同的是此返回值必须为LiveData 对象
  eg：
   LiveData<String> userId = ...;
   LiveData<User> user = Transformations.switchMap(userId, id -> getUser(id) );


※ 参考：
   https://www.jianshu.com/p/2fa0aa513a32
   https://developer.android.com/topic/libraries/architecture/livedata
   https://www.jianshu.com/p/981a1df6d14e


----------------------------------------------------------------------------------------------------------------------------------



Lifecycles
----------------------------------------------------------------------------------------------------------------------------------

※ 介绍
   Lifecycles就是可以让一个类拥有像 activity 或 fragment 一样生命周期的功能。


※ 使用
   Activity或者Fragment中
   getLifecycle().addObserver(new MyObserver());

   public class MyObserver implements LifecycleObserver {
     @OnLifecycleEvent(Lifecycle.Event.ON_RESUME)
     public void connectListener() {
        ...
     }

     @OnLifecycleEvent(Lifecycle.Event.ON_PAUSE)
     public void disconnectListener() {
        ...
     }
   }


※ 参考：
   https://www.jianshu.com/p/b6fff29ab498

----------------------------------------------------------------------------------------------------------------------------------




DataBinding 数据绑定
----------------------------------------------------------------------------------------------------------------------------------

※ 介绍
   DataBinding 是谷歌JetPack中的一个框架，它可以实现数据和View的单项或双相绑定，可以达到数据改变，View直接跟着变化的效果
   它还可以省去findViewById() 步骤，大量减少 Activity 内的代码，数据能够单向或双向绑定到 layout 文件中，有助于防止内存泄漏，而且能自动进行空检测以避免空指针异常

   缺点：
    1.AS对xml文件中的提示不足
    2.报错信息不直接，不直观，得自己去找


※ 配置环境 (Android Studio环境需要在3.1.0以上)
   启用 DataBinding 的方法是在对应 Model 的 build.gradle 文件里加入以下代码
   android {
      dataBinding {
         enabled = true
      }
   }

※ 使用
   1.初级使用 对象与xml文件绑定
     见：https://blog.csdn.net/qdjdeveloper/article/details/57079632
     技巧：普通布局快捷生成DataBinding布局 打开布局文件，选中根布局的 ViewGroup，按住 Alt + 回车键，点击 “Convert to data binding layout”


   2.省去findViewById，直接使用控件
     public class TempActivity extends Activity {

        @Override
        protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        TestActivityBinding binding = DataBindingUtil.setContentView(this, R.layout.test_activity);

        //直接使用控件
        binding.btnLogin.setText("1231");
    }

    test_activity.xml
    <layout >
      ...

      <LinearLayout
        <Button
            android:id="@+id/btn_login"
            ... />
      </LinearLayout>
    </layout>


   3.单选绑定 - 数据改变时，控件设置的值也跟着改变
     有3种BaseObservable、ObservableField、ObservableCollection
     BaseObservable：最初始的方法，对象继承BaseObservable，getXX方法加上@Bindable注解，setXX方法里加上notifyPropertyChanged(BR.xx);就可以了
                     还可以notifyChange()更新所有字段

     ObservableField：是一个泛型，相对于BaseObservable可以省略设置set、get的步骤，其内部已经实现，同时还有ObservableBoolean、ObservableFloat、
                      ObservableInt等等，可以直接用此来声名变量
                      例如：private ObservableField<String> name;
                           private ObservableFloat price;
                           private ObservableInt num;

     ObservableCollection：替代原生的 List 和 Map使用，分别是ObservableList 和 ObservableMap，当其包含的数据发生变化时，绑定的视图也会随之进行刷新
                      例如：ObservableMap<String, String> map = new ObservableArrayMap<>();
                           map.put("name", "leavesC");
                           map.put("age", "24");
                           activityMain12Binding.setMap(map);


   4.双向绑定- 当 EditText 的输入内容改变时，会同时同步到变量 goods,绑定变量的方式比单向绑定多了一个等号：android:text="@={goods.name}"
     <EditText
            ...
            android:text="@={goods.name}" />

   5.BindingAdapter 自定义一个属性方法
     例：自定义一个url属性
     @BindingAdapter({"url"})
     public static void loadImage(ImageView view, String url) {
        Log.e(TAG, "loadImage url : " + url);
     }

     <layout ...
        xmlns:app="http://schemas.android.com/apk/res-auto" >

       <data>
        <import type="com.leavesc.databinding_demo.model.Image" />
        <variable
            name="image"
            type="Image" />
       </data>

      <android.support.constraint.ConstraintLayout
       ...>

        <ImageView
            android:id="@+id/image"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:src="@drawable/ic_launcher_background"
            app:url="@{image.url}" />

      </android.support.constraint.ConstraintLayout>
     </layout>


   6.事件监听 支持：android:onClick、android:onLongClick、android:afterTextChanged、android:onTextChanged
     eg：
     //test_activity.xml
     <data>
        <variable name="kefu"  type="com.live.yh.entity.Kefu" />
        <variable name="presenter"  type="com.live.yh.ui.TempP" />
    </data>

     <Button
        ...
        android:onClick="@{presenter.test1}" /> //presenter.test1或presenter::test1两种写法 效果一样

    <Button
        ...
        android:onClick="@{(v) -> presenter.test3(v, kefu)}" /> //传递对象的方式


    //TempActivity
    TestActivityBinding binding = DataBindingUtil.setContentView(this, R.layout.test_activity);
    Kefu kefu = new Kefu("TTT", "asdasd");
    binding.setKefu(kefu);
    binding.setPresenter(new TempP());

    //TempP类
    public class TempP {

        public void test1(View view){
            LogUtils.e("test1");
            ToastUtils.showShort("test1");
        }

        public void test2(View view, Kefu kefu){
            ToastUtils.showShort("test3");
            LogUtils.e(", " + kefu.getNickname());
            kefu.setNickname("asdasdsa");
       }
    }


 ※ DataBinding配合ModelView使用 DataBinding在MVVM中的使用

   例子：(需要mBinding.setLifecycleOwner(this)才能达到View跟数据更新的效果)
     Activity：
     MainActivityBinding mBinding = DataBindingUtil.setContentView(this, R.layout.main_activity);
     MainViewModel mainViewModel = ViewModelProviders.of(this).get(MainViewModel.class);
     mBinding.setViewModel(mainViewModel);
     mBinding.setLifecycleOwner(this);


     Fragment：
     LoginBypwdFragmentBinding mBinding  = DataBindingUtil.inflate(inflater, R.layout.login_bypwd_fragment, container, false);
     LoginViewModel rootView = mBinding.getRoot();
     loginViewModel = ViewModelProviders.of(getActivity()).get(LoginViewModel.class);
     mBinding.setViewModel(loginViewModel);
     mBinding.setLifecycleOwner(getActivity());

    mBinding.setLifecycleOwner(this)
    通常情况下，Databinding能够通知到Ui的数据，必须得是继承自BaseObsevable的。当DataBinding与LiveData配合使用时，却没有继承BaseObsevable，
    所以DataBinding与LiveData配合使用时,DataBinding需调用setLifecycleOwner(LifecycleOwner lifecycleOwner)之后，绑定了LiveData数据源的xml控件才会随着数据变化而改变。

    参考：https://www.jianshu.com/p/0f425f9d641b



 ※ 碰到的问题
    1.DataBinding找不到setLifecycleOwner方法？
      解决：build.gradle版本升级到3.1.0


 ※ 参考
    DataBinding最初级使用 https://blog.csdn.net/qdjdeveloper/article/details/57079632
    DataBinding的详细使用 https://www.jianshu.com/p/bd9016418af2
    DataBinding的详细使用 https://segmentfault.com/a/1190000002876984


----------------------------------------------------------------------------------------------------------------------------------