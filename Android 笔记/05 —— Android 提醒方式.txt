


Android 提醒方式
----------------------------------------------------------------------------------------------------------------------------------------
  Toast
  Dialog
  PopupWindow
  Notification

----------------------------------------------------------------------------------------------------------------------------------------




Toast
----------------------------------------------------------------------------------------------------------------------------------------

※ 介绍
   Toast是一种简易的消息提示框，短暂出现后，会主动消失,他没有焦点,不会影响用户操作,作用是告诉用户某某事情已经发生了
   例如：发送成功，加载中，删除成功。


※ 用法
   1).基本用法
      Toast.makeText(context, "things happened", Toast.LENGTH_SHORT).show();

   2).内部属性设置
      Toast toast = Toast.makeText(this, "定位显示吐司", Toast.LENGTH_LONG);
      toast.setGravity(Gravity.CENTER_VERTICAL|Gravity.RIGHT, 0, 0);
      toast.show();

   3).自定义Toast
      Toast toast3=Toast.makeText(this,"这是一个图片Toast",Toast.LENGTH_SHORT);
      LinearLayout toast_layout=(LinearLayout) toast3.getView();//将Toast作为一个布局
      ImageView image=new ImageView(this);
      image.setImageResource(R.drawable.ic_launcher);   //设置图片
      toast_layout.addView(image,0);    //将图片添加到Toast上，0代表位置
      toast3.show();


   4).自定义Toast
      View toast_view=LayoutInflater.from(this).inflate(R.layout.toast, null);
      Toast toast4=Toast.makeText(this,"自定义Toast",Toast.LENGTH_SHORT);
      toast4.setView(toast_view);  //将布局添加到Toast上
      toast4.show();


----------------------------------------------------------------------------------------------------------------------------------------




Dialog
----------------------------------------------------------------------------------------------------------------------------------

※ 介绍
   Dialog，对话框，用于提示用户作出决定或输入额外信息的小窗口，通常不会填充整个屏幕，用于进行一些额外交互

   Dialog 类是对话框的基类，但应该避免直接实例化 Dialog，而应使用其子类，比如
    AlertDialog：   警告对话框，使用最广泛功能最丰富的一个对话框
    ProgressDialog：进度条对话框，只是对进度条进行了简单的封装
    DatePickerDialog：日期对话框
    TimePickerDialog：时间对话框
    ....


※ AlertDialog
   AlertDialog继承自Dialog类，
   它可以包含一个标题、一个内容消息或者一个选择列表、最多三个按钮

  1.基本使用(建议使用v7包中的AlertDialog,好看一些)
   AlertDialog.Builder builder = AlertDialog.Builder(context);
   builder.setTitle("Material Design Dialog");
   builder.setMessage("这是 android.support.v7.app.AlertDialog 中的样式");
   builder.setNegativeButton("取消", null);
   builder.setPositiveButton("确定", null);
   builder.show();

  2.内容为其他形式
    1).列表对话框
       final String items[]={"张三","李四","王五"};
       builder.setItems(items, OnClickListener);

    2).单选对话框
       final String items[]={"男","女"};
       builder.setSingleChoiceItems(items,0,OnClickListener);

    3).多选对话框
       final String items[]={"篮球","足球","排球"};
       final boolean selected[]={true,false,true};
       builder.setMultiChoiceItems(items,selected,OnMultiChoiceClickListener);

    4).文本输入对话框
       final EditText editText = new EditText(this);
       builder.setView(editText);

    5).自定义内容View
       View dialogView = inflater.inflate(R.layout.dialog,  (ViewGroup) findViewById(R.id.dialog));
　     builder.setView(dialogView);



※ ProgressDialog
　 ProgressDialog，进度提示框，有些时候，只是需要提示用户等待，比如在执行耗时操作等的时候，可以使用进度对话框来显示一个进度信息，提示用户等待

  1.基本使用
   ProgressDialog.show(context, title, message);

  2.设置参数
   ProgressDialog mypDialog=new ProgressDialog(this);
   mypDialog.setIcon(R.drawable.android);
   mypDialog.setTitle("提示");
   mypDialog.setMessage(getResources().getString(R.string.first));
   mypDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER) //设置风格 1. 旋体进度条风格 (为默认风格)  2.ProgressDialog.STYLE_HORIZONTAL 横向进度条风格
   mypDialog.setIndeterminate(false);  //设置ProgressDialog 的进度条是否不明确,只对横式有用，默认为true。 flase代表可以实时更新
   mypDialog.setCancelable(true); //设置ProgressDialog 是否可以按退回按键取消:
   mypDialog.setProgress(50); //设置进度
   mypDialog.setButton(Dialog.BUTTON_NEGATIVE, "取消", this);
   mypDialog.show();  //显示dialog，必须加上



※ DatePickerDialog
   DatePickerDialog，日期选择框，描述年月日

  1.使用方式
   //有很多构造方法,建议使用六参数构造方法,两参构造方法对低版本不兼容,容易崩溃
   //此方法中样式会标红,没关系,可以忽略,不会妨碍运行, 样式建议使用 THEME_HOLO_LIGHT 样式
   DatePickerDialog dialog = new DatePickerDialog(this, DatePickerDialog.THEME_HOLO_LIGHT, dateSetListener, 2018, 1, 11);
   dialog.show();

   参数二用来控制样式，有多种样式

  参考:http://blog.csdn.net/suwenlai/article/details/71107748
       https://www.cnblogs.com/huanyou/p/5087044.html



※ TimePickerDialog
   TimePickerDialog，时间选择框，描述时分
   TimePickerDialog有两种表示方式，一种是12小时制，一种是24小时制。

  1.使用方式
   //最后一位参数表示为 是否是24小时制
   TimePickerDialog  timeDialog = new TimePickerDialog(this,timeSetListener,9,20,true);
   timeDialog.show();



 ※ 完全自定义Dialog样式
    Dialog dialog = new Dialog(context, R.style.alertdialog1);
    View view = LayoutInflater.from(context).inflate(R.layout.dialog_alert, null);
    view.getBackground().setAlpha(130); //设置Dialog的透明度
    dialog.setContentView(view);
    dialog.show();

    //修改普通对话框的位置、大小、透明度 有1、2两种方式
    //1.如果是上面方式编写，则需放在show()之后，不然有些属性是没有效果的，比如height和width
    Window dialogWindow = dialog.getWindow();
    dialogWindow.setGravity(Gravity.BOTTOM);  //设置Dialog的显示位置
    dialogWindow.setWindowAnimations(R.style.DialogAnimation);  //进出动画效果
    WindowManager.LayoutParams lp = dialogWindow.getAttributes();
    lp.width= getScreenWidth(context);
    lp.width= getScreenHeight(context);
    lp.alpha = 0.5f;
    dialogWindow.setAttributes(lp);

    //2.如果是通过继承Dialog的方式自定义,则下面这些需要放在super.show();之前
    @Override
    public void show() {
        WindowManager.LayoutParams lp = getWindow().getAttributes();
        lp.width = WindowManager.LayoutParams.MATCH_PARENT;//设置宽度
        getWindow().setWindowAnimations(R.style.dialog_animation); // 进出动画效果
        getWindow().setAttributes(lp);
        setCancelable(true);
        //如果要设置软键盘的处理模式，则不能设置 lp.height = WindowManager.LayoutParams.MATCH_PARENTn                                                       getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_NOTHING);
        super.show();
    }

    //style样式
    <style name="alertdialog1" parent="@android:style/Theme.Dialog">
       <item name="android:windowFrame">@null</item> //边框
       <item name="android:windowIsFloating">true</item> //是否浮现在Activity之上
       <item name="android:windowIsTranslucent">false</item> //半透明
       <item name="android:windowNoTitle">true</item>  //标题
       <item name="android:windowBackground">@color/transparent</item><!--背景透明-->
       <item name="android:windowBackground">@drawable/alert_bg</item> //Dialog背景色，可以设置圆角，可以设置为透明 @android:color/transparent
       <item name="android:backgroundDimEnabled">true</item> //设置Dialog显示时，背景是否变昏暗
       <item name="android:windowAnimationStyle">@style/dialog_animation</item> //设置动画，见下
    </style>

    <!-- 对话框显示和退出动画 -->
    <style name="dialog_animation">
       <item name="android:windowEnterAnimation">@anim/dialog_enter</item>
       <item name="android:windowExitAnimation">@anim/dialog_exit</item>
    </style>


 ※ Android全局弹出 Dialog
   https://blog.csdn.net/u011928958/article/details/72780438


 ※ 注意点
   1.Dialog中无法使用TabLayout+ViewPager+Fragment的布局，因为在Dialog中无法获取FragmentManager,此时建议使用DialogFragment


※ 已经封装好的Demo(一行代码调用Dialog): DialogFatory-2018-1-16.zip

----------------------------------------------------------------------------------------------------------------------------------




DialogFragment
----------------------------------------------------------------------------------------------------------------------------------

※ 介绍
   DialogFragment是在Android3.0（API level 11）中引入的，它代替了已经不建议单独使用的AlertDialog。
   DialogFragment 的特点是具有dialog 的 效果，同时又可以拥有Fragment 的生命周期
   并且DialogFragment可以完美解决横竖屏幕切换Dialog消失的问题


※ 使用方式
   有两种写法：
    1.通过继承DialogFragment并且实现它的onCreateDialog(Bundle savedInstanceState)方法来创建一个DialogFragment，这个方法返回的是一个Dialog，意味着我们需要创建一个AlertDialog，并返回。
    2.通过继承DialogFragment并且实现它的onCreateView(LayoutInflater, ViewGroup, Bundle) 这个方法来加载一个我们指定的xml布局从而提供对话框内容。
    注:以上两种方法创建对话框时候只能使用其中一种，不能两个同时使用。

   1.基本使用方式
    //1.DialogFragment的写法
    public class MyDialogFragment extends DialogFragment {

      public static MyDialogFragment newInstance(String message){
        //创建一个带有参数的Fragment实例
        MyDialogFragment fragment = new MyDialogFragment();
        Bundle bundle = new Bundle();
        bundle.putString("message", message);
        fragment.setArguments(bundle);
        return fragment;
      }

      public interface LoginInputListener{
         void onLoginInputComplete(String username, String password);
      }

      //如果需要设置Style,在此方法中修改
      @Override
      public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        //设置样式
        setStyle(DialogFragment.STYLE_NO_TITLE, R.style.CustomDialog);

        Bundle bundle = getArguments();
        if (bundle != null) {
            titleId = bundle.getInt("titleId");
            message = bundle.getString("message");
            cancelId = bundle.getInt("cancel");
            okId = bundle.getInt("ok");
        }
      }


      @Override
      public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
	      //默认有标题,需去掉标题
	      getDialog().requestWindowFeature(Window.FEATURE_NO_TITLE);
        return inflater.inflate(R.layout.dialog, container, false);
      }

      @Override
      public void onViewCreated(View view, Bundle bundle) {
        //在这里处理一些业务逻辑

      }

      //如果需要修改大小 修改显示动画 重写此方法
      @Override
      public void onActivityCreated(Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        Window window = getDialog().getWindow();
        getDialog().setCanceledOnTouchOutside(true);
        window.setGravity(Gravity.BOTTOM);  //设置Dialog的显示位置
        window.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
        window.setWindowAnimations(R.style.dialogWindowAnim); // 进出动画效果
        WindowManager.LayoutParams wlp = window.getAttributes();
        wlp.dimAmount=0f; // 设置Dialog 周围的颜色。系统默认的是半透明的灰色。值设为0则为完全透明。
        wlp.width = WindowManager.LayoutParams.MATCH_PARENT ;
        wlp.height =WindowManager.LayoutParams.MATCH_PARENT ;

        window.setAttributes(wlp);
      }
    }


     //2.在Activity中显示
     AlertDialogFragment dialogFragment =AlertDialogFragment.newInstance("are you ok?");
     dialogFragment.show(getSupportFragmentManager(), "dialogFragment");



  2.重写onCreateDialog的方式
   @Override
   public Dialog onCreateDialog(Bundle savedInstanceState) {
     //为了样式统一和兼容性，可以使用 V7 包下的 AlertDialog.Builder
     AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
     builder.setTitle("注意：").
            ....
     return builder.create();
   }



※ 设置圆角的Dialog
      @Override
      public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        //默认有标题,需去掉标题
        getDialog().requestWindowFeature(Window.FEATURE_NO_TITLE);
        //设置圆角的Dialog
        getDialog().getWindow().setBackgroundDrawable(getActivity().getResources().getDrawable(R.drawable.shape_win_gift));
        getDialog().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
        return inflater.inflate(R.layout.dialog, container, false);
      }

      //shape_win_gift.xml
      <?xml version="1.0" encoding="utf-8"?>
      <shape xmlns:android="http://schemas.android.com/apk/res/android"
        android:shape="rectangle">
          <solid android:color="@color/black_30"/>
          <corners android:radius="10dp"/>
      </shape>



※ DialogFragment显示在底部
  public class SingleSelectDialog extends DialogFragment{

    public static SingleSelectDialog newInstance(String pageTitle, List<String> optionsItems) {
        ....
        return fragment;
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        Bundle bundle = getArguments();
        if (bundle != null) {
            pageTitle = bundle.getString("pageTitle");
            ....
        }
    }

    @Override
      public Dialog onCreateDialog(Bundle savedInstanceState) {
        final Dialog dialog = new Dialog(getActivity(), R.style.BottomDialog);
        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
        dialog.setContentView(R.layout.dialog_single_sel);
        dialog.setCanceledOnTouchOutside(true);

        tv_head_left = dialog.findViewById(R.id.tv_head_left);
        .....

        initData();


        Window window = dialog.getWindow();
        WindowManager.LayoutParams lp = window.getAttributes();

        lp.width = WindowManager.LayoutParams.MATCH_PARENT;
        lp.height = WindowManager.LayoutParams.WRAP_CONTENT;
        window.setGravity(Gravity.BOTTOM);
        window.setBackgroundDrawableResource(R.color.transparent);
        window.setWindowAnimations(R.style.ActionSheetDialogAnimation);
        window.setAttributes(lp);

        return dialog;
    }


    public void initData(){
        .....
    }

    public interface OnSureBtnListener {
        void onSelTextChange(String data);
    }

    SingleSelectDialog.OnSureBtnListener listener;
    public void setSureBtnListener(SingleSelectDialog.OnSureBtnListener listener) {
        //设置关闭弹框的回调
        this.listener = listener;
    }

  }



※ 传递数据给Activity
   1.DialogFragmen中的写法
   public class LoginDialogFragment extends DialogFragmen{

      public interface LoginInputListener{
         void onLoginInputComplete(String username, String password);
      }


      @Override
      public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
         ....
         @Override
         public void onClick(DialogInterface dialog, int id){
            LoginInputListener listener = (LoginInputListener) getActivity();
            listener.onLoginInputComplete(mUsername.getText().toString(), mPassword
         }
         ....
      }
   }

   2.Activity中的写法
   public class MainActivity extends Activity implements LoginInputListener{
      @Override
      protected void onCreate(Bundle savedInstanceState){
          super.onCreate(savedInstanceState);
          setContentView(R.layout.activity_main);
      }

      public void showLoginDialog(View view){
         LoginDialogFragment dialog = new LoginDialogFragment();
         dialog.show(getFragmentManager(), "loginDialog");
      }

      @Override
      public void onLoginInputComplete(String username, String password){
          Toast.makeText(this, "帐号：" + username + ",  密码 :" + password, Toast.LENGTH_SHORT).show();
      }
   }


※ 注意点
  1.DialogFragment中设置软键盘的处理方式、比如ADJUST_NOTHING、ADJUST_Pan、并没有效果、此时建议用自定义Dialog的方式编写
    且Dialog的宽高必须为WindowManager.LayoutParams.MATCH_PARENT

※ 参考
   http://blog.csdn.net/lmj623565791/article/details/37815413/
   http://blog.csdn.net/u010687392/article/details/45972491
   https://blog.csdn.net/u010324235/article/details/82912934

※ Demo位置: /Demo/DialogFragment-Demo.zip


----------------------------------------------------------------------------------------------------------------------------------



PopupWindow
----------------------------------------------------------------------------------------------------------------------------------

 ※ 基本使用
    View popupWindow = LayoutInflater.from(this).inflate(R.layout.popup_window, null);
    PopupWindow mPopupWindow = new PopupWindow(popupWindow, ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
    mPopupWindow.showAsDropDown(v);

    显示方法
    showAsDropDown(View anchor)：相对某个控件的位置（正左下方），无偏移
    showAsDropDown(View anchor, int xoff, int yoff)：相对某个控件的位置，有偏移
    showAtLocation(View parent, int gravity, int x, int y)：相对于父控件的位置，x,y是屏幕的绝对位置

    设置popwindow如果点击外面区域，便关闭。
    popupWindow.showAtLocation(parent, 0, x, y);
    //获取popwindow焦点
    popupWindow.setFocusable(true);
    //设置popwindow如果点击外面区域，便关闭。
    popupWindow.setOutsideTouchable(true);
    popupWindow.update();


 ※ 显示在某个控件的正上方
   View popupWindow = LayoutInflater.from(this).inflate(R.layout.dialog_sharetip, null);
   PopupWindow mPopupWindow = new PopupWindow(popupWindow, ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

   popupWindow.measure(View.MeasureSpec.UNSPECIFIED,View.MeasureSpec.UNSPECIFIED);
   int measuredWidth = popupWindow.getMeasuredWidth();
   int measuredHeight = popupWindow.getMeasuredHeight();
   int[] location = new int[2];
   tv_tip.getLocationOnScreen(location);
   mPopupWindow.showAtLocation(tv_tip, Gravity.NO_GRAVITY,(location[0]+tv_tip.getWidth()/2) - measuredWidth / 2, location[1] - measuredHeight);
   mPopupWindow.setOutsideTouchable(true);
   mPopupWindow.update();

 ※ 使用中的宽高注意点
   如果在使用中，要在popupWindow显示前获取其宽高，这个时候是很难获取准确的宽高的，
   所以如果是这种情况的话，建议popupWindow的宽和高在初始化时设置为固定值

 ※ 不建议使用原因
   在布局嵌套层过多的情况下，使用showAtLocation时，高无论怎么设置，位置显示都不正确，建议替换成Dialog显示

※ 参考
    https://www.cnblogs.com/popfisher/p/5608436.html


----------------------------------------------------------------------------------------------------------------------------------



Notification  通知提醒
----------------------------------------------------------------------------------------------------------------------------------

 ※ 介绍
    Notification，通知栏通知，可以将消息显示在系统的通知栏中
    Notification在3.0前用new Notification实例化，在3.0后推荐用NotificationCompate.Builder


 ※ 简单使用
    NotificationManager mNotificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
    //实例化NotificationCompat.Builde并设置相关属性, 必须包含以下三项属性，其他均为可选项
    NotificationCompat.Builder mBuilder = new NotificationCompat.Builder(context)
    .setSmallIcon(R.drawable.msg)
    .setContentTitle("标题")
    .setContentText("内容");
    //设置通知的意图
    Intent intent = new Intent(MainActivity.this, ResultActivity.class);
    PendingIntent resultPendingIntent = PendingIntent.getActivity(MainActivity.this, 0, resultIntent, PendingIntent.FLAG_UPDATE_CURRENT);
    mBuilder.setContentIntent(resultPendingIntent);
    mBuilder.setAutoCancel(true);
    //发送通知 第一个参数为标识符, 用于通知的更新和取消
    mNotificationManager.notify(1, mBuilder.build());


 ※ 通知的更新和取消
    有时候，我们并不是无限的添加新的通知，我们需要更新原有通知的信息，或者删除原有的通知
    Android提供了两种方式来维护，一种是系统自动维护，点击通知发送意图后此通知消息，一种是自己维护，自己管理通知的更新和取消
    系统自动维护：mBuilder.setAutoCancel(true);
    自己维护：更新/取消通知 mNotificationManager.notify(0);   mNotificationManager.cancel(0);


 ※ PendingIntent类介绍
    PendingIntent可以看做是对Intent的包装，延迟的 Intent，用于处理即将发生的意图

    使用方式：
    PendingIntent notify_Intent = PendingIntent.getActivity(this, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);
    同时可以getBroadcast、getActivity、getService

    Flags介绍：
    FLAG_CANCEL_CURRENT：如果构建的PendingIntent已经存在，则取消前一个，重新构建一个。
    FLAG_NO_CREATE：如果前一个PendingIntent已经不存在了，将不再构建它。
    FLAG_ONE_SHOT：表明这里构建的PendingIntent只能使用一次。
    FLAG_UPDATE_CURRENT：如果构建的PendingIntent已经存在，则替换它，常用。


 ※ 通知的震动与灯光
    Notification 有震动、响铃、呼吸灯三种响铃效果，可以通过 setDefaults(int defualts) 方法来设置。

    Default 属性有以下四种，一旦设置了 Default 效果，自定义的效果就会失效。
     -  Notification.DEFAULT_ALL：铃声、闪光、震动三种效果
     -  Notification.DEFAULT_SOUND：默认铃声效果
     -  Notification.DEFAULT_VIBRATE：默认震动效果
     -  Notification.DEFAULT_LIGHTS：默认呼吸灯效果

     注:记得添加权限: <uses-permission android:name="android.permission.VIBRATE" />

    自定义效果:
     - setSound(Uri sound)：设定一个铃声，用于在通知的时候响应。传递一个Uri的参数，格式为“file:///mnt/sdcard/Xxx.mp3”
     - setLights(int argb, int onMs, int offMs)：设定前置LED灯的闪烁速率，持续毫秒数，停顿毫秒数。
     - setVibrate(long[] pattern)：设定震动的模式，以一个long数组保存毫秒级间隔的震动。


 ※ 参考
    http://blog.csdn.net/i_wait_for_you/article/details/70240035
    http://blog.csdn.net/xxbs2003/article/details/19167331


 ※ 已编写工具类: NotificationUtils.java

----------------------------------------------------------------------------------------------------------------------------------


