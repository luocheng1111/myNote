
1.Android的性能优化的方向
2.稳定性能优化介绍
3.流畅性能优化介绍

App性能优化
----------------------------------------------------------------------------------------------------------------------------------

在Android应用优化方面，我们主要从以下4个方面进行优化：
  1.稳定(ANR、内存溢出，Bug的收集处理)
  2.流畅(卡顿)
  3.耗损(耗电、流量、网络)
  4.安装包(apk大小，安全)


※ 稳定（ANR程序崩溃优化、内存溢出、内存泄漏、Bug的收集处理）

  ANR
  应用程序的主线程等待超过一定时间会产生ANR异常提示框
  常见的场景：1.一些比较耗时的操作放到主线程里进行
            2.UI线程进行了一些磁盘IO（数据库，sd卡等）的耗时操作
            3.广播接收者没能及时执行完成onReceive()方法（通常10s）
  如何检测：系统会自动捕捉，弹出弹框，异常信息保存到trace.txt文件中


  内存泄漏、内存溢出
  一般在activity onDestory后，一些引用没有及时回收或停止。
  常见的场景：1.Handler的延时消息或一些循环操作没有在ondestory时停止
            2.一些资源没有关闭，比如IO、File操作，SQlite操作等
            3.一些无限循环的动画没有停止播放
            4.一些引用或者监听类没有回收，比如电话的监听、EventBus的取消注册
  如何检测：LeakCanary工具、Android Studio的Memory Monitor
  LeakCanary的原理是监控每个activity，在activity ondestory后，在后台线程检测引用，然后过   一段时间进行gc，gc后如果引用还在，那么dump出内存堆栈，并解析进行可视化显示。

  Bug的收集处理：腾讯的Bugly



※ 流畅（卡顿）

  我们知道，Android的绘制需要经过onMeasure、onLayout、onDraw等几个步骤，所以布局的层级越深、元素越多、耗时也就越长，可以用Hierarchy Viewer工具来检测
  1.页面层级过深(指标：单页面的3X（粉红色区域） Overdraw小于25%)
    * xml布局文件优化，使用ConstraintLayout、RelativeLayout简化布局层次
    * 使用ViewStub延迟加载View、Merge优化
    * 删除控件中的无用属性

  过度绘制是指在屏幕上的某个像素在同一帧的时间内被绘制了多次。在多层次重叠的 UI 结构中，如果不可见的 UI 也在做绘制的操作，就会导致某些像素区域被绘制了多次，从而浪费了多余的 CPU 以及 GPU 资源。我们可以通过开启手机的过渡绘制功能来检测页面是否被过度绘制。
  2.绘制性能优化
    * 移除xml中多余的背景
    * 减少过度绘制
    * 自定义View优化，使用 canvas.clipRect()来帮助系统识别那些可见的区域，只有在这个区域内才会被绘制。

  3.刷新优化
    * 减少刷新次数，灵活利用缓存及限时刷新
    * 缩小刷新区域，局部刷新，避免多余请求

  4.界面的启动优化


 ※ 耗损(耗电、流量、网络)


 ※ 安装包瘦身（apk大小，安全）
   代码混淆。使用proGuard 代码混淆器工具，它包括压缩、优化、混淆等功能。
   资源优化。比如使用 Android Lint 删除冗余资源，资源文件最少化等。
   图片优化。比如利用 AAPT 工具对 PNG 格式的图片做压缩处理，降低图片色彩位数等。
   避免重复功能的库，使用 WebP图片格式等。
   插件化，比如功能模块放在服务器上，按需下载，可以减少安装包大小。


 ※ 学习
    https://blog.csdn.net/huangxiaoguo1/article/details/80434456
    https://blog.csdn.net/xiangzhihong8/article/details/92800490


----------------------------------------------------------------------------------------------------------------------------------


Android 性能优化检测的的一些工具
----------------------------------------------------------------------------------------------------------------------------------
  开发者选项中：
    调试GPU过度绘制、启用严格模式、显示CPU使用情况、GPU呈现模式分析、显示所有”应用程序无响应”。

  IDE中：
    Android Studio，比如静态代码检测工具(Lint)、Memory Monitor、CPU Monitor、NetWork Monitor、GPU Monitor、Layout Inspector、Analyze APK等。

  SDK中：
    比如DDMS、HierarchyViewer、TraceView等。

  第三方工具：
    MAT、LeakCanary、GT等。

  Memory Monitor 工具
    Memory Monitor是Android Studio自带的一个内存监视工具，它可以很好地帮助我们进行内存实时分析。通过点击Android Studio右下角的Memory Monitor标签，打开工具可以看见较浅蓝色代表free的内存，而深色的部分代表使用的内存从内存变换的走势图变换，可以判断关于内存的使用状态，例如当内存持续增高时，可能发生内存泄漏；当内存突然减少时，可能发生GC等。

  Memory Analyzer工具
    MAT 是一个快速，功能丰富的 Java Heap 分析工具，通过分析 Java 进程的内存快照 HPROF 分析，从众多的对象中分析，快速计算出在内存中对象占用的大小，查看哪些对象不能被垃圾收集器回收，并可以通过视图直观地查看可能造成这种结果的对象。

  LeakCanary工具
    LeakCanary是一个内存监测工具，该工具是Square公司出品的，所谓Square出品必属精品，LeakCanary的官方地址为https://github.com/square/leakcanar，我们可以在Gradle里引用它。

  Android Lint 工具
    Android Lint 是一个代码扫描工具，能够帮助我们识别资源、代码结构存在的问题。
    遗漏的翻译（没用上的翻译）比如国际化未被翻译的字段值
    布局性能（以前是 layoutopt工具，可以解决无用布局、嵌套太多、布局太多）
    未使用到资源
    不一致的数组大小
    国际化问题（硬编码）
    图标的问题（重复的图标，错误的大小）
    可用性问题（如不指定的文本字段的输入型）
    Manifest文件的错误

----------------------------------------------------------------------------------------------------------------------------------



Android 启动优化
----------------------------------------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------------------------------------




Android Apk终极瘦身
----------------------------------------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------------------------------------