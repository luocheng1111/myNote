

PullToRefresh
----------------------------------------------------------------------------------------------------------------------------------------
 ◆ 牛人笔记
     http://blog.csdn.net/lmj623565791/article/details/38238749

 ※ 基本使用 - 下拉刷新
     1.导入包
     2.实例化
     3.setOnRefreshListener(new OnRefreshListener<ListView>(){} 

 ※ 上拉加载，下拉刷新
     在属性文件里加个字段 ptr:ptrMode="both"
     此时监听方法就是mPullRefreshListView.setOnRefreshListener(new OnRefreshListener2<ListView>(){}); 多了个2
    
 ※ 设置图标动画风格及图标
     ptr:ptrAnimationStyle="flip" 为箭头模式。默认为旋转模式
     ptr:ptrDrawable="@drawable/ic_launcher" 可以设置图片

 ※ 添加时间显示
     mPullRefreshListView.getLoadingLayoutProxy().setLastUpdatedLabel(label);

 ※ 自定义下拉文本
     ILoadingLayout startLabels = mPullRefreshListView.getLoadingLayoutProxy();  
     startLabels.setPullLabel("你可劲拉，拉...");// 刚下拉时，显示的提示  
     startLabels.setRefreshingLabel("好嘞，正在刷新...");// 刷新时  
     startLabels.setReleaseLabel("你敢放，我就敢刷新...");// 下来达到一定距离时，显示的提示  

     单独设置下拉
     mPullRefreshListView.getLoadingLayoutProxy(false，true);
  
 ※ 其他属性介绍
     见博文

 ※ 其他布局添加下拉刷新 
     GridView下拉刷新：同上述用法一样。只是变成PullToRefreshGridView

----------------------------------------------------------------------------------------------------------------------------------------


SlidingMenu 侧滑
----------------------------------------------------------------------------------------------------------------------------------------
 ◆ 牛人笔记
     一些基本属性介绍 http://www.2cto.com/kf/201310/251154.html
     SlidingMenu项目 https://github.com/jfeinstein10/SlidingMenu
     http://blog.csdn.net/yangyu20121224/article/details/9258275
     http://blog.csdn.net/yangyu20121224/article/details/9262931


 ※ 属性设置
    基本属性设置:
     SlidingMenu sm = getSlidingMenu();
     menu.setMode(SlidingMenu.LEFT_RIGHT); // 左右都可以滑动的样式     SlidingMenu.LEFT 左滑样式
     menu.setTouchModeAbove(SlidingMenu.TOUCHMODE_MARGIN); // 触发方式：在边缘时才会触发侧滑  还可以设置全屏都可以触发
     menu.setBehindOffsetRes(R.dimen.slidingmeun_offset); // 侧滑完成后，给主界面预留的宽度

    左右视图设置：
     setBehindContentView(R.layout.left_content); // 设置左边菜单打开后的视图界面
     menu.setSecondaryMenu(R.layout.right_content); // 设置右边菜单打开后的视图界面

    阴影效果设置：
     menu.setShadowDrawable(R.drawable.shadow);//设置阴影图片
     menu.setShadowWidthRes(R.dimen.shadow_width);//设置阴影图片的宽度
     menu.setSecondaryShadowDrawable(R.drawable.shadowright);//右侧菜单的阴影图片

    动画效果设置：
     sm.setFadeEnabled(true); // 设置是否渐入渐出效果
     sm.setFadeDegree(0.35f); // 设置滑动时的渐变程度
     sm.setBehindScrollScale(0.35f);// 设置滑动菜单滑动时左边布局内容开始滑动的位置

    一些关于滑动的方法：
     sm.showMenu();//显示左边Menu
     sm.showSecondaryMenu(true); //显示右边Menu
     sm.showContent(); //显示内容
     toggle(); //动态判断自动关闭或开启SlidingMenu
     setSlidingActionBarEnabled(false); // 设置当打开滑动菜单时，ActionBar不能够跟随着一起滑动


 ※ 实现SlidingMenu的两种方式  http://blog.csdn.net/yangyu20121224/article/details/9258275
    一：继承SlidingFragmentActivity
     1.Activity继承SlidingFragmentActivity
     2.初始化SlidingMenu
       获得SlidingMenu实例、设置滑动模式、设置触发方式、设置预留宽度、设置左右布局、
       设置左右阴影图片及宽度
     3.设置左右菜单的Fragment,并替换

    二：用普通的FragmentActivity实现
     1.SlidingMenu menu = new SlidingMenu(this);
     2.初始化SlidingMenu实例
       注：此时设置左布局变成 menu.setMenu(R.layout.menu_frame); //设置menu的布局文件
           并且必须调用 menu.attachToActivity(this, SlidingMenu.SLIDING_CONTENT); //使SlidingMenu附加在Activity上
     3.设置左右菜单的Fragment,并替换


 ※ 自定义SlidingMenu动画效果的实现  http://blog.csdn.net/yangyu20121224/article/details/9262931
    例子一：放大效果 见MySlidingMenuDemo8
    CanvasTransformer mTransformer = new CanvasTransformer(){  
            @Override  
            public void transformCanvas(Canvas canvas, float percentOpen) {  
                float scale = (float) (percentOpen*0.25 + 0.75);  
                canvas.scale(scale, scale, canvas.getWidth(), canvas.getHeight());                
            }  
    } 
    sm.setBehindCanvasTransformer(mTransformer);

    例子二：从左到右依次放大效果 见MySlidingMenuDemo9
    canvas.scale(percentOpen, 1, 0, 0);	

    例子三：从下而上移动效果 MySlidingMenuDemo10
    canvas.translate(0, canvas.getHeight() * (1 - interp.getInterpolation(percentOpen)));

----------------------------------------------------------------------------------------------------------------------------------------


ActionBar
----------------------------------------------------------------------------------------------------------------------------------
 ◆牛人笔记
     http://www.apkbus.com/forum.php?mod=viewthread&tid=105602&extra=page%3D1&page=1
     searchView和listview实现搜索 http://www.linuxidc.com/Linux/2013-06/85499p2.htm

 ※ 主要功能
     1.可显示软件图标，也可用其他图标代替。当团建不在最高级页面时，图标左侧会显示一个左箭头，用户可以通过这个箭头向上导航
     2.提供下拉的导航条目,如果你的应用要在不同的View中显示数据，这部分允许用户来切换视图。一般的作法是用一个下拉菜单或者是Tab选项卡。如果只有一个界面，那这里可以显示应用程序的标题或者是更长一点的商标信息.
     3.提供交互式活动视图代替选项条目。
     4.使用程序的图标作为返回Home主屏或向上的导航操作。

 ※ ActionBar的显示和隐藏
     显示：AndroidManifest里面的android:minSdkVersion和android:targetSdkVersion >=11(Android 3.0)即可
     隐藏：<activity android:theme="@android:style/Theme.Holo.NoActionBar">

     代码实现：
     ActionBar actionBar = getActionBar(); //若主题设置为没有ActionBar,则得到的值为null
     if(actionBar!=null){
	  actionBar.show(); //ActionBar的显示
	  actionBar.hide(); //ActionBar的隐藏
     }


 ※ ActionBar分为3部分。1、图标、标题区域  2、选项卡区域  3、菜单图标区域
    1.图标、标题区域
      设置图标：
      requestWindowFeature(Window.FEATURE_LEFT_ICON);
      setFeatureDrawableResource(Window.FEATURE_LEFT_ICON, resId); 

      actionBar.setDisplayShowHomeEnabled(true); //设置Home区域监听
      actionBar.setDisplayHomeAsUpEnabled(true); //显示回退图标及使得Home区域监听，监听和菜单监听一样，id为home
      actionBar.setTitle("ActionBar");  //默认为显示
    
    2.选项卡区域  这个区域有3种不同风格的类型
      第一种：Tab格式 ActionBar.NAVIGATION_MODE_TABS
      actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);
      actionBar.addTab(actionBar.newTab().setText("Tab1").setTabListener(this));
      actionBar.addTab(actionBar.newTab().setText("Tab2").setTabListener(this));
    
      第二种：List格式 ActionBar.NAVIGATION_MODE_LIST
      String[] str = { "1", "2", "3", "4", "5" };
      actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_LIST);
      actionBar.setListNavigationCallbacks(new ArrayAdapter<String>(MainActivity.this,android.R.layout.simple_spinner_item, str), this);

      第三种：略  ActionBar.NAVIGATION_MODE_STANDARD
      ...

    3.菜单图标区域
      大致和创建menu一样，不过要把menu加在ActionBar里面，则需要加几个参数，则下面着重对参数进行解释
      android:showAsAction="" //1.never 从不显示在ActionBar里面，显示在menu里
                                2.always 和1相反
                                3.ifRoom 如果有空间则显示在ActionBar里面，没有就显示在menu里面
			        4.withText 一般always|withText或ifRoom|withText使用，空间够时显示文字
      注：ActionBar中，如果同时设置了图标和文字，则只会显示图片，若无图片，才会显示文字。


 ※ 搜索
    xml：
     <item android:id="@+id/menu_search"
           android:title="Search"
           android:icon="@drawable/menu_search"
           android:showAsAction="ifRoom"
           android:actionViewClass="android.widget.SearchView" />
    java：
     SearchView searchView = (SearchView) menu.findItem(R.id.menu_search).getActionView();
     searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
         @Override
         public boolean onQueryTextSubmit(String s) {
            webView.loadUrl("http://www.baidu.com/s?wd=" + URLEncoder.encode(s, "UTF-8"));
            return true;
         }
 
         @Override
         public boolean onQueryTextChange(String s) {
            return false;
         }
     });

----------------------------------------------------------------------------------------------------------------------------------


Menu
----------------------------------------------------------------------------------------------------------------------------------
 ◆牛人笔记
     menu入门  http://www.linuxidc.com/Linux/2012-02/55500.htm
     menu详解  http://www.cnblogs.com/qingblog/archive/2012/06/08/2541709.html
 
 ※ 菜单的创建(两种方式，代码和xml方式)
    方式一：
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        super.onCreateOptionsMenu(menu);
	//1.组别   2.Id   3.顺序，从小到达   4.菜单项显示文本
        menu.add(Menu.NONE, Menu.First+1, 0, "设置").setIcon(R.drawable.setting);
        return true;
    }
    注：选项菜单最多只能显示6个菜单项，超过6个时，第6个菜单项会被系统替换为一个叫“更多”的子菜单，原来显示不下的菜单项都作为“更多”菜单的子菜单项。

    方式二：
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        super.onCreateOptionsMenu(menu);
        getMenuInflater().inflate(R.menu.options_menu, menu);
        return true;
    }

    /res/menu/options_menu.xml
    <menu xmlns:android="http://schemas.android.com/apk/res/android">
      <item android:id="@+id/menu_setting" android:title="设置" android:icon="@drawable/setting"></item>
    </menu>


 ※ 子菜单的创建(两种方式，代码和xml方式)
    方式一：
    SubMenu subMenu = menu.addSubMenu(base, base+1, Menu.NONE, "系统设置");
    subMenu.add(base, base+2, base+2, "网络设置");
    subMenu.add(base, base+3, base+3, "高级设置");
    subMenu.add(base, base+4, base+4, "安全设置");
    subMenu.setIcon(R.drawable.settings); //添加图片
    注：Menu可以包含多个SubMenu, SubMenu可以包含多个MenuItem，但SubMenu不能包含SubMenu，即子菜单不能嵌套。

    方式二：
    <menu xmlns:android="http://schemas.android.com/apk/res/android">
       <item android:id="@+id/menu_setting" android:title="设置" android:icon="@drawable/setting"></item>
       <menu>
        ...
       <menu>
    </menu>


 ※ 菜单的监听
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
      super.onOptionsItemSelected(item);
      switch(item.getItemId()){//得到被点击的item的itemId
        case Menu.First+1: //对应的ID就是在add方法中所设定的Id
            break;
        case Menu.First+2:
            break;
      }
      return true;
    }

----------------------------------------------------------------------------------------------------------------------------------
