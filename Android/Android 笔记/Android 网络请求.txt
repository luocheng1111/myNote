


Android 基础知识
----------------------------------------------------------------------------------------------------------------------------------

 ※ HTTP请求&响应
    Http请求:
    一次Http请求就是向目标服务器发送一串文本。什么样的文本？下面讲讲Http请求包/响应包的结构

    HTTP请求文本包结构:
    POST /meme.php/home/user/login HTTP/1.1             --->请求行(包含请求方法、请求地址 和 协议及版本)
    Host: 114.215.86.90
    Cache-Control: no-cache
    Postman-Token: bd243d6b-da03-902f-0a2c-8e9377f6f6ed --->请求头部
    Content-Type: application/x-www-form-urlencoded

    tel=13637829200&password=123456                     --->请求包体



    Http响应:
    请求了之后会得到就会收到响应包

    HTTP响应包结构:
    HTTP/1.1 200 OK                                     --->状态行(包含返回状态码)
    Date: Sat, 02 Jan 2016 13:20:55 GMT
    Server: Apache/2.4.6 (CentOS) PHP/5.6.14
    X-Powered-By: PHP/5.6.14
    Content-Length: 78
    Keep-Alive: timeout=5, max=100                      --->响应头部
    Connection: Keep-Alive
    Content-Type: application/json; charset=utf-8

    {"status":202,"info":"成功","data":null}             --->响应包体


 ※ Http请求方式有
    GET         请求指定url的数据，请求体为空(例如打开网页)。
    POST    请求指定url的数据，同时传递参数(在请求体中)。
    HEAD    类似于get请求，只不过返回的响应体为空，用于获取响应头。
    PUT         从客户端向服务器传送的数据取代指定的文档的内容。
    DELETE  请求服务器删除指定的页面。
    CONNECT HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。
    OPTIONS 允许客户端查看服务器的性能。
    TRACE   回显服务器收到的请求，主要用于测试或诊断。
    常用只有Post与Get。



 ※ Get&Post的区别
   Get与Post区别本质就是参数是放在请求行中还是放在请求体中
   有人说：
     1.Get是明文，Post隐藏
       移动端不是浏览器,不用https全都是明文。
     2.Get传递数据上限XXX
       Get方法提交的数据大小长度并没有限制，而是IE浏览器本身对地址栏URL长度有最大长度限制：2083字符，而在移动端，没有这个影响
     3.Get中文需要编码
       是真的...要注意。URLEncoder.encode(params, "gbk");



 ※ HTTP缓存机制
    缓存对于移动端是非常重要的存在
    缓存的好处：
    1.减少请求次数，减小服务器压力.
    2.本地数据读取速度更快，让页面不会空白几百毫秒。
    3.在无网络的情况下提供数据。

    缓存一般由服务器控制(通过某些方式可以本地控制缓存，比如向过滤器添加缓存控制信息)。通过在请求头添加下面几个字端：
    Request:
    请求头字段
    If-Modified-Since: Sun, 03 Jan 2016 03:47:16 GMT   缓存文件的最后修改时间。
    If-None-Match: "3415g77s19tc3:0"   缓存文件的Etag(Hash)值
    Cache-Control: no-cache    不使用缓存
    Pragma: no-cache   不使用缓存

    Response:
    响应头字段
    Cache-Control: public  响应被共有缓存，移动端无用
    Cache-Control: private 响应被私有缓存，移动端无用
    Cache-Control:no-cache 不缓存
    Cache-Control:no-store 不缓存
    Cache-Control: max-age=60  60秒之后缓存过期（相对时间）
    Date: Sun, 03 Jan 2016 04:07:01 GMT    当前response发送的时间
    Expires: Sun, 03 Jan 2016 07:07:01 GMT 缓存过期的时间（绝对时间）
    Last-Modified: Sun, 03 Jan 2016 04:07:01 GMT   服务器端文件的最后修改时间
    ETag: "3415g77s19tc3:0"    服务器端文件的Etag[Hash]值

    Http请求时 缓存机制的运行简约流程(详细流程看网页)
    1.看是否有缓存
    2.看是否已过期
    3.看数据是否有更新


 ※ 学习
   https://www.jianshu.com/p/3141d4e46240


----------------------------------------------------------------------------------------------------------------------------------



Android 网络请求的 第三方框架
----------------------------------------------------------------------------------------------------------------------------------

 ※ HttpClient & HttpURLConnection
    HttpClient早被废弃了，具体原因可以看 http://blog.csdn.net/guolin_blog/article/details/12452307
    HttpURLConnection的用法 Demo位置见: Demo/HttpURLConnection_Demo.zip


  ※ Volley
     Volley与OkHttp用法非常相似。都是用构造请求加入请求队列的方式管理网络请求。
     Volley在Android 2.3及以上版本，使用的是HttpURLConnection，而在Android 2.2及以下版本，使用的是HttpClient。
     Volley存在一个缓存线程，一个网络请求线程池(默认4个线程)。
     Volley停止了更新
     Volley的库 https://github.com/Jude95/RequestVolley



  ※ OkHttp
      OkHttp得到了官方的认可，并在不断优化。
      OkHttp使用Okio进行数据传输。都是Square家的。
      但并不是直接用OkHttp。Square公司还出了一个Retrofit库配合OkHttp战斗力翻倍。

     用法:http://square.github.io/okhttp/
          http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0106/2275.html

  ※ Retrofit&RestAPI
     Retrofit极大的简化了网络请求的操作，它应该说只是一个Rest API管理库，它是直接使用OKHttp进行网络请求并不影响你对OkHttp进行配置。毕竟都是Square公司出品。
     RestAPI是一种软件设计风格。
     服务器作为资源存放地。客户端去请求GET,PUT, POST,DELETE资源。并且是无状态的，没有session的参与。
     移动端与服务器交互最重要的就是API的设计。比如这是一个标准的登录接口。
     注意Retrofit2.0相较1.9进行了大量不兼容更新。google上大部分教程都是基于1.9的。这里有个2.0的教程。
     http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/1016/3588.html
     教程里进行异步请求是使用Call。Retrofit最强大的地方在于支持RxJava。就像我上图中返回的是一个Observable。RxJava上手难度比较高，但用过就再也离不开了。
     Retrofit+OkHttp+RxJava配合框架打出成吨的输出，这里不再多说。

----------------------------------------------------------------------------------------------------------------------------------



Volley 框架
----------------------------------------------------------------------------------------------------------------------------------
 ◆ 学习自
    基本介绍：http://www.chengxuyuans.com/Android/90526.html
    具体使用：http://blog.csdn.net/guolin_blog/article/details/17482095
    具体使用：http://blog.csdn.net/t12x3456/article/details/9221611
    Volley的封装：https://github.com/bacy/volley
    综合:http://bxbxbai.github.io/2014/10/07/android-develop-resource/


 ※ 需要的jar包下载地址
    http://download.csdn.net/detail/sinyu890807/7152015

 ※ 介绍
    Google 2013推出的Android网络通讯库，能使网络通信更快、更简单、更健壮。
    Volley特别适合数据量不大但是通信频繁的场景。
    不实用的地方:
    比如大数据(large payloads), 文件下载， 流媒体，这些case，还需要使用原始的方法，比如Download Manager等。


 ※ 特性
   1.扩展性强。Volley 中大多是基于接口的设计，可配置性强。
   2.一定程度符合 Http 规范，包括返回 ResponseCode(2xx、3xx、4xx、5xx）的处理，请求头的处理，缓存机制的支持等。并支持重试及优先级定义。
   3.默认 Android2.3 及以上基于 HttpURLConnection，2.3 以下基于 HttpClient 实现。

 ※ 提供的功能
    JSON，图像等的异步下载；
    网络请求的排序（scheduling）
    请求队列和请求优先级
    请求Cache和内存管理
    可以取消请求
    缓存
    多级别取消请求
    和Activity和生命周期的联动（Activity结束时同时取消所有网络请求）
----------------------------------------------------------------------------------------------------------------------------------



android-async-http 框架
----------------------------------------------------------------------------------------------------------------------------------
 ◆ 学习自
    http://blog.csdn.net/yanbober/article/details/45307549
    http://blog.csdn.net/u012782626/article/details/41308505?utm_source=tuicool&utm_medium=referral
    http://www.open-open.com/lib/view/open1369637365753.html
    使用中碰到的坑：http://www.elsyy.com/news/2014/1114/13053673680.html

 ※ 需要的jar包下载地址
    http://download.csdn.net/download/guangjiriming/7976699

 ※ 介绍
    这个网络请求库是基于Apache HttpClient库之上的一个异步网络请求处理库，网络处理均基于
    Android的非UI线程，不会阻塞主UI线程，并且通过回调方法处理请求结果

 ※ 特性
   1.发送异步http请求，在匿名callback对象中处理response信息
   2.http请求发生在UI(主)线程之外的异步线程中
   3.内部采用线程池来处理并发请求
   4.通过RequestParams类构造GET/POST；
   5.内置多部分文件上传，不需要第三方库支持；
   6.流式Json上传，不需要额外的库；
   7.能处理环行和相对重定向；
   8.和你的app大小相比来说，库的size很小，所有的一切只有90kb；
   9.在各种各样的移动连接环境中具备自动智能请求重试机制；
   10.自动的gzip响应解码；
   11.内置多种形式的响应解析，有原生的字节流，string，json对象，甚至可以将response写到文件中；
   12.永久的cookie保存，内部实现用的是Android的SharedPreferences；
   13.通过BaseJsonHttpResponseHandler和各种json库集成；
   14.支持SAX解析器；
   15.支持各种语言和content编码，不仅仅是UTF-8；


 ※ 基础使用操作步骤
   1.官网下载依赖jar包，导入工程中libs文件夹下并添加到工程路径即可。
   2.创建一个AsyncHttpClient；
   3.（可选的）通过RequestParams对象设置
   4.调用AsyncHttpClient的某个get方法，传递你需要的（成功和失败时）callback接口实现，
     一般都是匿名内部类，实现了AsyncHttpResponseHandler，类库自己也提供许多现成的response handler，你一般不需要自己创建。

----------------------------------------------------------------------------------------------------------------------------------



OkHttp 框架
----------------------------------------------------------------------------------------------------------------------------------
 ◆ 学习自
    OkHttp的基本使用：http://www.open-open.com/lib/view/open1435381866122.html
    OkHttp的基本进阶使用：http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0106/2275.html
    OkHttp的封装，让使用更简便：http://blog.csdn.net/lmj623565791/article/details/47911083

 ※ OkHttp封装后的Demo下载地址
    http://download.csdn.net/detail/u012524598/9413011

 ※ 需要的jar包下载地址
    OkHttp.jar: http://download.csdn.net/download/mr_catr/9394164
    Okio.jar(OkHttp.jar依赖此包) https://search.maven.org/remote_content?g=com.squareup.okio&a=okio&v=LATEST


 ※ OkHttp 框架特点
    1.OKHttp是Android版Http客户端。非常高效，支持SPDY、连接池、GZIP和HTTP缓存。
    2.默认情况下，OKHttp会自动处理常见的网络问题，像二次连接、SSL的握手问题。
    3.当网络出现问题的时候，OKHttp会依然有效，它将从常见的连接问题当中恢复
    4.从Android4.4开始HttpURLConnection的底层实现采用的是okHttp.
    5.自身支持Https

 ※ 提供的功能
    get、post请求、图片加载
    基于Http的文件上传、文件下载、上传下载的进度回调
    支持请求回调的函数封装，可直接返回对象、对象集合
    支持session的保持
    支持自签名网站https的访问，提供方法设置下证书就行
    支持取消某个请求



----------------------------------------------------------------------------------------------------------------------------------

Retrofit
----------------------------------------------------------------------------------------------------------------------------------
 ◆ 学习自
    例子：http://www.open-open.com/lib/view/open1429672286823.html
    深入使用：http://www.bkjia.com/Androidjc/995850.html
    原理探究：http://www.cnblogs.com/angeldevil/p/3757335.html

 ※ 需要的jar包下载地址
    Retrofit.jar https://search.maven.org/remote_content?g=com.squareup.retrofit&a=retrofit&v=LATEST
    OkHttp.jar: http://download.csdn.net/download/mr_catr/9394164
    Okio.jar(OkHttp.jar依赖此包) https://search.maven.org/remote_content?g=com.squareup.okio&a=okio&v=LATEST
    Gson包：

 ※ 介绍
    Retrofit:A type-safe HTTP client for Android and Java,一个类型安全的Http Client库，
    类型安全指访问被授权可以访问的内存位置。概念太抽象，不管，只需知道Retrofit确实是个很好的开源库就可以了
    代码很多是配合注解完成，适用于一些较为大型的项目

 ※ 实现步骤
    Demo例子见：http://download.csdn.net/detail/u012524598/9414213


----------------------------------------------------------------------------------------------------------------------------------


Volley、AsyncHttp、okhttp、Retrofit的比较
----------------------------------------------------------------------------------------------------------------------------------
如果是标准的RESTful API,那么用Retrofit会非常爽！网络交互部分代码量可以减少90%。同时支持Gson,契合度很高
另外，Retrofit和okhttp是亲兄弟，建议一起用，okhttp是底层库，能够支持一些非标准的HTTP方法，比如PATCH方法。

分别介绍：
  volley：谷歌官方开发，自己的定位是轻量级网络交互，适合大量的，小数据传输，使用比较简单
  android-async-http：基于HttpClient的异步请求，但HttpClient在2.3以上已经不建议使用
  okhttp：被谷歌官方用在android源码中了，功能比较全面
  retrofit：与okhttp同属一公司所开发，用的时候需要导入okhttp jar包，一些代码通过注解实现

比较：
  小型项目可以使用volley、okhttp、代码清晰可见，上手难度简单
  大型项目RESR建议用，retrofit+okhttp，代码需要注解，上手难度中
  不建议用android-async-http，因为HttpClient在2.3已经不被建议使用了，这框架也比较老

----------------------------------------------------------------------------------------------------------------------------------



