


Android 注解框架的对比
----------------------------------------------------------------------------------------------------------------------------------------

 ※ 注解介绍
    Java的注解(Annotation)相当于一种标记，在代码中加入注解就等于为程序打上某种标记，然后再用注解处理器去解析处理这些标记, 
    注解可加在包，类，属性，方法和本地变量上

    注解解决的问题:
     可以解决一些重复性的代码, 比如开发android时，没完没了的findViewById, setOnClickListener等等方法，已经让大多数开发者头疼不已。
     注解就可以简化这一过程,大大提高代码的开发效率和优雅性
    
    比较流行的框架:
     现在比较流行的注解框架有 butterknife, annotations, xutils, afinal, roboguice等
     其中butterknife, annotations  是编译时注解(原理:自动生成代码)
         xutils, afinal, roboguice 是运行时注解(原理:反射)
     
     编译时注解: 其原理是自动生成代码, 不会影响程序性能, 但实现比反射难
     运行时注解: 其原理是反射，反射虽然强大，但会破话程序的封装性，当代码量大时, 会拖慢运行速度
     所以开发时还是选择butterknife, annotations更好


 ※ ButterKnife 注解框架
    介绍:
    来自Jakewharton大神的力作，特点是接入简单，依赖一个库就好了。另外在Android Studio上还有提供一个插件，自动生成注解与类属性。

    支持的注解: 
    1、View绑定(Bind)
    2、资源绑定(BindBool, BindColor, BindDimen, BindDrawble, BindInt, BindString)，
    3、事件绑定(OnCheckedChanged, OnClick, OnEditorAction, OnFocusChange, OnItemClick, OnItemLongClick, OnItemSelected, OnLongClick, OnPageChange, OnTextChanged, OnTouch)。

    优点:
    在性能上，ButterKnife并不会影响到app，Butterknife自动生产的代码也不多，也不会对程序的包大小有什么影响
    

 ※ AndroidAnnotations 注解框架
    介绍:
    该框架的原理跟Butterknife一样，都是在编译时生成代码，

    支持的注解:
    1、依赖注入：注入views, extras, 系统服务，资源，...
    2、简化线程模式：在方法上添加注释来制定该方法是运行在UI线程还是子线程。
    3、事件绑定：在方法上添加注释来制定该方法处理那些views的那个事件。
    4、REST client：创建一个client的接口，AndroidAnnotations会生成实现代码，这是关于网络方面的。
    5、清晰明了：AndroidAnnotations会在编译时自动生成对应子类，我们可以查看相应的子类来了解程序是怎么运行的。

    原理:
    与ButterKnife不同的是，annotations并不是生成代码供对应的类调用去给带注解的变量、方法赋值
    而是直接生成一个继承带注解的类，这个类里面有对变量赋值，对注解方法调用的代码。运行时，直接运行的是annotations生成的类
    比如Activity类对应的其实是Activity_类, annotations没有用到反射，所有的工作在编译时都做了，所以不会对我们的程序造成任何速度上的影响
    


 ※ XUtils 注解框架
    介绍:
    xutils在使用方式跟Butterknife一样，都是在成员变量，方法上添加注释，然后调用一个方法(xutils是ViewUtils.inject()方法)对成员变量赋值、事件方法设置到view上。
    不同的是，Butterknife是调用自动生成的代码来赋值，而xutils是通过反射来实现的
    xutils支持的注释目前主要有UI, 资源，事件，SharedPreference绑定。跟xutils一样是运行时利用反射去解析注释的框架还有afinal, roboguice等。


 ※ 总结
                  接入   功能   性能
    Annotations    难     强     快
    ButterKnife    易     弱     快
    XUtils         易     中     慢
    注:上面的难易，强弱，快慢都是相对他们三个自己来说的，比如Annotations的接入评级是难，并不代表它的接入方式很难，
    只是相对ButterKnife和XUtils来说比他们难。如果只想使用UI绑定，资源绑定，事件绑定的功能，推荐使用ButterKnife。

    国内Top500App使用注解框架对比(http://dwz.cn/42YseS) 
    结果: 
    第一名 ButterKnife 63 
    第二名 Dagger 16
    第三名 Android Annotations 11
    第四名 Roboguice 5
    
    原因:
    1.ButterKnife 它足够轻。通过注解，把findViewById代码的生成丢给编译器处理，在不降低执行效率的前提下，提高代码可读性和减少代码量，有什么理由不用？
      至于AndroidAnnotations，没用过，太重，不推荐使用。 --来自知乎
    2.AndroidAnnotations比较重也比较难用, 而且要在activity后面加个_, 比较破坏阅读性和维护性 --来自知乎
    
    结论:
    使用ButterKnife, 足够轻, 还有个插件自动帮你生成代码,自动生成bind, 也达到了省代码和代码优雅性的效果.
    

 ※ 参考
     Android注解框架对比 http://blog.csdn.net/p892848153/article/details/50433279
     依赖注入框架AndroidAnnotations和ButterKnife真的方便了开发者？ https://www.zhihu.com/question/38742543?sort=created


----------------------------------------------------------------------------------------------------------------------------------------




ButterKnife
----------------------------------------------------------------------------------------------------------------------------------------

 ※ 介绍:
    来自Jakewharton大神的力作，特点是接入简单，依赖一个库就好了。另外在Android Studio上还有提供一个插件，自动生成注解与类属性。

    支持的注解: 
    1、View绑定(Bind)
    2、资源绑定(BindBool, BindColor, BindDimen, BindDrawble, BindInt, BindString)，
    3、事件绑定(OnCheckedChanged, OnClick, OnEditorAction, OnFocusChange, OnItemClick, OnItemLongClick, OnItemSelected, OnLongClick, OnPageChange, OnTextChanged, OnTouch)。

    优点:
    在性能上，ButterKnife并不会影响到app，Butterknife自动生产的代码也不多，也不会对程序的包大小有什么影响


 ※ 上手使用
    1.添加依赖
      compile 'com.jakewharton:butterknife:8.8.1'
      annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'

    2.在代码中使用
      class ExampleActivity extends Activity {
        //第二步: 控件绑定
	@BindView(R.id.title)  
	TextView title;

        @Override 
        public void onCreate(Bundle savedInstanceState) {
          super.onCreate(savedInstanceState);
          setContentView(R.layout.simple_activity);

	  //第一步: 绑定activity
          ButterKnife.bind(this);
          // TODO Use fields...
        }
       
        //事件绑定
        @OnClick(R.id.submit) 
        public void submit(View view) {
	  // TODO submit data to server...
	}


 ※ 其他使用方式   
    //属性绑定
    @BindString(R.string.app_name)  
    String appName;//sting  
    @BindDrawable(R.mipmap.ic_launcher)  
    Drawable drawable;//drawble  

    //多控件绑定
    @BindViews({ R.id.button1, R.id.button2,  R.id.button3 })
    public List<Button> buttonList;
    
    //事件绑定参数可选
    @OnClick(R.id.submit) 
    public void submit() {
	// TODO submit data to server...
    }

    //事件绑定指定一个特定的类型
    @OnClick(R.id.submit) 
    public void submit(Button button) {
	// TODO submit data to server...
    }

    //多事件绑定
    @OnClick({ R.id.door1, R.id.door2, R.id.door3 })
    public void pickDoor(DoorView door) {
	// TODO submit data to server...
    }

    
 ※ Fragment绑定和Adapter的资源绑定写法
    资源绑定的写法是一样的,区别就是
    ButterKnife.bind(this); 变成 ButterKnife.bind(this, view);
    注意点:
    Fragment的生命周期与Activity不同。所以如果在onCreateView中使用绑定，
    那么你需要在onDestroyView中设置所有view为null。unbinder.unbind();
    
    public class FancyFragment extends Fragment {
      @BindView(R.id.button1) Button button1;
      @BindView(R.id.button2) Button button2;
      private Unbinder unbinder;

      @Override 
      public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fancy_fragment, container, false);
        unbinder = ButterKnife.bind(this, view);
        ...

      @Override public void onDestroyView() {
        super.onDestroyView();
        unbinder.unbind();
     ...



 ※ Zelezny插件的使用
    安装:在AndroidStudio->File->Settings->Plugins->搜索Zelezny下载添加就行 ，可以快速生成对应组件的实例对象，不用手动写
    使用:在要导入注解的Activity 或 Fragment 或 ViewHolder的layout资源代码上，右键――>Generate――Generate ButterKnife Injections



 ※ 注意点
    1.Activity ButterKnife.bind(this);必须在setContentView();之后，且父类bind绑定后，子类不需要再bind
    2.Fragment和Adapter ButterKnife.bind(this, mRootView); 且Fragment需要unbind();\
    3.属性布局不能用private or static 修饰，否则会报错
    4.setContentView()不能通过注解实现。（其他的有些注解框架可以）



 ※ 参考
     https://www.jianshu.com/p/9ad21e548b69
     http://blog.csdn.net/itjianghuxiaoxiong/article/details/50177549
     https://www.cnblogs.com/zhaoyanjun/p/6016341.html
     

----------------------------------------------------------------------------------------------------------------------------------------



Dagger2
----------------------------------------------------------------------------------------------------------------------------------------

 ※ 介绍:
    Dagger2是Dagger的升级版，是一个依赖注入框架，现在由Google接手维护。

    什么是依赖注入?
     依赖注入是面向对象编程的一种设计模式，其目的是为了降低程序耦合，这个耦合就是类之间的依赖引起的。


 ※ 上手使用
    1.引入Dagger2
      1).配置apt插件(在build.gradle(Project:xxx)中添加如下代码)
        dependencies {
	   classpath 'com.android.tools.build:gradle:2.3.3'
	   //添加apt插件
	   classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
	}
      2).添加依赖(在build.gradle(Module:app)中添加如下代码)
        apply plugin: 'com.android.application'
        //添加如下代码，应用apt插件
        apply plugin: 'com.neenbedankt.android-apt'
        ...
        dependencies {
	   ...
	   compile 'com.google.dagger:dagger:2.9'
	   apt 'com.google.dagger:dagger-compiler:2.9'
	   //java注解
	   compile 'org.glassfish:javax.annotation:10.0-b28'
	   ...
	}


    2.在代码中使用
      


 ※ 其他使用方式   

     ...





 ※ 注意点
  


 ※ 参考
     https://www.jianshu.com/p/39d1df6c877d
     

----------------------------------------------------------------------------------------------------------------------------------------





