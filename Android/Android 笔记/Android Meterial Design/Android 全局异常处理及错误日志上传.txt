


Android 全局异常处理(捕获异常)  注：此捕获不能与bugly一起用，一起用会导致很多错误不会上传到bugly
----------------------------------------------------------------------------------------------------------------------------------------

 ※ 介绍
    代码中有的异常未被try-catch，应用程序进程被杀。就会出现程序突然点着点着就崩溃的情况。
    而这个类，会捕获异常，当用户点击某个按钮出现崩溃时，异常会被捕获，此时程序不会崩溃，而且点了这个按钮没有任何反应。


 ※ 使用 https://github.com/android-notes/Cockroach/tree/master
    1).可以通过gradle的方式导入 也可以直接导入源代码(源代码只有两个文件)
       compile 'com.wanjian:cockroach:0.0.5'

    2).Cockroach的初始化 建议直接在Application中初始化
       private void initCrash() {
        Cockroach.install(new Cockroach.ExceptionHandler() {
            // handlerException内部建议手动try{  你的异常处理逻辑  }catch(Throwable e){ } ，以防handlerException内部再次抛出异常，导致循环调用handlerException

            @Override
            public void handlerException(final Thread thread, final Throwable throwable) {
                //开发时使用Cockroach可能不容易发现bug，所以建议开发阶段在handlerException中用Toast谈个提示框，
                //由于handlerException可能运行在非ui线程中，Toast又需要在主线程，所以new了一个new Handler(Looper.getMainLooper())，
                //所以千万不要在下面的run方法中执行耗时操作，因为run已经运行在了ui线程中。
                //new Handler(Looper.getMainLooper())只是为了能弹出个toast，并无其他用途
                new Handler(Looper.getMainLooper()).post(new Runnable() {
                    @Override
                    public void run() {
                        try {
                            //建议使用下面方式在控制台打印异常，这样就可以在Error级别看到红色log
                            Log.e("AndroidRuntime", "--->CockroachException:" + thread + "<---", throwable);
                            Toast.makeText(App.this, "Exception Happend\n" + thread + "\n" + throwable.toString(), Toast.LENGTH_SHORT).show();
//                        throw new RuntimeException("..."+(i++));
                        } catch (Throwable e) {

                        }
                    }
                });
            }
        });
      }

    3).Cockroach的卸载 一般用不上
       Cockroach.uninstall();


※ 参考
  Github：https://github.com/android-notes/Cockroach/tree/master
  原理：https://www.jianshu.com/p/01b69d91a3a8


----------------------------------------------------------------------------------------------------------------------------------------




Android 错误日志上传  注：bugly不能和全局捕获一起用，一起用会导致很多错误不会上传到bugly
----------------------------------------------------------------------------------------------------------------------------------------

 ※ 介绍
    用的是腾讯的bugly
    https://bugly.qq.com/v2/workbench/apps


 ※ 使用 https://bugly.qq.com/docs/user-guide/instruction-manual-android/?v=20180709165613
    1).在Module的build.gradle文件中添加依赖和属性配置：
       android {
        defaultConfig {
        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi' //, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
        }
       }

       dependencies {
        compile 'com.tencent.bugly:crashreport:latest.release' //其中latest.release指代最新Bugly SDK版本号，也可以指定明确的版本号，例如2.1.9
        compile 'com.tencent.bugly:nativecrashreport:latest.release' //其中latest.release指代最新Bugly NDK版本号，也可以指定明确的版本号，例如3.0
       }


    2).在Application的onCreate()中调用

       private void initBugly(){
        Context context = getApplicationContext();
        // 获取当前包名
        String packageName = context.getPackageName();
        // 获取当前进程名
        String processName = getProcessName(android.os.Process.myPid());
        // 设置是否为上报进程
        CrashReport.UserStrategy strategy = new CrashReport.UserStrategy(context);
        // 腾讯建议：只在主进程下上报数据 是为了节省流量、内存等资源
        strategy.setUploadProcess(processName == null || processName.equals(packageName));
        /**
         * 参数二：注册时申请的APPID
         * 参数三：调试模式开关 建议在测试阶段建议设置成true，发布时设置为false
         */
        CrashReport.initCrashReport(getApplicationContext(), 注册时申请的APPID, isDebug, strategy);

      }

      /**
       * 获取进程号对应的进程名
       *
       * @param pid 进程号
       * @return 进程名
       */
      private static String getProcessName(int pid) {
        BufferedReader reader = null;
        try {
            reader = new BufferedReader(new FileReader("/proc/" + pid + "/cmdline"));
            String processName = reader.readLine();
            if (!TextUtils.isEmpty(processName)) {
                processName = processName.trim();
            }
            return processName;
        } catch (Throwable throwable) {
            throwable.printStackTrace();
        } finally {
            try {
                if (reader != null) {
                    reader.close();
                }
            } catch (IOException exception) {
                exception.printStackTrace();
            }
        }
        return null;
       }


 ※ 符号表
   介绍：代码进行混淆后，很多类名和方法名会变成a或者b之类的名字，这样的错误上传到bugly后，就会出现 a.a.a之类的, 就根本看不出哪个方法出错。
        配置符号表就是为了在bugly还原类名或者方法名，让我们可以方便的看出哪里出错


----------------------------------------------------------------------------------------------------------------------------------------

