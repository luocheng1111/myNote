

Slidr 一行代码实现右滑退出Activity
----------------------------------------------------------------------------------------------------------------------------------

※ 介绍
   IOS系统自带手指滑动可以返回当前界面,而Android系统则需要自己去实现，Slidr可以很简单的实现这些功能,而且可以做一些个性化得定制.
   使用非常简单，最少只用一行代码就搞定。
   Github: https://github.com/r0adkll/Slidr
   

※ 使用
   1.添加依赖
     compile 'com.r0adkll:slidableactivity:2.0.6'
   2.在已有主题中添加
     <!--切换activity时屏幕不变暗 注意：此属性会导致style中的android:windowAnimationStyle引用的Activity动画失效-->
     <item name="android:windowIsTranslucent">true</item>
     <!--窗口的背景设置成透明 ,这样的话在我们每个界面的根布局都要设置background,要不然就是透明的-->
     <item name="android:windowBackground">@android:color/transparent</item>
   3.在所有的界面中加上背景色
     <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
         xmlns:tools="http://schemas.android.com/tools"
         xmlns:app="http://schemas.android.com/apk/res-auto"
         android:orientation="vertical"
         android:layout_width="match_parent"
         android:layout_height="match_parent"
         android:background="@color/xxx">
   4.在要滑动的Activity中OnCreate方法中使用,有三种方式
      Slidr.attach(this); 
      Slidr.attach(this,slidrConfig);(推荐)
      Slidr.attach(this,statusBarColor1,statusBarColor2); 
      
      方式1 : 直接绑定当前的Activity,这种方式一般不适用,下面介绍,这个默认的是向左滑退出Activity
      方式2 : 配置一些参数config, 这个最常用
      方式3 : 默认的向左滑退出Activity,同时滑动时状态栏有渐变颜色,statusBarColor2是渐变开始的颜色,statusBarColor1渐变结束的颜色,
              滑动结束时状态栏颜色恢复系统默认的颜色,所以开始的时候我们可以设置状态栏的颜色为statusBarColor1
      
      推荐使用：
      //在使用过程中,可以使Activity滑动退出的方向和Activity进场的方向动画设置相反的方向,这样体验也比较好,
      //同时也可以研究一下5.0之后Activity的转场动画配合Slidr使用,效果更佳,
      private void initSlidr() {
        SlidrConfig config=new SlidrConfig.Builder()
                .position(SlidrPosition.TOP)//滑动起始方向
                .edge(true)
                .edgeSize(0.3f)//边界占屏幕大小30%
                .build();
        Slidr.attach(this,config);
      }


※ Slidr参数详解
   SlidrConfig config = new SlidrConfig.Builder()
    .primaryColor(getResources().getColor(R.color.primary)
    .secondaryColor(getResources().getColor(R.color.secondary)
    .position(SlidrPosition.LEFT|RIGHT|TOP|BOTTOM|VERTICAL|HORIZONTAL)
    .sensitivity(1f)
    .scrimColor(Color.BLACK)
    .scrimStartAlpha(0.8f)
    .scrimEndAlpha(0f)
    .velocityThreshold(2400)
    .distanceThreshold(0.25f)
    .edge(true|false)
    .edgeSize(0.18f)
    .listener(new SlidrListener(){...})
    .build();
   
   primaryColor : 滑动时状态栏渐变结束的颜色
   secondaryColor : 滑动时状态栏渐变开始的颜色
   position : 设置滑动时起始方向,可以同时设置多个,比如设置left,意思是从左向右滑
   sensitivity : 响应的敏感度,0-1f,默认值是1f
   scrimColor : 滑动时acitvity之间的蒙层颜色,默认是黑色
   scrimStartAlpha : 滑动开始时Activity之间蒙层颜色的透明度,0-1f,默认值0.8f
   scrimEndAlpha : 滑动结束时Activity之间蒙层颜色的透明度,0-1f,默认值0f
   velocityThreshold : 滑动时移动速度阈值,超过这个值会响应滑动事件
   distanceThreshold : 滑动时手指移动距离占屏幕百分比的阈值,超过这个值才响应事件
   edge : boolean类型,是否设置响应事件的边界,默认是false,没有边界,滑动任何地方都有响应
   edgeSize : 边界的大小占屏幕的百分比,0-1f ,这时要看positon的方向,比如position是left,edgeSize是0.2f,意思就是边界的大小等于距离屏幕左边界占屏幕20%的大小



※ 注意点
   1.Slidr的使用很简单,但需要注意的是他的滑动事件是最高级的,能抢夺一切事件,如果我们的项目中有ViewPager或者RecyclerView,他们的滑动事件都被抢夺走了 ,
     如果我们要处理事件,感觉非常的麻烦,这时我们为Slidr设置config来控制他的响应事件,比如控制速度,手指滑动的距离才来响应Slidr事件
     ViewPager的建议配置：
     SlidrConfig config=new SlidrConfig.Builder()
                .position(SlidrPosition.LEFT)//滑动起始方向
                .edge(true)
                .edgeSize(0.18f)//距离左边界占屏幕大小的18%
                .build();
     Slidr.attach(this,config);
 
     RecyclerView的建议配置：
     SlidrConfig config=new SlidrConfig.Builder()
                .position(SlidrPosition.TOP)//滑动起始方向
                .edge(true)
                .edgeSize(0.3f)//边界占屏幕大小30%
                .build();
     Slidr.attach(this,config);

   2.android:windowIsTranslucent会导致style引用的Activity切换动画失效 
     解决方案：
      1.style中不使用android:windowAnimationStyle
      2.使用代码设置启动动画 ActivityUtils.startActivity(i, com.lc.base.R.anim.slide_left_in, R.anim.slide_right_out);
    


※ 学习：https://blog.csdn.net/Andy_l1/article/details/77097884



----------------------------------------------------------------------------------------------------------------------------------
