

BaseRecyclerViewAdapterHelper 万能适配器
----------------------------------------------------------------------------------------------------------------------------------------

 ※ 介绍 (https://github.com/CymChad/BaseRecyclerViewAdapterHelper/)
     GitHub上的一个开源项目，RecycleView的Adapter框架，内部封装了很多使用的功能，也可以和其他第三方框架(刷新、加载)配合使用，非常灵活，
     使用起来可以节约我们大量的开发时间

     优势特点&功能：
       1.优化Adapter代码，和原始的adapter相比，减少70%的代码量。
       2.添加Item事件
         Item的点击事件
         Item的长按事件
         Item子控件的点击事件
         Item子控件的长按事件
       3.列表加载动画
         一行代码轻松切换5种默认动画
       4.添加头部、尾部
         一行代码搞定
       5.自动加载
         上拉加载无需监听滑动事件,可自定义加载布局，显示异常提示，自定义异常提示。同时支持下拉加载。
         一行代码搞定nfsf
       6.分组布局
         随心定义分组头部。
       7.多布局
         简单配置、无需重写额外方法。
       8.设置空布局，可以实现加载中、加载错误、数据为空的效果
         比Listview的setEmptyView还要好用。
       9.添加拖拽、滑动删除
         开启，监听即可，就是这么简单。
      10.树形列表
         比ExpandableListView还要强大，支持多级。
      11.自定义ViewHolder
         支持自定义ViewHolder，让开发者随心所欲。
      12.扩展框架
         组合第三方框架，轻松实现更多需求定制。



 ※ 使用方式repositories
     1.框架引入
       1.build.gradle(Project:allprojects:repositories) 中添加:
         maven { url "https://jitpack.io" }
       2.build.gradle(Module:dependencies)  中添加:
         compile 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.30'
	 (最新版本见：https://github.com/CymChad/BaseRecyclerViewAdapterHelper/releases

    2.项目使用
       mRecyclerView = (RecyclerView) findViewById(R.id.rv_list);
       //设置不计算宽高，不太懂
       mRecyclerView.setHasFixedSize(true);
       mRecyclerView.setLayoutManager(new LinearLayoutManager(this));
       mRecyclerView.setAdapter(adapter = new LiveListAdapter(new ArrayList<LiveInfo>()));
       //设置动画效果
       adapter.openLoadAnimation();


      // 首先需要继承BaseQuickAdapter,然后BaseQuickAdapter<Status, BaseViewHolder>
      // 第一个泛型Status是数据实体类型，第二个BaseViewHolder是ViewHolder其目的是为了支持扩展ViewHolder。
      public class HomeAdapter extends BaseQuickAdapter<HomeItem, BaseViewHolder> {
         public HomeAdapter(int layoutResId, List data) {
             super(layoutResId, data);
         }

         @Override
         protected void convert(BaseViewHolder helper, HomeItem item) {
             //获取Position
         	   int pos = holder.getLayoutPosition();
             helper.setText(R.id.text, item.getTitle());
             helper.setImageResource(R.id.icon, item.getImageResource());
             // 加载网络图片
             Glide.with(mContext).load(item.getUserAvatar()).crossFade().into((ImageView) helper.getView(R.id.iv));
             //增加子控件点击事件
             helper.addOnClickListener(R.id.tv_copy);
         }
      }



 ※ 设置值
    //设置值
    mAdapter.setNewData(data);
    //设置空值
    mAdapter.setNewData(null);
    //添加值
    mAdapter.addData(data);


 ※ 设置空白View&加载View&错误View，然后随时的显示他们
     notDataView = getLayoutInflater().inflate(R.layout.empty_view, (ViewGroup) mRecyclerView.getParent(), false);
     notDataView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                onRefresh();
            }
     });

     //第二个参数一定要加
     mQuickAdapter.setEmptyView(R.layout.loading_view, (ViewGroup) mRecyclerView.getParent());
     mQuickAdapter.setEmptyView(errorView);
     mQuickAdapter.setEmptyView(notDataView);



 ※ 添加头部和尾部
    View headerView = getHeaderView(new View.OnClickListener() {
         @Override
         public void onClick(View v) {
              headerAndFooterAdapter.addHeaderView(getHeaderView(1, getRemoveHeaderListener()), 0);
         }
    });
    recycleAdapter.addHeaderView(headerView);

    private View getHeaderView(View.OnClickListener listener) {
        View view = getLayoutInflater().inflate(R.layout.head_view, (ViewGroup) mRecyclerView.getParent(), false);
        ImageView imageView = (ImageView) view.findViewById(R.id.iv);
        imageView.setImageResource(R.mipmap.rm_icon);
        view.setOnClickListener(listener);
        return view;
    }



 ※ 添加列表加载动画效果
    默认提供5种方法（渐显 ALPHAIN、缩放 SCALEIN、从下到上 SLIDEIN_BOTTOM，从左到右 SLIDEIN_LEFT、从右到左 SLIDEIN_RIGHT）

    //开启动画(默认为关闭，默认动画效果为渐显效果)
    adapter.openLoadAnimation();

    //切换动画
    adapter.openLoadAnimation(BaseQuickAdapter.ALPHAIN);

    //自定义动画
    adapter.openLoadAnimation(new BaseAnimation() {
        @Override
        public Animator[] getAnimators(View view) {
            return new Animator[]{
               ObjectAnimator.ofFloat(view, "scaleY", 1, 1.1f, 1),
               ObjectAnimator.ofFloat(view, "scaleX", 1, 1.1f, 1)
            };
        }
    });

    //滚动列表时的动画默认只执行一次,如果想重复执行可设置
    mQuickAdapter.isFirstOnly(false);


 ※ Item子控件的点击事件
    Adapter的convert()中
    protected void convert(BaseViewHolder helper, Status item) {
       viewHolder.setText(R.id.tweetName, item.getUserName())
                .setText(R.id.tweetText, item.getText())
                .setText(R.id.tweetDate, item.getCreatedAt())
                .setVisible(R.id.tweetRT, item.isRetweet())
                .addOnClickListener(R.id.tweetAvatar)
                .addOnClickListener(R.id.tweetName);
    }

    Activity中
    adapter.setOnItemChildClickListener(new BaseQuickAdapter.OnItemChildClickListener() {
            @Override
            public void onItemChildClick(BaseQuickAdapter adapter, View view, int position) {
                String content = null;
                Status status = (Status) adapter.getItem(position);
                switch (view.getId()) {
                    case R.id.img:
                        content = "img:" + status.getUserAvatar();
                        Toast.makeText(AnimationUseActivity.this, content, Toast.LENGTH_LONG).show();
                        break;
                    case R.id.tweetName:
                        content = "name:" + status.getUserName();
                        Toast.makeText(AnimationUseActivity.this, content, Toast.LENGTH_LONG).show();
                        break;
                }
            }
    });



 ※ 分组布局
    1.实体类必须继承SectionEntity
      //两个构造器必须要写，一个对应head,一个对应content，根据需求head时长会改动
      public class MySection extends SectionEntity<Video> {
         //下面的代码必须写
         private boolean isMore;
         public MySection(boolean isHeader, String title, boolean isMroe) {
            super(isHeader, title);
            this.isMore = isMroe;
         }

         public MySection(Video t) {
            super(t);
         }

         public boolean isMore() {
            return isMore;
         }

         public void setMore(boolean mroe) {
            isMore = mroe;
         }
      }

   2.recycle的LayoutManager为
     recyclerView.setLayoutManager(new GridLayoutManager(this,2));
     recyclerView.setAdapter(adapter = new RecommendSectionAdapter(R.layout.recommend_section_title, R.layout.recommend_section_content, new ArrayList<Recommend.RoomBean>()));

   3.adapte继承BaseSectionQuickAdapter
     public class SectionAdapter extends BaseSectionQuickAdapter<MySection, BaseViewHolder> {
         public SectionAdapter(int sectionHeadResId, int layoutResId, List data) {
            super(layoutResId, sectionHeadResId, data);
         }

         @Override
         protected void convertHead(BaseViewHolder helper, final MySection item) {
            holder.setText(R.id.tv_name, roomBean.getName());
            holder.setVisible(R.id.tv_more, roomBean.isMore());

            holder.addOnClickListener(R.id.tv_more);
         }


         @Override
         protected void convert(BaseViewHolder helper, MySection item) {
            Recommend.RoomList liveInfo = (Recommend.RoomList) item.t;
            holder.setText(R.id.tv_roomtitle, liveInfo.getTitle());
            holder.setText(R.id.tv_username, liveInfo.getNick());
            holder.setText(R.id.tv_popularity, liveInfo.getView());
         }

         //4.赛值时，需要先转换
         @Override
         public void setNewData(@Nullable List<StoreResponse> data) {
            //      list.add(new MySection(true, "Section 1", true));
            //      list.add(new MySection(new Video(HTTPS_AVATARS1_GITHUBUSERCONTENT_COM_LINK, CYM_CHAD)));
            //      list.add(new MySection(new Video(HTTPS_AVATARS1_GITHUBUSERCONTENT_COM_LINK, CYM_CHAD)));
            //      list.add(new MySection(true, "Section 2", false));
            //      list.add(new MySection(new Video(HTTPS_AVATARS1_GITHUBUSERCONTENT_COM_LINK, CYM_CHAD)));
            //      list.add(new MySection(new Video(HTTPS_AVATARS1_GITHUBUSERCONTENT_COM_LINK, CYM_CHAD)));
            //      list.add(new MySection(new Video(HTTPS_AVATARS1_GITHUBUSERCONTENT_COM_LINK, CYM_CHAD)));
            List<StoreResponse> newData = new ArrayList<>();
            for (StoreResponse storeResponse: data) {
              newData.add(new StoreResponse(true, storeResponse.getTitle()));
              for (Store store : storeResponse.data) {
                newData.add(new StoreResponse(store));
              }
            }
            LogUtils.e(newData.size());
            super.setNewData(newData);
         }
     }


  注意点：
   1.实体类的两个构造函数必须写，一个对应的Head需要的值，需要什么就传入什么
     比如Head需要这些值，则head的构造器就可以写成这样
     public RoomBean(boolean isHeader, String title, String icon, String slug)


 ※ 简单的上拉刷新(这里作为简单的Demo可以，但实际开发中建议配合另外的第三方库使用)
    1.xml布局中
      <android.support.v4.widget.SwipeRefreshLayout
        android:id="@+id/swipeLayout"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:orientation="vertical"
        >

        <android.support.v7.widget.RecyclerView
            android:id="@+id/rv_list"
            android:layout_width="match_parent"
            android:layout_height="match_parent"/>
      </android.support.v4.widget.SwipeRefreshLayout>

   2.代码中
     mSwipeRefreshLayout = (SwipeRefreshLayout) findViewById(R.id.swipeLayout);
     mSwipeRefreshLayout.setColorSchemeResources(R.color.red);
     mSwipeRefreshLayout.setOnRefreshListener(this);
     mSwipeRefreshLayout.setRefreshing(true);
     onRefresh();

     @Override
     public void onRefresh() {
	....
     }



 ※ 设置显示和隐藏
   holder.setVisible(R.id.view_placeholder, true);   //显示
   holder.setGone(R.id.view_placeholder, false);     //隐藏
   holder.setVisible(R.id.view_placeholder, false);  //占位隐藏


 ※ 快捷写法
    rv.setAdapter(adapter = new BaseQuickAdapter(R.layout.item_comment, new ArrayList<PingList>()) {
            @Override
            protected void convert(BaseViewHolder helper, Object item) {

            }
    });

 ※ 参考
     中文文档 https://www.jianshu.com/p/b343fcff51b0
     GitHub https://github.com/CymChad/BaseRecyclerViewAdapterHelper

----------------------------------------------------------------------------------------------------------------------------------------
