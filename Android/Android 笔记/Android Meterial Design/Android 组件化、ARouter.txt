
本文整体介绍
 1.MVC、MVP、MVVM、组件化相对整体介绍


Android 组件化
----------------------------------------------------------------------------------------------------------------------------------

※ 介绍
   组件化就是一个App按照业务划分成不同的模块，这些模块可以独立运行，最后组合成为一个完整的App


※ 组件化的好处
   1.App的各个功能模块进行灵活拔插配置，最大程度减少移植代码出错的可能性，保证功能模块的完整移植
   2.可以实现项目解耦，业务清晰，新人容易上手，增加后期开发效率及减少维护成本
   3.组件是相互独立的，团队开发中，可以各自维护，减少团队间的沟通成本


※ 组件化与模块化
  组件化是可以独立运行的App，模块化是按照业务划分出不同的模块。两个都是解耦，但是组件化相比模块化粒度更小，两者的本质思想是一样的，
  都是从大往小的方向拆分，都是为了复用和解耦。只不过，模块化更侧重于业务功能的划分，便于复用，组件化则更加侧重于单一功能的内聚，偏向于解耦


※ 组件化的实现
  1.gradle.properties 文件 声名属性
    isNeedHomeModule = true
    isNeedOtherModule = true
    isNeedStoreModule = true

  2.各个moudel的build.gradle修改如下代码
    if (isNeedHomeModule.toBoolean()) {
        apply plugin: 'com.android.library'
    } else {
        apply plugin: 'com.android.application'
    }

    defaultConfig {
      if (!isNeedHomeModule.toBoolean()) {
          applicationId "com.demo.lizejun.module.home"
      }
    }

    sourceSets {
        main {
            if (!isNeedHomeModule.toBoolean()) {
                manifest.srcFile 'src/debug/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                java {
                    exclude '**/debug/**'
                }
            }
        }
    }


   3.AndroidManifest文件
     debug：
     <?xml version="1.0" encoding="utf-8"?>
     <manifest xmlns:android="http://schemas.android.com/apk/res/android"
        package="com.demo.lizejun.module.home">

      <application
        android:allowBackup="true"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/Theme.AppCompat">
        <activity android:name="com.lizejun.demo.module.home.HomeActivity">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity android:name="com.lizejun.demo.module.home.ResultClientActivity"/>
      </application>

    </manifest>


    main：
    <?xml version="1.0" encoding="utf-8"?>
    <manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.demo.lizejun.module.home">

      <application
        android:allowBackup="true"
        android:label="@string/app_name"
        android:supportsRtl="true">
        <activity android:name="com.lizejun.demo.module.home.ResultClientActivity"/>
      </application>

    </manifest>


※ 组件化过程中遇到的问题
  1.组件化时library的flavorDimensions写法
    https://blog.csdn.net/spyunknow/article/details/90210508
  2.组件化时Butterknife的写法
    https://yq.aliyun.com/articles/663982
    //解决组件化时的library不能使用butterknife问题
    classpath 'com.jakewharton:butterknife-gradle-plugin:9.0.0-rc2'


※ 参考
  https://www.jianshu.com/p/8b6e6a50e21e
  https://juejin.im/post/5cd179e3f265da039b08850a
  https://juejin.im/post/5c46e6fb6fb9a049a5713bcc
  https://juejin.im/post/5c2d8fe46fb9a049c30b5d4b

  Demo：https://github.com/imZeJun/ArouterDemo

----------------------------------------------------------------------------------------------------------------------------------



Android 路由 ARouter
----------------------------------------------------------------------------------------------------------------------------------

※ 介绍
   ARouter是阿里推出的一个路由框架，是为了解决组件化道路上的App跳转问题，支持模块间的路由、通信、解耦


※ 配置环境
   android {
    defaultConfig {
        ...
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName : project.getName()]
            }
        }
    }
  }

  dependencies {
    //ARouter路由 https://github.com/alibaba/ARouter/blob/master/README_CN.md
    compile 'com.alibaba:arouter-api:1.5.0’
    annotationProcessor 'com.alibaba:arouter-compiler:1.2.2’
  }



※ 初始化
   public class App extends Application {

     @Override
     public void onCreate() {
        super.onCreate();

        if (isDebug()) {         // 这两行必须写在init之前，否则这些配置在init过程中将无效
           ARouter.openLog();
           ARouter.openDebug();   // 开启调试模式(如果在InstantRun模式下运行，必须开启调试模式！线上版本需要关闭,否则有安全风险)
        }
        ARouter.init(mApplication); // 尽可能早，推荐在Application中初始化
     }

     @Override
     public void onTerminate() {
        super.onTerminate();
        //释放ARouter
        ARouter.getInstance().destroy();
     }

   }



※ ARouter基本使用
   1.在Activity/Fragment类上面写上 Route path 注解(注：路径至少需要有两级 /xx/xx)
     @Route(path = “/app/MainActivity”)
     Public class MainActivity extends BaseActivity{
         …..
     }

   2.跳转页面
     ARouter.getInstance().build(“/app/MainActivity”).navigation(); //就可以完成跳转



※ ARouter带参数的跳转
  ARouter.getInstance().build("/test/1")
         .withLong("key1", 666L)
         .withString("key3", "888")
         .withSerializable("ser", testSerializable)
         .withParcelable("pac", testParcelable)
         .withObject("obj", testObj)
         .withObject("objList", objList)
         .withObject("map", map)
         .navigation();

  @Route(path = "/test/1")
  public class YourActivity extend Activity {

    //有三种方式获取数据
    //1.通过Autowired注解 & 将key1作为属性的名称
    @Autowired
    public long key1;

    //2.通过Autowired注解表明key
    @Autowired(name = "key1")
    public long data;

    //3.通过Bundle获取
    getIntent().getExtras().getLong("key1")

    @Autowired
    TestSerializable ser;

    @Autowired
    TestParcelable pac;

    @Autowired
    TestObj obj;

    @Autowired
    List<TestObj> objList;

    @Autowired
    Map<String, List<TestObj>> map;

    @Override
    public void onCreate() {
        super.onCreate();
        //注：如果使用1、2种方式则需要加上这个方法
        ARouter.getInstance().inject(this);
    }

  }

  注：如果获取参数则需要加 ARouter.getInstance().inject(this)



※ ARouter获取fragment实例
  //目标界面
  @Route(path = "/app/fragment")
  public class EmptyFragment extends BaseFragment {
  }

  //启动界面
  Fragment fragment= (Fragment) ARouter.getInstance().build("/app/fragment").navigation();
  FragmentManager manager = getSupportFragmentManager();
  FragmentTransaction transaction = manager.beginTransaction();
  transaction.add(R.id.fl_fragment_content, fragment);
  transaction.commit();



※ ARouter转场动画

  //跳往目标界面(只会启动动画有效果)
  ARouter.getInstance().build(RouterUrl.ACTIVITY_URL_LOGIN)
        .withTransition(R.anim.dialog_bottom_in, R.anim.dialog_bottom_out)
        .navigation(MainActivity.this);
  注意：此时的写法有些区别，要传入Context进去，但是出场动画不会生效，所以建议在设置出场动画是，在目标页添加如下出场动画

  //在目标页设置关闭动画
  @Override
  public void finish() {
     super.finish();
     overridePendingTransition(R.anim.anim_none, R.anim.dialog_bottom_out);
  }


※ ARouter界面跳转回调
  //启动界面
  ARouter.getInstance().build("/app/login").navigation(MainActivity.this, 111);

  @Override
  protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
     super.onActivityResult(requestCode, resultCode, data);
     if (requestCode == 111) {
            LogUtils.e(data.getStringExtra("data"));
     }
  }

  //目标界面
  Intent intent = new Intent();
  intent.putExtra("data", "resultData");
  setResult(RESULT_CODE, intent);
  finish();


※ ARouter拦截器
  ARouter拦截器，对跳转的路由进行统一的控制，这就非常适合我们实现不同角色权限对应的不同展示效果，而且后期维护起来也比较方便，不会在各个界面中产生大量跳转逻辑。

  我们先来定义两个拦截器：
  @Interceptor(priority = 1)
  public class FirstRouterInterceptor implements IInterceptor {
    @Override
    public void init(Context context) {
        LogUtils.e("first init");
    }

    @Override
    public void process(Postcard postcard, InterceptorCallback callback) {
        LogUtils.e("first process start");
        callback.onContinue(postcard);
        LogUtils.e("first process end");
    }
  }
  //-------------------------------------------------------------------------
  @Interceptor(priority = 2)
  public class SecondRouterInterceptor implements IInterceptor {
    @Override
    public void init(Context context) {
        LogUtils.e("second init");
    }

    @Override
    public void process(Postcard postcard, InterceptorCallback callback) {
        LogUtils.e("second process start");
        callback.onContinue(postcard);
        LogUtils.e("second process end");
    }
  }

  可以在跳转逻辑中添加回调，方便我们控制跳转逻辑：
  ARouter.getInstance().build("/app/login")
                        .navigation(mContext, new NavigationCallback() {
                    @Override
                    public void onFound(Postcard postcard) {
                        LogUtils.e("", postcard.getGroup(), postcard.getPath(), "onFound");
                    }

                    @Override
                    public void onLost(Postcard postcard) {
                        LogUtils.e("", postcard.getGroup(), postcard.getPath(), "onLost");
                    }

                    @Override
                    public void onArrival(Postcard postcard) {
                        LogUtils.e("", postcard.getGroup(), postcard.getPath(), "onArrival");
                    }

                    @Override
                    public void onInterrupt(Postcard postcard) {
                        LogUtils.e("", postcard.getGroup(), postcard.getPath(), "onInterrupt");
                    }
                });

  打印结果：
  first init
  second init
  onFound
  first process start
  second process start
  second process end
  first process end
  onArrival

  可以看到 priority 属性，值越小，优先级越高，并且需要注意，该属性的值不能设置为相同的，否则编译时会直接报错。
  整个流程我们会按照优先级先初始化两个拦截器，当我们的路由被发现时，拦截器按照优先级开始进行拦截，若都通过，最后到达我们指定的界面。现在我们来模拟一下两个拦截器分别进行拦截的打印效果，我们可以通过把SecondRouterInterceptor的callback.onContinue(postcard); 改为callback.onInterrupt(new Throwable()); 来进行拦截，我们先看下SecondRouterInterceptor被拦截的效果：

  打印结果：
  first init
  second init
  onFound
  first process start
  second process start
  second process end
  first process end
  onInterrupt

  这时界面已经无法成功跳转，回调触发了onInterrupt方法。并且，即使SecondRouterInterceptor进行了拦截，拦截之后，依旧会回到FirstRouterInterceptor拦截器中执行剩下的代码，并非直接阻断。
  现在将FirstRouterInterceptor的callback.onContinue(postcard); 改为callback.onInterrupt(new Throwable());

  打印结果：
  first init
  second init
  onFound
  first process start
  first process end
  onInterrupt

  页面依旧无法进行跳转，并且不会再触发SecondRouterInterceptor拦截器。




※ 参考
    ARouter教程 https://www.jianshu.com/p/c57214448c7f
    ARouter教程  https://www.jianshu.com/p/6021f3f61fa6
    官方Demo及教程：https://github.com/alibaba/ARouter/blob/master/README_CN.md


----------------------------------------------------------------------------------------------------------------------------------