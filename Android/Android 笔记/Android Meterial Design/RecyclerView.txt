
RecyclerView
----------------------------------------------------------------------------------------------------------------------------------------

 ※ 介绍
    RecyclerView是V7包下的控件, 他可以用来代替ListView使用，RecyclerView可以实现listview、gridview、瀑布流的效果，
    还可以多种不同的分割线 及 多种Item增加/移除的动画效果

    通过布局管理器LayoutManager，可以实现listview、gridview、瀑布流的效果
    通过ItemDecoration，可以实现多种不同的Item间隔（可绘制）
    通过ItemAnimator，可以实现多种Item增删的动画
    但Item点击、长按事件需要自己写



 ※ 基本使用, 实现ListView效果
    1.在build.gradle中加
      compile 'com.android.support:recyclerview-v7:23.4.0'

    2.代码中的写法
    RecyclerView mRecyclerView =  (RecyclerView) findViewById(R.id.id_recyclerview);
    //设置布局管理器
    mRecyclerView.setLayoutManager(new LinearLayoutManager(this));
    //设置adapter
    mRecyclerView.setAdapter(mAdapter = new HomeAdapter());
    //设置Item增加、移除动画
    mRecyclerView.setItemAnimator(new DefaultItemAnimator());
    //添加分割线
    mRecyclerView.addItemDecoration(new DividerItemDecoration(getActivity(), DividerItemDecoration.HORIZONTAL_LIST));


    //Adapter的写法 需要继承并重写3个方法
    public class HomeAdapter extends RecyclerView.Adapter<HomeAdapter.MyViewHolder>{
       private Context mContext;
       private List<Integer> mDatas;

	public HomeAdapter(Context context, List<Integer> datas) {
	   super();
	   this.mContext = context;
	   this.mDatas = datas;
	}


	//创建自定义Holder,并返回
        @Override
        public MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType){
            View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_home, parent, false);
            return new MyViewHolder(view);
        }

	//给View赋值
        @Override
        public void onBindViewHolder(MyViewHolder holder, int position){
            holder.tv.setText(mDatas.get(position));
        }

        //返回条目数
        @Override
        public int getItemCount(){
            return mDatas.size();
        }

	//自定义Holder类,并通过findViewById绑定控件
        class MyViewHolder extends RecyclerView.ViewHolder{

            TextView tv;
            public MyViewHolder(View view){
                super(view);
		tv=(TextView) view.findViewById(R.id. tv_item);
            }
        }
    }



 ※ 布局管理器
    1.LinearLayoutManager 线性管理器,支持横向/纵向
      纵向: recyclerView.setLayoutManager(new LinearLayoutManager(this));
      横向: recyclerView.setLayoutManager(new LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false));

    2.GridLayoutManager  网格布局管理器,支持横向/纵向
      recyclerView.setLayoutManager(new GridLayoutManager(this,4)); //代表每行4个

    3.StaggeredGridLayoutManager 瀑布流布局管理器
      //传入VERTICAL 代表有多少列   传入HORIZONTAL 代表有多少列
      recyclerView.setLayoutManager(new StaggeredGridLayoutManager(2,StaggeredGridLayoutManager.VERTICAL));
      //然后在适配器的onBindViewHolder方法中为item设置高度就可以了
      LayoutParams lp = holder.tv.getLayoutParams();
      lp.height = ...;
      holder.tv.setLayoutParams(lp);

    设置不同的布局管理器就可以轻轻松松实现多种不同的效果



 ※ 分割线
    //RecycleView默认每页分割线，可以通过此方法添加分割线，官方没有提供默认的实现类，具体实现需要我们去写或者网上找
    recyclerView.addItemDecoration(new DividerItemDecoration(this,DividerItemDecoration.VERTICAL_LIST));

    //设置GridLayoutManager间隔
    rv.addItemDecoration(new RecyclerSpace((int) getResources().getDimension(R.dimen.dp1)));

    注意点：
    不同布局管理器的ItemDecoration写法和原理有些不一样，不能通用


 ※ 设置边界渐变效果
   rv.setVerticalFadingEdgeEnabled(true);
   rv.setFadingEdgeLength(40);


 ※ Item的添加/删除动画
    //通过此方法添加/删除动画，官方提供了一个默认的动画效果，
    //网上有很多已经写好的项目见:https://github.com/gabrielemariotti/RecyclerViewItemAnimators
    recyclerView.setItemAnimator(new DefaultItemAnimator());


 ※ 给RecyclerView添加点击事件
    RecyclerView没有提供ClickListener和LongClickListener。可以通过接口回调实现


 ※ 去掉边界阴影
    android:overScrollMode="never"


 ※ ScrollView嵌套RecyclerView RecyclerView显示全部数据 且只有ScrollView滑动
    1.在你的RecyclerView上再嵌套一层RelativeLayout然后添加属性 android:descendantFocusability="blocksDescendants"
    2.在java代码中设置recyclerView.setNestedScrollingEnabled(false);


 ※ RecyclerView+ScrollView+fragment自动滑动到底部的问题
    1.设置scrollview 获取焦点
      scrollView.setFocusable(true);
      scrollView.setFocusableInTouchMode(true);
      ScrollView.requestFocus();
    2.使Recycleview不获取焦点
      recyclerView.setFocusable(false);


 ※ RecyclerView从底部往上加载
   1.初始化
     rv_ = findViewById(R.id.rv_);
     LinearLayoutManager layoutManager = new LinearLayoutManager(this);
     layoutManager.setReverseLayout(true);
     layoutManager.setStackFromEnd(true);
     rv_.setLayoutManager(layoutManager);
     rv_.setAdapter(adapter = new SimpleAdapter(this, datas));
     rv_.scrollToPosition(0);

   2.数据的插入
      datas.add(0, "测测测 "+(i=i+1));
      LinearLayoutManager layoutManager = (LinearLayoutManager) rv_.getLayoutManager();
      int firstVisibleItemPosition = layoutManager.findFirstVisibleItemPosition();
      if (firstVisibleItemPosition == 0 || firstVisibleItemPosition == RecyclerView.NO_POSITION){
            Log.e("111", "此时RecyclerView滑动到最底部");
            adapter.notifyItemInserted(0);
            rv_.scrollToPosition(0);
      }else {
            Log.e("111", "此时RecyclerView没有滑动到底部 可以做未读消息提醒");
            adapter.notifyItemInserted(0);
      }

    3.如果是更新某条数据 则是这样写
      datas.remove(4);
      datas.add(4,"545454545");
      adapter.notifyItemChanged(4);


 ※ RecyclerView优化及技巧
    1.setHasFixedSize(true)
      设置此属性可以让RecyclerView避免重新绘制
      当我们改变Item时确定不会影响RecyclerView的宽高的时候可以设置setHasFixedSize(true)，并通过Adapter的增删改插方法去刷新RecyclerView，
      而不是通过notifyDataSetChanged()。（其实可以直接设置为true，当需要改变宽高的时候就用notifyDataSetChanged()去整体刷新一下）
      当不是瀑布流时，设置这个可以避免重复的增删造成而外的浪费资源


 ※ GridLayoutManager 让其宽高相等
   1.Adapter传入LayoutManager
     public GridImageAdapter(Context context, GridLayoutManager gridLayoutManager) {
        this.context = context;
        mInflater = LayoutInflater.from(context);
        this.gridLayoutManager = gridLayoutManager;
     }

   2.计算改变高度
     @Override
     public void onBindViewHolder(final ViewHolder viewHolder, final int position) {
        ViewGroup.LayoutParams parm = viewHolder.rl.getLayoutParams(); //获取button背景的LayoutParams实例
        parm.height = gridLayoutManager.getWidth()/gridLayoutManager.getSpanCount() - viewHolder.rl.getPaddingLeft();
        ....
     }


 ※ 设置GridLayoutManager之间的间隙
    rv.addItemDecoration(new RecyclerSpace(DeviceUtils.dp2px(getActivity(), 5)));



 ※ 设置RecycleView逐渐显示
    在Adapter中加入以下代码
    private int mLastPosition = -1;
    private boolean mOpenAnimationEnable = true;

    @Override
    public void onViewAttachedToWindow(BaseViewHolder holder) {
        super.onViewAttachedToWindow(holder);
        addAnimate(holder, holder.getLayoutPosition());
    }

    private void addAnimate(BaseViewHolder holder, int postion) {
        if (mOpenAnimationEnable && mLastPosition < postion) {
            holder.itemView.setAlpha(0);
            holder.itemView.animate().alpha(1).start();
            mLastPosition = postion;
        }
    }


 ※ 下拉刷新、上拉加载逻辑
     1.基本值：
       int page = 0;
       int pageSize = 5; //每页加载个数

     2.监听
        public void onRefresh(@NonNull RefreshLayout refreshLayout) {
                page = 0;
                doSearchApi(true)
        }

        public void onLoadMore(@NonNull RefreshLayout refreshLayout) {
                page = page+1;
                doSearchApi(false);
        }
     3.接口调用
       public void doSearchApi(boolean isRefresh){
        Api_Circle.ins().search(page,pageSize, new JsonCallback<List<Circle>>() {
            @Override
            public void onSuccess(int code, String msg, List<Circle> data) {
                if(data!=null) LogUtils.e(code+","+msg+","+data);
                if (code==200) {
                    if(isRefresh){
                        refreshLayout.finishRefresh();
                        refreshLayout.setEnableLoadMore(true);
                        circleAdapter.setNewData(data);
                        circleAdapter.notifyDataSetChanged();
                    }else {
                        refreshLayout.finishLoadMore();
                        if(data.size()<pageSize){
                            //如果没有更多的数据 则隐藏加载更多功能
                            refreshLayout.setEnableLoadMore(false);
                        }
                        List<Circle> list = circleAdapter.getData();
                        circleAdapter.addData(data);
                        circleAdapter.notifyItemRangeInserted(list.size(), data.size());
                    }

                } else {
                    ToastUtils.showShort(msg);
                }
            }
        });
      }



 ※ 参考
    http://blog.csdn.net/lmj623565791/article/details/45059587
    https://www.jianshu.com/p/58ca20e1a5d6
    http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/0307/4032.html


----------------------------------------------------------------------------------------------------------------------------------------

