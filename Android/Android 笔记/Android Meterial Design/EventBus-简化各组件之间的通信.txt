

EventBus 简化各组件之间的通信
----------------------------------------------------------------------------------------------------------------------------------

※ 介绍
   EventBus能够实现类似广播那样的全局通信，他比广播的写法简单，可以做到Android组件之间的解藕，
   优点是开销小，代码更优雅
   Github: https://github.com/greenrobot/EventBus

   能简化的事情：
   1.Broadcast、startForResult、模块与后台线程进行通信时，进行组建之间的通信
   2.子线程中进行请求数据，当数据请求完毕后通过Handler或者是广播通知UI
   3.两个Fragment之间通过Listener进行通信等等



※ 使用
    1.Modle's build.gradle 添加：
      compile 'org.greenrobot:eventbus:3.0.0'

    2.定义消息事件类
      public class MessageEvent{
        private String message;
        public  MessageEvent(String message){
           this.message=message;
        }

        public String getMessage() {
           return message;
        }

        public void setMessage(String message) {
           this.message = message;
        }
      }

    3.注册和解除注册
     分别在Activity的onCreate()方法和onDestory()方法里，进行注册EventBus和解除注册。
     EventBus.getDefault().register(this);
     if(EventBus.getDefault().isRegistered(this)) {
            EventBus.getDefault().unregister(this);
     }


    4.发送事件
      EventBus.getDefault().post(messageEvent);

    5.处理事件
      @Subscribe(threadMode = ThreadMode.MAIN)
      public void onEvent(MessageEvent messageEvent) {
         ...
      }


※ EventBus的四种ThreadMode（线程模型）
   1.POSTING（默认）：
     发布事件和接收事件在同一个线程。在POSTING事件中尽量避免执行耗时操作，因为它会阻塞事件的传递，甚至有可能会引起ANR。

   2.MAIN:
     事件的处理会在UI线程中执行。事件处理时间不能太长，长了会ANR的。

   3.BACKGROUND:
     如果事件是从UI线程中发出来的，那么该事件处理函数就会在新的线程中运行，
     如果事件是从子线程中发出来的，那么该事件处理函数直接在发布事件的线程中执行。
     在此事件处理函数中禁止进行UI更新操作。

   4.ASYNC：
     无论事件在哪个线程发布，该事件处理函数都会在新建的子线程中执行
     同样，此事件处理函数中禁止进行UI更新操作。


※ EventBus3.0粘性事件
   除了上面讲的普通事件外，EventBus还支持发送黏性事件，就是在发送事件之后再订阅该事件也能收到该事件，跟黏性广播类似。为了验证粘性事件我们修改以前的代码：
   1.订阅粘性事件
     在MainActivity中我们将注册事件添加到button的点击事件中：
     bt_subscription.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //注册事件
                EventBus.getDefault().register(MainActivity.this);
            }
     });

   2.定义消息事件类
     在MainActivity中新写一个方法用来处理粘性事件：
     @Subscribe(threadMode = ThreadMode.Main，sticky = true)
     public void onStickyEvent(MessageEvent messageEvent){
        tv_message.setText(messageEvent.getMessage());
     }

   3.发送黏性事件
     在SecondActivity中我们定义一个Button来发送粘性事件：
     bt_subscription.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                EventBus.getDefault().postSticky(new MessageEvent("粘性事件"));
                finish();
            }
     });




※ 学习：
   https://blog.csdn.net/itachi85/article/details/52205464


※ Demo位置：/Demo/EventBus-简化各组件之间的通信.zip



----------------------------------------------------------------------------------------------------------------------------------
