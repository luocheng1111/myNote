


Handler
----------------------------------------------------------------------------------------------------------------------------------------

 ※ 介绍
    主要接受子线程发送的数据， 并用此数据配合主线程更新UI
    Android不允许子线程操作UI，违背了Android单线程模型的原则（即 Android UI操作并不是线程安全的并且这些操作必须在UI线程中执行），
    而我们很多耗时的操作是在子线程中运行的，当运行后要进行UI操作时，就需要通过Handler消息机制来实现主线程中UI的更新


 ※ Handler的使用

    //Handler接收数据
    Handler mHandler = new Handler() {   
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            switch (msg.what) {
                case 0:
                    //完成主界面更新,拿到数据
                    String data = (String) msg.obj;
                    textView.setText(data);
                    break;
                default:
                    break;
            }
        }
    };

    //子线程发消息，通知Handler完成UI更新
    private void getDataFromNet() {
        new Thread(new Runnable() {

            @Override
            public void run() {
                //耗时操作，完成之后发送消息给Handler，完成UI更新；
                mHandler.sendEmptyMessage(0);

                //需要数据传递，用下面方法；
                Message msg = new Message();
                msg.obj = "网络数据";//可以是基本类型，可以是对象，可以是List、map等；
                mHandler.sendMessage(msg);
            }

        }).start();
    }



 ※ Handler的注意点
   1.Runnable实际上不是开了一个线程，所以不建议开启耗时的操作
   2.handler.sendEmptyMessageDelayed("100",1000),然后在Handler继续发送sendEmptyMessageDelayed
     可以实现倒计时的效果，但不建议这样做，因为会与延时，原因你在Handler的message中做一些操作，必定会耗时，
     然后在sendEmptyMessageDelayed("100",1000)，这实际上会比1000多一些，久而久之，时间不不准确
     如果要用此方法，建议把sendEmptyMessageDelayed("100",1000)放在第一行，但还是建议开启线程操作
     class myThread extends Thread{

        @Override
        public void run() {
            while(isStartPKCountdown){
                try {
                    Thread.sleep(1000);//休息一秒
                } catch (InterruptedException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
                pkCountdownHandler.sendEmptyMessage(100);
            }
        }
    }

     Handler pkCountdownHandler = new Handler() {
        @Override
        public void handleMessage(android.os.Message msg) {
          ....
        }
     }

    //调用
    new myThread().start();


 ※ Handler取消延迟消息
   eg：
    //发送一个延迟消息
    roomUserPay60sHandler.sendEmptyMessageDelayed(1, 5*1000);
    //取消此延迟消息
    roomUserPay60sHandler.removeMessages(1);


 ※ Handler的使用
    Handler有两种使用方式:
    1.发送消息：
      sendEmptyMessage(int);//发送一个空的消息
      sendMessage(Message);//发送消息，消息中可以携带参数
      sendMessageAtTime(Message, long);//未来某一时间点发送消息
      sendMessageDelayed(Message, long);//延时发送消息

    2.发送线程：
      post(Runnable);//提交计划任务马上执行
      postAtTime(Runnable, long);//提交计划任务在未来的时间点执行
      postDelayed(Runnable, long);//提交计划任务延时Nms执行


 ※ Handler的扩展使用
    为了更加方便的使用Handler消息机制，Android也提供了几种扩展方式，内部实现都是基于Handler消息机制
    1). Activity.runOnUiThread(Runnable) 更新UI
        ...
        new Thread(new Runnable() {
            @Override
            public void run() {
                //耗时操作，完成之后提交任务更新UI
                final String data = "网络数据";
                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        textView.setText(data);
                    }
                });
            }
        }).start();

    2).View.post(Runnable) 更新UI
        ...
        new Thread(new Runnable() {
            @Override
            public void run() {
                //耗时操作，完成之后提交任务更新UI
                final String data = "网络数据";
                textView.post(new Runnable() {
                    @Override
                    public void run() {
                        textView.setText(data);
                    }
                });
            }
        }).start();


 ※ Handler机制
     1.Handler通过sendMessage()发送消息Message到消息队列MessageQueue.
     2.Looper通过loop()不断提取触发条件的Messager，并将Message交给对应的target handle来处理
     3.target handler调用自身的handlerMessager()方法来处理Message

     Handler： 消息处理器，用于消息的发送并处理
     Message： 消息，Message是在线程之间传递的信息，它可以在内部携带少量的信息，用于在不同线程件交换数据
     MessageQueue： 消息队列，用于存放Hander发送的消息，等待Looper的抽取
     Looper：  消息泵，不断地从MessageQueue中抽取Message执行。因此，一个MessageQueue需要一个Looper。


 ※ HandlerThread机制
     HandlerThread是一个线程类，它继承了Thread。但与Thread不同的是，它有自己的内部Looper对象，
     这样做的好处是，比如我每秒都要执行一个耗时任务，做完后更新UI，共10秒钟，
     如果在代码中，则每秒都要开启一个线程，来执行耗时任务，并通过Handler来更新UI，这样频繁多次的创建和销毁线程，就会影响性能
     而使用HandlerThread就可以来解决这类问题。比如IntentService就用到了HandlerThread


 ※ 参考
    http://www.cnblogs.com/whoislcj/p/5590615.html


----------------------------------------------------------------------------------------------------------------------------------------



AsyncTask
------------------------------------------------------------------------------------------------------------------------------------

 ※ 介绍
    AsyncTask是Android1.5出现的工具类，它对Thread和Handler进行了封装，不需要编写Thread和Handler实例即可完成相同的任务
    使得创建异步任务变得更加简单，我们可以更方便/更优雅的在子线程中更新UI元素


 ※ AsyncTask的使用

    //调用
    new DownloadTask().execute(url);


    //AsyncTask参数: Params泛型是String类型，Progress泛型是Integer类型，Result泛型是String类型
    private class DownloadTask extends AsyncTask<String, Integer, String> {

        @Override
        protected void onPreExecute() {
	   //onPreExecute方法用于在执行后台任务前做一些UI操作
           ....
        }

        @Override
        protected String doInBackground(String... params) {
	   //doInBackground方法用于执行后台任务,通常执行一些耗时操作,比如网络请求,文件下载,不可在此方法内修改UI
           ....
	   return new String(baos.toByteArray(), "utf-8");
        }

        @Override
        protected void onProgressUpdate(Integer... progresses) {
	    //onProgressUpdate方法用于更新进度信息
            progressBar.setProgress(progresses[0]);
        }

        @Override
        protected void onPostExecute(String result) {
	    //onPostExecute方法用于在执行完后台任务后更新UI,显示结果
	    textView.setText(result);
            ....
        }

        @Override
        protected void onCancelled() {
	    //onCancelled方法用于在取消执行中的任务时更改UI
            ....
        }
    }


 ※ AsyncTask类详细介绍

    AsyncTask是一个抽象类，我们继承它时要指定三个泛型参数：
     Params   启动任务执行参数的数据类型，比如Http请求的URL。
     Progress 后台任务执行百分比的数据类型，一般为Integer
     Result   执行任务后返回结果的数据类型。比如String

    AsyncTask类中的一些方法
     onPostExecute(Result)       在new AsyncTask().execute(Params... params)调用后立即执行，用于在执行后台任务前做一些UI操作
     doInBackground(Params…)     用于执行后台任务，通常执行一些耗时操作,比如网络请求,文件下载,不可在此方法内修改UI，可以调用publishProgress(Progress... values)来更新进度信息。
     onProgressUpdate(Progress…) 当调用publishProgress(Progress...)方法后，这个方法就会被调用,用于更新进度信息
     onPreExecute()              后台操作结束时，此方法将会被调用，计算结果将做为参数传递到此方法中
     onCancelled()               当用户取消调用时，要做的操作



 ※ 使用AsyncTask类，以下是几条需要注意
     1.Task的实例必须在UI thread中创建
     2.execute方法必须在UI thread中调用
     3.不要手动的调用onPreExecute(), onPostExecute(Result)，doInBackground(Params...), onProgressUpdate(Progress...)这几个方法；
     4.该task只能被执行一次，否则多次调用时将会出现异常



 ※ 参考
    https://www.cnblogs.com/devinzhang/archive/2012/02/13/2350070.html
    http://blog.csdn.net/guolin_blog/article/details/11711405


------------------------------------------------------------------------------------------------------------------------------------


