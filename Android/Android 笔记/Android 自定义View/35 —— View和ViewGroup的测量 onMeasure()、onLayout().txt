

onMeasure()
 1.什么情况下用到测量，为什么需要测量？
 2.测量的3种模式
 3.如何获取宽高
 4.绘制一张带padding的图片，在LinearLayout下面
 5.ViewGroup的方法介绍，模拟一个LinearLayout，带padding和margin
 6.onMeasure、onLayout、onDraw介绍


View onMeasure()测量
----------------------------------------------------------------------------------------------------------------------------------------

 ※ Android什么情况下会用到测量？为什么需要测量？
    自定义控件时，系统根本就不清楚你里面绘制的是什么，所以不管你宽高设置为wrap_content或match_parent时，一般最终显示为全屏
    所以这个时候就需要你自己去写测了方法了
    但view的最终测量尺寸是由view本身何其父容器共同决定的，父控件会给3中模式，然后根据这3种模式来计算最终的尺寸
    MeasureSpec.UNSPECIFIED(未指定), 表示子布局想要多大就多大，父布局不做限制，一般出现在AadapterView的item的heightMode中、ScrollView的childView的heightMode中；此种模式比较少见。
    MeasureSpec.EXACTLY(完全(指定)), 表示子布局多大，父布局心里有数，最终的值按照父布局给的来，一般当childView设置其宽、高为精确值、match_parent时，ViewGroup会将其设置为EXACTLY；
    MeasureSpec.AT_MOST(至多(指定)), 表示子布局被限制在一个最大值内，不能超过这个值，一般当childView设置其宽、高为wrap_content时，ViewGroup会将其设置为AT_MOST；


 ※ 获取宽高( protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) )
     int specSize = MeasureSpec.getSize(measureSpec); //获取大小，但这个不是最终的大小，要配合计算模式计算真实大小
     int specMode = MeasureSpec.getMode(measureSpec); //获取计算模式，详情见下


 ※ 代码（注：计算时要加上padding值，但margin值不用管，margin值又父布局计算管控）

    //自定义View View的测量 绘制一张图片
    public class ImgView extends View {

      Bitmap bitmap;

      public ImgView(Context context, @Nullable AttributeSet attrs) {
          super(context, attrs);
          bitmap = BitmapFactory.decodeResource(getResources(), R.mipmap.lovestory);
      }

      private enum Ratio {
          WIDTH, HEIGHT
      }

      @Override
      protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
          LogUtils.e("onMeasure");
          setMeasuredDimension(getMeasureSize(widthMeasureSpec, Ratio.WIDTH), getMeasureSize(heightMeasureSpec, Ratio.HEIGHT));
      }

      /**
       * 获取测量后的尺寸
       */
      private int getMeasureSize(int measureSpec, Ratio ratio) {
          LogUtils.e("getMeasureSize");
          int result = 0;

          int size = MeasureSpec.getSize(measureSpec);
          int mode = MeasureSpec.getMode(measureSpec);

          switch (mode){
              case MeasureSpec.UNSPECIFIED://未指定，子布局想要多大就多大
                  if(ratio==Ratio.WIDTH){
                      result = bitmap.getWidth()+getPaddingLeft()+getPaddingRight();
                  }else {
                      result = bitmap.getHeight()+getPaddingTop()+getPaddingBottom();
                  }
                  break;
              case MeasureSpec.EXACTLY: //父布局已指定
                  result = size;
                  break;
              case MeasureSpec.AT_MOST: //最大不能超过父布局
                  if(ratio==Ratio.WIDTH){
                      result = Math.min(size, bitmap.getWidth()+getPaddingLeft()+getPaddingRight());
                  }else {
                      result = Math.min(size, bitmap.getHeight()+getPaddingTop()+getPaddingBottom());
                  }
                  break;
          }

          return result;
      }


      @Override
      protected void onDraw(Canvas canvas) {
          super.onDraw(canvas);
          canvas.drawBitmap(bitmap, getPaddingLeft(), getPaddingTop(), null);
      }
  }


 ◆ onMeasure和onDraw的关系
   onMeasure控制整个View的大小
   onDraw负责绘制控件在布局里的具体位置


 ◆ 牛人笔记
     http://blog.csdn.net/aigestudio/article/details/42989325
     http://blog.csdn.net/yuliyige/article/details/12656751 Android的onMeasure和onLayout And MeasureSpec揭秘
     http://blog.csdn.net/ethan_xue/article/details/7401163

----------------------------------------------------------------------------------------------------------------------------------------


ViewGroup onMeasure()测量
----------------------------------------------------------------------------------------------------------------------------------------
 ◆ 牛人笔记

 ※ ViewGroup中与测量过程
     measureChildren() -> measureChild() -> getChildMeasureSpec() -> child.measure()

     measureChildren(int widthMeasureSpec, int heightMeasureSpec)：
      通过父容器传入的widthMeasureSpec和heightMeasureSpec遍历子元素并调用measureChild()方法去测量每一个子元素的宽高

     measureChild(View child, int parentWidthMeasureSpec, int parentHeightMeasureSpec)：
      通过int childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec, mPaddingLeft + mPaddingRight, lp.width)方法
      获得childWidthMeasureSpec和childHeightMeasureSpec,然后在调用child.measure(childWidthMeasureSpce, childHeightMeasureSpce);

     getChildMeasureSpec(parentWidthMeasureSpec, mPaddingLeft + mPaddingRight, lp.width)
      通过父类的mode和size以及子类的大小计算得出子类的大小和mode
      再通过MeasureSpec.makeMeasureSpec(resultSize, resultMode)返回测量规格

     child.measure(childWidthMeasureSpec, childHeightMeasureSpec);
      测量子控件

     measureChildWithMargins()加入了对Margins外边距的处理

 ※ ViewGroup的基本写法
    略

 ※ VieGroup添加padding的写法

 ※ VieGroup子元素添加margin的写法

----------------------------------------------------------------------------------------------------------------------------------------

onLayout()
----------------------------------------------------------------------------------------------------------------------------------------
 ※ 介绍
    设置View的大小和位置
    为了确定子元素在父容器中的位置

 ※ 绘制
    int childCount = getChildCount();
    for (int i = 0; i < childCount; i++) {
        View childView = getChildAt(i);
	//获取宽高
	int measureHeight = childView.getMeasuredHeight();
	int measuredWidth = childView.getMeasuredWidth();
	childView.layout(left, mTotalHeight, measuredWidth, mTotalHeight + measureHeight);
    }

    要考虑padding值的影响，如果有margging，则也要考虑对其的影响

 ※ ViewGroup自定义中 onLayout 的一些理解
    child.layout(l, t, r, b);
    l是指控件距离左边的位置，并不是0，而是lp.leftMargin;
    （重）r是在控件右边的距离，可以这样计算(此控件在父控件右边)，getWidth()-childWidth -lp.rightMargin;
     注：此时并""不是""getWidth()-childWidth -lp.rightMargin - lp.leftMargin;
----------------------------------------------------------------------------------------------------------------------------------------


一些比较不容易理解的地方
----------------------------------------------------------------------------------------------------------------------------------------
 ※ getWidth()和getMeasureWidth()的理解？
    getWidth(): View在设定好布局后，整个View的宽度
    getMeasuredWidth()：对View上的内容进行测量后得到的View内容占据的宽度。前提是你必须在父布局的onLayout()方法或者此View的onDraw()方法里调用measure(0,0)；
    （measure参数的值可以自己定义），否则得到的结果和getWidth()得到的结果是一样的。

  ※ 两者的使用场合：
    getWidth:一般在view已经布局后呈现出来了，想获取宽度时
    getMeasuredWidth:在自定义view重写onLayout时、在我们用layoutinflater动态加载view后想获得view的原始宽度时。


----------------------------------------------------------------------------------------------------------------------------------------


