

相关重要概念
----------------------------------------------------------------------------------------------------------------------------------

 ※ 屏幕知识
     屏幕尺寸
       手机对角线的物理尺寸，单位是英寸，1英寸=2.52厘米，Android手机常见的尺寸有5寸、5.5寸、6寸等等

     屏幕分辨率
       手机的横、纵向上的像素点总和，既1080x1920，即手机宽度方向上有1080个像素点，高度上有1920个像素点
       单位是px， 1px=1个像素点。UI设计师的设计图会以px作为统一的计量单位
       手机常见分辨率有320*480, 480*800, 480*854, 540*960, 720*1280, 1080*1960

     屏幕像素密度
       每英寸上的像素点数，单位dpi（dots per ich）
       例如：手机 屏幕尺寸4.95，分辨率1920*1080 则屏幕密度为 1920^2 + 1080^2然后开根号/4.95=445dpi

     安卓手机对于每类手机屏幕大小都有一个相应的屏幕像素密度：
       密度类型	         代表的分辨率（px）	屏幕像素密度（dpi）
     低密度（ldpi）	    240x320	           120
     中密度（mdpi）	    320x480	           160
     高密度（hdpi）	    480x800	           240
     超高密度（xhdpi）	    720x1280               320
     超超高密度（xxhdpi）   1080x1920              480


 ※ Android计量单位
     px
       构成图形的最小单位, UI设计师的设计图一般用此单位
     sp
       Android开发时用此单位设置文字大小，可根据文字大小首选项进行缩放
       谷歌推荐使用12sp、14sp、18sp、22sp作为字体首选大小
       不推荐使用奇数(不能被2整除的数,1 3 5...)和小数，容易造成精度的丢失问题；小于12sp的字体会太小导致用户看不清
     dp/dip
       密度无关像素（Density Independent Pixels），Android特有的单位，可以保证在不同屏幕像素密度的设备上显示相同的效果
       它的值会随着像素密度的改变而变化
       比如：160dpi时，1dip=1px, 如果密度为320dpi，则1dip=2px，以此类推

     dp与px的转换
     因为ui设计师给你的设计图是以px为单位的，Android开发则是使用dp作为单位的，那么我们需要进行转换：
     在Android中，规定以160dpi（即屏幕分辨率为320x480）为基准：1dp=1px




 ※ 文件夹像素密度
                        代表的分辨率（px）  屏幕密度（dpi）	换算（px/dp）	比例
     低密度（ldpi）	  240x320	      120	         1dp=0.75px       3
     中密度（mdpi）	  320x480	      160	         1dp=1px          4
     高密度（hdpi）	  480x800	      240	         1dp=1.5px        6
     超高密度（xhdpi）	  720x1280	      320	         1dp=2px          8
     超超高密度（xxhdpi） 1080x1920	      480	         1dp=3px          12

----------------------------------------------------------------------------------------------------------------------------------


屏幕适配
----------------------------------------------------------------------------------------------------------------------------------

 ※ 为什么要进行屏幕适配
     由于Android系统的开放性，任何用户、开发者、OEM厂商、运营商都可以对Android进行定制，于是导致：
     1.Android系统碎片化：小米定制的MIUI、魅族定制的flyme、华为定制的EMUI等等
     2.Android机型屏幕尺寸碎片化：5寸、5.5寸、6寸等等
     3.Android屏幕分辨率碎片化：320x480、480x800、720x1280、1080x1920等等

     为了保证用户获得一致的用户体验效果：
     使得某一元素在Android不同尺寸、不同分辨率的手机上具备相同的显示效果


 ※ 适配的本质
    1.使得同一界面在不同的手机上呈现相同的效果
    2.使得图片在不同的手机上呈现相同的效果
    3.使得同一界面在手机个平板上呈现不同的布局效果


※ 解决方案
   1.使得同一界面在不同的手机上呈现相同的效果
     1.布局适配, 使用相对布局(RelativeLayout)和约束布局(ConstraintLayout), 禁用绝对布局(AbsoluteLayout)
     2.布局组件适配, 使得布局组件自适应屏幕尺寸，使用wrap_content、match_parent、layout_weight(详解下翻)来控制视图组建的宽度和高度
     3.单位适配, 使用dp来代替px作为控件长度的统一度量单位
	         使用sp作为文字的统一度量单位 推荐使用12sp、14sp、18sp、22sp作为字体首选大小
		 不推荐使用奇数(不能被2整除的数,1 3 5...)和小数，容易造成精度的丢失问题；小于12sp的字体会太小导致用户看不清
     4.屏幕dp(密度)适配, 使得布局组件在不同屏幕密度上显示相同的像素效果 (详解下翻)
   2.使得图片在不同的手机上呈现相同的效果
     1.使用自动拉伸位图: .9图(详解下翻)
     2.使得图片资源在不同屏幕密度上显示相同的像素效果 (详解下翻)
        1.做法一：提供备用位图放入对应的文件夹
	2.做法二：一套位图资源放入(xhdpi) (推荐)
   3.使得同一界面在手机个平板上呈现不同的布局效果
     1.使用尺寸限定符 (详解下翻)
     2.使用最小宽度限定符
     3.布局别名
     4.屏幕方向限定符
     5."用户界面流程"适配(此适配的细节和具体代码处理见文章 https://blog.csdn.net/wangwangli6/article/details/63258270 ”用户界面流程“匹配)



 ※ 布局适配
    做法：使用相对布局(RelativeLayout)和约束布局(ConstraintLayout)，禁用绝对布局（AbsoluteLayout 适配性极差，所以极少使用）

    RelativeLayout VS LinearLayout
    LinearLayout   通过多层嵌套的方式构建出足够复杂的布局。但是LinearLayout无法准确地控制子视图之间的位置关系，只能简单的一个挨着一个地排列
    RelativeLayout 布局的子控件之间使用相对位置的方式排列，讲究的是相对位置即使屏幕的大小改变，视图之前的相对位置都不会变化，与屏幕大小无关，灵活性很强

    所以，对于屏幕适配来说，使用相对布局（RelativeLayout）将会是更好的解决方案



 ※ 屏幕dp(密度)适配 - 使得布局组件在不同屏幕密度上显示相同的像素效果
    场景：
     Nexus5的总宽度为360dp，我们现在在水平方向上放置两个按钮，一个是150dp左对齐，另外一个是200dp右对齐，那么中间留有10dp间隔；
     但假如同样地设置在Nexus S（屏幕宽度是320dp），会发现，两个按钮会重叠，因为320dp<200+150dp

    解决：
     1.尽可能少用dp来指定控件的具体长宽，而使用match_parent、wrap_content和weight
     2.如果有些情况下必须用此方式指定，那我们需要解决两个问题
       1.因为屏幕密度（分辨率）不一样，所以不能用固定的px
       2.因为屏幕宽度不一样，所以要小心的用dp
       即根据不同屏幕密度，控件选择对应的像素值大小

    代码展示：
    首先以某一分辨率为基准，生成所有分辨率对应像素数列表 这里以320x480为基准
    将屏幕的宽度分为320份，取值为x1~x320
    将屏幕的高度分为480份，取值为y1~y480
    res/values-320x480/lay_x.xml（宽）
     <?xml version="1.0" encoding="utf-8"?>
     <resources>
       <dimen name="x1">1.0px</dimen>
       <dimen name="x2">2.0px</dimen>
       <dimen name="x3">3.0px</dimen>
       ...
       <dimen name="x320">320.0px</dimen>
     </resources>

    res/values-320x480/lay_y.xml（高）
     <?xml version="1.0" encoding="utf-8"?>
     <resources>
       <dimen name="y1">1.0px</dimen>
       <dimen name="y2">2.0px</dimen>
       <dimen name="y3">3.0px</dimen>
       ...
       <dimen name="y480">320.0px</dimen>
     </resources>

    所以1080x1920 就对应1080/320=3.375px，1920/480=4px
    res/values-1080x1920/lay_x.xml（宽）
     <?xml version="1.0" encoding="utf-8"?>
     <resources>
       <dimen name="x1">3.375px</dimen>
       <dimen name="x2">6.65px</dimen>
       <dimen name="x3">10.125px</dimen>
       ...
       <dimen name="x320">1080px</dimen>
     </resources>

    res/values-1080x1920/lay_y.xml（高）
     <?xml version="1.0" encoding="utf-8"?>
     <resources>
       <dimen name="y1">4px</dimen>
       <dimen name="y2">8px</dimen>
       <dimen name="y3">12px</dimen>
       ...
       <dimen name="y480">1920px</dimen>
     </resources>

    默认文件夹
    res/values/lay_x.xml（宽）
     <?xml version="1.0" encoding="utf-8"?>
     <resources>
       <dimen name="x1">1.0dp</dimen>
       <dimen name="x2">2.0dp</dimen>
       <dimen name="x3">3.0dp</dimen>
       ...
     </resources>

    res/values/lay_y.xml（高）
     <?xml version="1.0" encoding="utf-8"?>
     <resources>
       <dimen name="y1">1.0dp</dimen>
       <dimen name="y2">2.0dp</dimen>
       <dimen name="y3">3.0dp</dimen>
       ...
       <dimen name="y480">480.0dp</dimen>
     </resources>


    根据UI设计师给出某一分辨率设计图上的尺寸，找到对应像素数的单位，然后设置给控件即可
    <FrameLayout >
      <Button
        android:layout_gravity="center"
        android:gravity="center"
        android:text="@string/hello_world"
        android:layout_width="@dimen/x160"
        android:layout_height="@dimen/y160"/>

     </FrameLayout>

    如果想要补齐其他的分辨率，
     1.下载此工具jar https://github.com/hongyangAndroid/Android_Blog_Demos/tree/master/blogcodes/src/main/java/com/zhy/blogcodes/genvalues
     2.cmd 进入此下载目录
     3.写入命令 这里里320x480为基准为例 java -jar autolayout.jar 320 480
       (java -jar 文件名.jar 基准宽 基准高 额外支持尺寸1的宽，额外支持尺寸1的高_额外支持尺寸2的宽,额外支持尺寸2的高)


    总结：
     使用上述的适配方式，应该能进行90%的适配了，但其缺点还是很明显：
     1.由于实际上还是使用px作为长度的度量单位，所以和google的要求使用dp作为度量单位会有所背离
     2.必须尽可能多的包含所有分辨率，因为这个是使用这个方案的基础，如果有某个分辨率缺少，将无法完成该屏幕的适配
     3.过多的分辨率像素描述xml文件会增加软件包的大小和维护的难度



 ※ “图片资源”匹配
    本质：使得图片资源在不同屏幕密度上显示相同的像素效果

    做法一：提供备用位图（符合屏幕尺寸的图片资源）
       密度类型	         代表的分辨率（px）	屏幕像素密度（dpi）
     低密度（ldpi）	    240x320	           120
     中密度（mdpi）	    320x480	           160
     高密度（hdpi）	    480x800	           240
     超高密度（xhdpi）	    720x1280               320
     超超高密度（xxhdpi）   1080x1920              480

     1.根据尺寸范围针对各密度生成相应的图片。
       比如：xhdpi设备生成了200x200px尺寸的图片，按照上图比例hdpi、mdpi 和 ldpi 设备分别生成 150x150、100x100 和 75x75 尺寸的图片
     2.放入对应mdpi、hdpi、xhdpi、xxhdpi文件下
       1.如果是.9图或者是不需要多个分辨率的图片，放在drawable文件夹即可
       2.对应分辨率的图片要正确的放在合适的文件夹，否则会造成图片拉伸等问题

     弊端：
     1.每套分辨率出一套图，为美工或者设计增加了许多工作量
     2.对Android工程文件的apk包变的很大


    做法二：只需选择唯一一套分辨率规格的图片资源
    Android找寻图片的原理是，先到对应的图片资源(比如mdpi)中找文件；但假设你只在xhpdi文件夹下有对应的图片资源文件（mdpi文件夹是空的），
    那么SDK会去xhpdi文件夹找到相应的图片资源文件，然后将原有大像素的图片自动缩放成小像素的图片，于是大像素的图片照样可以在小像素分辨率的手机上正常显示。
    所以理论上来说只需要提供一种分辨率规格的图片资源就可以了。
    那么应该提供哪种分辨率规格呢？
    xhdpi应该是首选
    原因：
    1.xhdpi分辨率以内的手机需求量最旺盛
      目前市面上最普遍的高端机的分辨率还多集中在720X1080范围内（xhdpi），所以目前来看xhpdi规格的图片资源成为了首选
    2.节省设计资源&工作量
      在现在的App开发中（iOS和Android版本），有些设计师为了保持App不同版本的体验交互一致，可能会以iPhone手机为基础进行设计，包括后期的切图之类的。
      iPhone主流的屏幕dpi约等于320, 刚好属于xhdpi，所以选择xhdpi作为唯一一套dpi图片资源，可以让设计师不用专门为Android端切图，
      直接把iPhone的那一套切好的图片资源放入drawable-xhdpi文件夹里就好，这样大大减少的设计师的工作量！



 ※ 根据屏幕的配置来加载相应的UI布局

    尺寸（size）限定符
    使用场景：当一款应用显示的内容较多，希望进行以下设置：
    在平板电脑和电视的屏幕（>7英寸）上：实施“双面板”模式以同时显示更多内容
    在手机较小的屏幕上：使用单面板分别显示内容

    文件配置如下：
    适配手机的单面板（默认）布局：res/layout/main.xml
    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
      ....>
      <fragment ... />
    </LinearLayout>

    适配尺寸>7寸平板的双面板布局：res/layout-large/main.xml
    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
      ....>
      <fragment ... />
      <fragment ... />
    </LinearLayout>
    注意：这种方式只适合Android 3.2版本之前。



    最小宽度（Smallest-width）限定符  3.2版本之后
    背景：上述提到的限定符“large”具体是指多大呢？似乎没有一个定量的指标，这意味没办法准确地根据设备屏幕尺寸自动加载合适的布局资源
    例子：比如说large同时包含着5寸和7寸，这意味着使用“large”限定符的话我没办法实现为5寸和7寸的平板电脑分别加载不同的布局
    于是，在Android 3.2及之后版本，引入了最小宽度（Smallest-width）限定符
    定义：通过指定某个最小宽度（以 dp 为单位）来精确定位屏幕从而加载不同的UI资源

    使用场景
    在平板电脑（其最小宽度为 600 dp）上：实施“双面板”模式以同时显示更多内容
    在手机较小的屏幕上：使用单面板分别显示内容

    代码展示：
    适配手机的单面板（默认）布局：res/layout/main.xml
    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
      ....>
      <fragment ... />
    </LinearLayout>

    适配尺寸>600平板的双面板布局：res/layout-sw600dp/main.xml sw600dp的意思是无论是宽度还是高度，只要大于600dp，就采用次此布局()
    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
      ....>
      <fragment ... />
      <fragment ... />
    </LinearLayout>
    注意：这种方式只适合Android 3.2版本之后



    布局别名
    如果使用上面两种方式，则需要同时维护3个文件，(适配手机的布局文件 3.2之前的layout-large布局文件 3.2之后的布局layout-sw600dp文件) 这会带来：文件名的重复从而带来一些列后期维护的问题
    而布局布局别名解决此问题
    适配手机的单面板（默认）布局：res/layout/main.xml
    适配尺寸>7寸平板的双面板布局：res/layout/main_twopanes.xml

    代码展示：
    1.res/values-large/layout.xml（Android 3.2之前的双面板布局）
      <resources>
        <item name="main" type="layout">@layout/main_twopanes</item>
      </resources>

    2.res/values-sw600dp/layout.xml（Android 3.2及之后的双面板布局）
      <resources>
        <item name="main" type="layout">@layout/main_twopanes</item>
      </resources>


    屏幕方向（Orientation）限定符
    取以下为例子：
    小屏幕, 竖屏: 单面板
    小屏幕, 横屏: 单面板
    7 英寸平板电脑，纵向：单面板，带操作栏
    7 英寸平板电脑，横向：双面板， 宽，带操作栏
    10 英寸平板电脑，纵向：双面板，窄，带操作栏
    10 英寸平板电脑，横向：双面板，宽，带操作栏
    电视，横向：双面板，宽，带操作栏

    方法：
    先定义layout布局文件：单/双面板、是否带操作栏、宽/窄
    再使用布局别名进行匹配进行相应的匹配：屏幕尺寸（小屏、7寸、10寸）、方向（横、纵）

    代码展示：
    1.res/layout/onepane.xml:(单面板)
    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
      ....>
      <fragment ... />
    </LinearLayout>

    2.res/layout/onepane_with_bar.xml:(单面板带操作栏)
    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
      ....>
      <LinearLayout >
         ...
      </LinearLayout>
      <fragment ... />
    </LinearLayout>

    3.res/layout/twopanes.xml:(双面板，宽布局)
    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
      ....>
      <fragment ... />
      <fragment ... />
    </LinearLayout>

    4.res/layout/twopanes_narrow.xml:(双面板，窄布局)
    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
      ....>
      <fragment ... />
      <fragment ... />
    </LinearLayout>

   5.使用别名进行展示
     res/values/layouts.xml:（默认布局）
      <resources>
        <item name="main_layout" type="layout">@layout/onepane_with_bar</item>
        <bool name="has_two_panes">false</bool>  <!--可为resources设置bool，通过获取其值来动态判断目前已处在哪个适配布局->
      </resources>

     res/values-sw600dp-land/layouts.xml（大屏、横向、双面板、宽-Andorid 3.2版本后）
      <resources>
        <item name="main_layout" type="layout">@layout/twopanes</item>
        <bool name="has_two_panes">true</bool>
      </resources>


     res/values-sw600dp-port/layouts.xml（大屏、纵向、单面板带操作栏-Andorid 3.2版本后）
      <resources>
        <item name="main_layout" type="layout">@layout/onepane</item>
        <bool name="has_two_panes">false</bool>
      </resources>

     res/values-large-land/layouts.xml（大屏、横向、双面板、宽-Andorid 3.2版本前）
     res/values-large-port/layouts.xml（大屏、纵向、单面板带操作栏-Andorid 3.2版本前）

     这里没有完全把全部尺寸匹配类型的代码贴出来.....



 ※ 参考：
    https://blog.csdn.net/wangwangli6/article/details/63258270


----------------------------------------------------------------------------------------------------------------------------------


layout_weight 权重
----------------------------------------------------------------------------------------------------------------------------------------
 ◆ 牛人笔记
     计算公式 http://blog.csdn.net/dazlly/article/details/13767343
     范例 http://blog.csdn.net/xiaanming/article/details/13630837

 ※ 适用范围
     适用范围仅LinearLyout

 ※ 计算实例分析
    假设：LinearLayout为android:orientation="horizontal"， layout_weight属性值分别为1、2、2

    第一种情况：每个控件的宽度属性都为android:layout_width="0dp"，那么额外的空为（手机的宽度假设为X）X-0-0-0=X，那么根据sdk上所述：
    第一个控件的宽度为 0+(1/(1+2+2))*X=X/5
    第二个控件的宽度为 0+(2/(1+2+2))*X=2X/5
    第三个控件的宽度为 0+(2/(1+2+2))*X=2X/5

    第二种情况：每个控件的宽度属性都为android:layout_width="match_parent"，那么额外的空间就是X-X-X-X=-2X
    第一个控件的宽度为 X+(1/(1+2+2))*(-2X)=3X/5
    第二个控件的宽度为 X+(2/(1+2+2))*(-2X)=X/5
    第三个控件的宽度为 X+(2/(1+2+2))*(-2X)=X/5

    第三种情况：其中第一个控件宽度属性为android:layout_width="match_parent"，其他两个控件宽度为android:layout_width="0dp"，额外的空间为X-X-0-0=0
    第一个控件的宽度为 X+(1/(1+2+2))*0=X
    第二个控件的宽度为 0+(2/(1+2+2))*0=0
    第三个控件的宽度为 0+(2/(1+2+2))*0=0

 ※ 结论：layout_weight计算公式
    控件的宽度/高度 = 控件的width/height值+（该控件的weight值/所有控件的weight的和）×额外的空间
    额外的空间=手机的宽度/高度-所有控件的宽度/高度

    注：如果属性为android:layout_width="wrap_content" 则计算时，总宽/高要减去控件本身占据的宽/高

 ※ 总结
    如果想让2个控件，一个占屏幕3/5，一个占2/5, 则宽/高设置0，android:layout_width设置2和3

----------------------------------------------------------------------------------------------------------------------------------------



.9图
----------------------------------------------------------------------------------------------------------------------------------
 ◆牛人笔记
   http://www.cnblogs.com/loulijun/archive/2011/12/22/2298087.html

 ※ 特点(与普通图片的区别)
    实现自适应大小且不失真的效果

 ※ 制作
    1.必须是png图片
    2.在android-sdk-windows\tools目录下找到draw9patch.bat文件，然后将其打开，将你要处理的png图片拖入即可。或者File --> Open 9 patch。
    3.制作

 ※ 黑线理解
    上边黑线：横向拉伸区域，必须要画的，拉伸是横向拉伸，如右边的区域第二个拉伸的就是横向拉伸的效果
    左边黑线：纵向拉伸区域，必须要画的，拉伸是纵向拉伸，如右边的区域第一个拉伸的就是纵向拉伸的效果
    下边黑线：可选，横向内容显示区域， 边距,相当于paddingLeft和paddingRight
    右边黑线：可选，纵向内容显示区域， 边距,相当于paddingTop和paddingBottom

 ※ 注意点
    上边和左边必须要画，

----------------------------------------------------------------------------------------------------------------------------------

