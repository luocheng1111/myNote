


Android 软键盘
----------------------------------------------------------------------------------------------------------------------------------------
 ※ 介绍
    软件盘的本质是一个Dialog。


 ※ 软键盘的显示/隐藏 可参考：https://blog.csdn.net/ccpat/article/details/46717573
    方法一：
    InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
    //显示软键盘
    imm.toggleSoftInput(0, InputMethodManager.HIDE_NOT_ALWAYS);
    //关闭软键盘
    imm.toggleSoftInput(InputMethodManager.SHOW_IMPLICIT,InputMethodManager.HIDE_NOT_ALWAYS);


    方法二：
    InputMethodManager imm =(InputMethodManager) etInput.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);
    //显示软键盘
    imm.showSoftInput(editText, InputMethodManager.SHOW_IMPLICIT);
    /显示软键盘
    imm.showSoftInput(activity.getCurrentFocus(), InputMethodManager.SHOW_IMPLICIT);
    //关闭软键盘
    imm.hideSoftInputFromWindow(view.getWindowToken(), InputMethodManager.RESULT_UNCHANGED_SHOWN);
    //关闭软键盘
    imm.hideSoftInputFromWindow(activity.getCurrentFocus().getWindowToken(), InputMethodManager.RESULT_UNCHANGED_SHOWN);


 ※ 聊天界面EditText与软键盘的交互
   其中的坑：
    如果代码中改变了顶部状态的状态，会导致软键盘弹起时，软键盘会覆盖底部输入框。
    因此需要在XML布局中的最上层布局加上android:fitsSystemWindows="true"
    才会达到软键盘弹起时，软键盘顶起底部输入框的效果

   1.AndroidManifest.xml
        <activity
            android:name="com.live.lianhong.ui.chat.ChatActivity"
            android:screenOrientation="portrait" />

   2.XML布局
     LinearLayout从上到下布局 标题栏+RecycleView+底部输入框功能
     且顶层LinearLayout 加上 android:fitsSystemWindows="true"

   3.代码部分
     StatusBarUtil.setStatusBarFulAlpha(this);
     BarUtils.setStatusBarLightMode(this, false);
     initHead();

     //底部布局弹出,聊天列表上滑
     rvChat.addOnLayoutChangeListener(new View.OnLayoutChangeListener() {
            @Override
            public void onLayoutChange(View v, int left, int top, int right, int bottom, int oldLeft, int oldTop, int oldRight, int oldBottom) {
                if (bottom < oldBottom) {
                    rvChat.post(new Runnable() {
                        @Override
                        public void run() {
                            if (adapter.getItemCount() > 0) {
                                rvChat.smoothScrollToPosition(adapter.getItemCount() - 1);
                            }
                        }
                    });
                }
            }
     });

     rvChat.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {
                if(KeyboardUtils.isSoftInputVisible(ChatActivity.this)){
                    LogUtils.e("onTouch ");
                    KeyboardUtils.hideSoftInput(ChatActivity.this);
                }
                return false;
            }
     });




 ※ 软键盘的显示 与 界面控制位置的变动
    介绍：Android中，软键盘弹起时，默认整体布局会上移(如果界面中有ScrollView或RecycleView或ListView，则另当别论)
    可以在AndroidManifest对应的Acitivity中添加android:windowSoftInputMode熟悉来控制软键盘与界面的交互

    android:windowSoftInputMode="adjustPan"
    1.软键盘弹起时, 如果界面中的没有输入框获取焦点, 则软键盘会覆盖这个界面
    2.软键盘弹起时, 如果界面中的某一个输入框获取了焦点,
      若软键盘会覆盖这个输入框，则屏幕整体会上移，键盘会处于输入框正下方，输入框下面的部分会被覆盖，输入框上面部分会平移
      若软键盘不会覆盖这个输入框，则界面不会有什么变化

    android:windowSoftInputMode="adjustResize" 一般结合Scrollview使用
    1.软键盘弹起时, 若软键盘会覆盖ScrollView或RecycleView或ListView控件，这这些控件会上移，键盘会处于这些控件的正下方，其他控件位置不会有变动
    2.软键盘弹起时，若某一个输入框获取了焦点，且弹出的输入框会覆盖此输入框，则与输入框有联系(android:layout_above)的控件会整体上移。
    2.软键盘弹起时, 若软键盘不会覆盖ScrollView或RecycleView或ListView控件，则界面不会有变化


    android:fitsSystemWindows="true"
    在Android实现了沉浸式功能后，在有输入框的界面，当点击输入框弹起输入法时，输入法遮挡住了输入框，或者输入框在底部并没有随着输入法弹起而弹起。
    解决办法：在EditText的根布局添加上面属性，如果不是根布局，在其它位置或节点添加，界面会多出一块布局  这块布局和顶部状态栏高度一样  颜色可能也一样。
    实例：一个聊天界面 RelativeLayout根布局+底部输入框+顶部沉浸式布局+中间RecyclerView  Activity不设置任何InputMode
         1.如果在根布局加上android:fitsSystemWindows="true", 点击输入框时,软键盘顶起输入框和RecyclerView，头部不会移动
         2.如果没加,则点击输入框时,软键盘直接覆盖界面

    注：我们没有给Activity设置windowSoftInputMode时，系统会根据界面的布局会自动设置adjustPan或adjustResize的其中一个，界面中没有滚动控件的布局
       默认的设置是adjustPan,有滚动布局时，会设置成adjustResize







 ※ 踩过的坑
    1).EditText设置ScrollView压缩背景图片解决办法
       //在你的Activity里加上
       getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN);


    2).软键盘无法顶起页面
       如果代码中修改了状态栏 则会出现无法顶起界面的效果
       解决方案：那就是在根布局上加上fitsSystemWindow=”true”即可。

       这里的fitsSystemWindow具体的作用就是你的contentview是否忽略actionbar,title,屏幕的底部虚拟按键，将整个屏幕当作可用的空间。
       正常情况，contentview可用的空间是去除了actionbar,title,底部按键的空间后剩余的可用区域；这个属性设置为true,则忽略，false则不忽略


    3).自定义软键盘按钮功能无效
       在2.3及以上版本不起作用，edittext加入Android:imeOptions=”actionSearch”这个属性没响应
       解决方案：加上android:inputType=""


    4).设置软键盘不顶起界面
       设置属性为 android:windowSoftInputMode="adjustPan|...."


 ※ 参考
    彻底搞定Android开发中软键盘的常见问题 http://blog.csdn.net/mynameishuangshuai/article/details/51567357
    https://blog.csdn.net/smileiam/article/details/69055963
    https://www.jianshu.com/p/cc3809d6169c
    https://blog.csdn.net/wangwangli6/article/details/77053479

----------------------------------------------------------------------------------------------------------------------------------------





 Activit和Fragment中 点击外部隐藏软键盘
----------------------------------------------------------------------------------------------------------------------------------------

 ※ Actuvity中 点击EditText之外隐藏软键盘
    @Override
    public boolean dispatchTouchEvent(MotionEvent ev) {
        if (ev.getAction() == MotionEvent.ACTION_DOWN) {
            View v = getCurrentFocus();
            if (isShouldHideInput(v, ev)) {
                InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                if (imm != null) {
                    assert v != null;
                    imm.hideSoftInputFromWindow(v.getWindowToken(), 0);
                }
            }
            return super.dispatchTouchEvent(ev);
        }
        // 必不可少，否则所有的组件都不会有TouchEvent了
        return getWindow().superDispatchTouchEvent(ev) || onTouchEvent(ev);
    }

    public boolean isShouldHideInput(View v, MotionEvent event) {
        if (v != null && (v instanceof EditText)) {
            int[] leftTop = {0, 0};
            //获取输入框当前的location位置
            v.getLocationInWindow(leftTop);
            int left = leftTop[0];
            int top = leftTop[1];
            int bottom = top + v.getHeight();
            int right = left + v.getWidth();
            return !(event.getX() > left && event.getX() < right
                    && event.getY() > top && event.getY() < bottom);
        }
        return false;
    }

    参考：https://www.jianshu.com/p/5aecf79025a4





 ※ Fragment中 点击EditText之外隐藏软键盘
    Activity中的代码:
    //Frgament中软键盘的处理,点击EditText外的地方，软键盘自动隐藏-----------------------------------------------------
    private OnHideKeyboardListener onHideKeyboardListener;
    public interface OnHideKeyboardListener{
        public boolean hideKeyboard();
    }

    public void setOnHideKeyboardListener(OnHideKeyboardListener onHideKeyboardListener){
        this.onHideKeyboardListener = onHideKeyboardListener;
    }

    @Override
    public boolean dispatchTouchEvent(MotionEvent ev) {
        // TODO Auto-generated method stub
        if (ev.getAction() == MotionEvent.ACTION_DOWN) {
            View v = getCurrentFocus();
            if (isShouldHideInput(v, ev)) {
                onHideKeyboardListener.hideKeyboard();
            }
            return super.dispatchTouchEvent(ev);
        }
        // 必不可少，否则所有的组件都不会有TouchEvent了
        return getWindow().superDispatchTouchEvent(ev) || onTouchEvent(ev);
    }

    public boolean isShouldHideInput(View v, MotionEvent event) {
        if (v != null && (v instanceof EditText)) {
            int[] leftTop = {0, 0};
            //获取输入框当前的location位置
            v.getLocationInWindow(leftTop);
            int left = leftTop[0];
            int top = leftTop[1];
            int bottom = top + v.getHeight();
            int right = left + v.getWidth();
            return !(event.getX() > left && event.getX() < right
                    && event.getY() > top && event.getY() < bottom);
        }
        return false;
    }
    //---------------------------------------------------------------------------------------------------------

    Fragment中的代码:
    //软键盘的处理,,点击EditText外的地方，软键盘自动隐藏
    public void onAttach(Activity activity) {
    // TODO Auto-generated method stub
    final InputMethodManager imm = (InputMethodManager) getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
    FragmentContentActivity.OnHideKeyboardListener onHideKeyboardListener = new FragmentContentActivity.OnHideKeyboardListener() {
            @Override
            public boolean hideKeyboard() {
              // TODO Auto-generated method stub
              if(imm.isActive(etSearch)){
          getView().requestFocus();
          imm.hideSoftInputFromWindow(getActivity().getCurrentFocus().getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);
          return true;
              }
          return false;
        }
        };
        ((FragmentContentActivity)getActivity()).setOnHideKeyboardListener(onHideKeyboardListener);
        super.onAttach(activity);
    }




----------------------------------------------------------------------------------------------------------------------------------------