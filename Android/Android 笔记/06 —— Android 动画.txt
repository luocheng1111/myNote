


Android 动画
----------------------------------------------------------------------------------------------------------------------------------

   Android系统为我们提供了丰富的动画，
   最初的传统动画(帧动画和补间动画)、Android3.0出现的属性动画、
   CircularReveal动画，Activity转场动画及5.0新转场动画(Explode、Slide、Fade、Share)
   矢量动画(pathMorphing、trimPath)


※ 参考
    https://www.jianshu.com/p/48554844a2db


※ demo：/Demo/Android 动画示例(有效果图).zip


----------------------------------------------------------------------------------------------------------------------------------




Frame Animation 帧动画
----------------------------------------------------------------------------------------------------------------------------------

 ※ 介绍
    帧动画的原理就是将一张张单独的图片连贯的进行播放，在视觉上产生一种动画的效果；有点类似于软件制作gif动画的方式
    还可以实现界面的图片一直循环动画显示的效果

 ※ XML方式实现 (在/anim或/drawable下定义一个xml文件)
     <?xml version="1.0" encoding="UTF-8"?>
        <animation-list xmlns:android="http://schemas.android.com/apk/res/android"
	    android:oneshot="false">  //true 代表只循环一次 false 代表无限循环
	    <item android:drawable="@drawable/a01" android:duration="100" />
	    <item android:drawable="@drawable/a02" android:duration="100" />
	    <item android:drawable="@drawable/a03" android:duration="100" />
        </animation-list>


     ImageView iv = (ImageView) findViewById(R.id.animation1);
     iv.setBackgroundResource(R.anim.frame);
     AnimationDrawable anim = (AnimationDrawable) image.getBackground();
     anim.start();


 ※ 纯代码方式实现
      AnimationDrawable anim = new AnimationDrawable();
      anim.addFrame(drawable1, 300);
      anim.addFrame(drawable2, 300);
      anim.addFrame(drawable3, 300);
      anim.setOneShot(false);
      image.setBackgroundDrawable(anim);
      anim.start();


 ※ 开始与结束动画
    开始动画：
     image.setBackgroundResource(R.anim.frame);
     AnimationDrawable anim = (AnimationDrawable)image.getBackground();
     anim.start();

     注意：当此代码放在onCreate时，只会出现一张图片后就不动了。原因是窗口Window对象还没有完全初始化，AnimationDrawable不能完全追加到窗口Window对象中
           解决办法：在onWindowFocusChanged()中调用动画开始方法

    结束动画：
     AnimationDrawable anim = (AnimationDrawable) image.getBackground();
     if (anim.isRunning()) { //如果正在运行,就停止
           anim.stop();
     }

     注意：但此时只会出现一张图片后就不动了。原因见大牛笔记
           解决办法：在onWindowFocusChanged()中调用动画开始方法


 ※ 注意点：
    1.当此代码放在onCreate时，只会出现一张图片后就不动了。原因是窗口Window对象还没有完全初始化，AnimationDrawable不能完全追加到窗口Window对象中
      解决办法：在onWindowFocusChanged()中调用动画开始方法
    2.不要使用太大的图片，容易导致内存不足


 ※ 参考
    http://blog.csdn.net/liuhe688/article/details/6657776
    Android 动画总结 https://www.jianshu.com/p/420629118c10


----------------------------------------------------------------------------------------------------------------------------------



Tweened Animation 补间动画
----------------------------------------------------------------------------------------------------------------------------------

 ※ 定义
    给控件加动画效果， 补间动画有四种形式，分别是 alpha（淡入淡出），translate（位移），scale（缩放大小），rotate（旋转）。
    可以单独一种形式出现，也可以组合出现


 ※ XML方式实现 (在/anim或 /drawable下面定义一个xml文件)
     <?xml version="1.0" encoding="utf-8"?>
       <set xmlns:android="http://schemas.android.com/apk/res/android"
            android:interpolator="@android:anim/interpolator_resource"  //插值器，默认为匀速插值器，可自定义插值器
            android:shareInterpolator=["true" | "false"]   //代表<set>里面的多个动画是否共享插值器，默认为true，若改为false，则插值器失效
            android:duration="5000" >

         <alpha  渐变
             android:fromAlpha="1.0"  范围（0.0 ~ 1.0 代表透明和完全不透明）
	     android:toAlpha="0"      范围（0.0 ~ 1.0 代表透明和完全不透明）
	 />

         <scale  缩放
             android:fromXScale="1.0"
	     android:fromYScale="1.0" //代表相对自身的缩放比例，1.0代表不变，2.0代表放大一倍

	     android:toXScale="5.0"
	     android:toYScale="5.0"	//5.0 代表放大五倍

	     android:pivotX="50%"
	     android:pivotY="50%"  //代表缩放的中轴点Y坐标,0.5和50%代表图像中心
	 />

         <translate  位移
             android:fromXDelta="0" //代表起始Y方向的位置 0代表本身
	     android:fromYDelta="0"
	     android:toXDelta="100" //代表结尾Y方向上的位置 100代表移动100像素
	     android:toYDelta="100" //四个属性都支持三种表示方式：浮点数、num%、num%p
	    		              浮点数: 移动像素
				      num%：相对于自己的百分比 100% 移动自己一倍的距离
				      num%p：相对于父类组件的百分比
	 />

         <rotate  旋转
            android:fromDegrees="0"  //单位为度
	    android:toDegrees="180"  //从0度旋转到180度

	    android:pivotX="50%"
	    android:pivotY="50%"
	/>
      </set>

     在代码中：
     ImageView image = (ImageView) findViewById(R.id.image);
     Animation animation = AnimationUtils.loadAnimation(this, R.anim.test);
     image.startAnimation(animation);

     属性讲解：
     Interpolato：插值器，主要作用是可以控制动画的变化速率 ，就是动画进行的快慢节奏。
                   Android 系统已经为我们提供了一些Interpolator，比如 accelerate_decelerate_interpolator，accelerate_interpolator等。
		   同时我们还可以自定义Interpolator

     Pivot：设置当前动画的参考物位置，这个属性主要用在translate和scale动画中，Pivot的值有三种形式。以PivotX为例：
     PivotX取值 	   含义
        10	      距离动画所在view自身左边缘10像素
        10%	      距离动画所在view自身左边缘 的距离是整个view宽度的10%
        10%p	      距离动画所在view父控件左边缘的距离是整个view宽度的10%


 ※ 补间动画按顺序播放
   依靠属性里面的android:startOffset属性和android:fillAfter="true"
   eg:按钮的按下回弹动画效果(已存入Base类 springback.xml)
   <?xml version="1.0" encoding="utf-8"?>
    <set xmlns:android="http://schemas.android.com/apk/res/android">

    <scale
        android:duration="100"
        android:pivotX="50%"
        android:pivotY="50%"
        android:fillAfter="true"
        android:fromXScale="1"
        android:fromYScale="1"
        android:toXScale="0.8"
        android:toYScale="0.8" />

    <scale
        android:startOffset="100"
        android:duration="200"
        android:pivotX="50%"
        android:pivotY="50%"
        android:fillAfter="true"
        android:fromXScale="0.8"
        android:fromYScale="0.8"
        android:interpolator="@android:anim/decelerate_interpolator"
        android:toXScale="1.2"
        android:toYScale="1.2" />

    <scale
        android:startOffset="300"
        android:duration="100"
        android:pivotX="50%"
        android:pivotY="50%"
        android:fillAfter="true"
        android:interpolator="@android:anim/accelerate_interpolator"
        android:fromXScale="1.2"
        android:fromYScale="1.2"
        android:toXScale="1"
        android:toYScale="1" />
    </set>


 ※ 纯代码方式实现
     Animation animation = new RotateAnimation(0, 180, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);
     animation.setDuration(long durationMils)     //设置动画持续时间（单位：毫秒）
     animation.setFillAfter(boolean fillAfter)    //设为true，则动画完成后停留在结束状态
     animation.setFillBefore(boolean fillBefore)  //设为true，则动画完成后停留在初始状态
     animation.setStartOffSet(long startOffer)    //设置动画执行之前的等待时间
     animation.setRepeatCount(int repeatCount)    //设置动画重复执行的次数。

     ImageView image = (ImageView) findViewById(R.id.image);
     image.startAnimation(animation);



 ※ 纯代码方式同时实现多个动画 //Animation是AnimationSet的子类,相当于整合多种动画效果
     AnimationSet animationSet = new AnimationSet(boolean a);  //这里的boolean相当于android:shareInterpolator="true"
     animationSet.setInterpolator(new accelerateinterpolator());
     animationSet.addAnimation(alpha);


 ※ 需求：底部4个按钮，点击按钮按钮就会执行一个回弹动画
   问题：在第一个按钮动画未结束前点击第二个按钮，两个按钮一起执行回弹动画
   解决：(失败)1.尝试在第二个按钮点击时，取消动画或暂停动画，然后在执行第二个按钮的动画
                但为找到取消方法 ，貌似也没有这个动画
        (成功)2.实例化4个补间动画，然后点击那个按钮，执行哪个动画

 ※ 参考
    Android 动画总结 https://www.jianshu.com/p/420629118c10

----------------------------------------------------------------------------------------------------------------------------------



Property Animation 属性动画
----------------------------------------------------------------------------------------------------------------------------------

 ※ 介绍
     属性动画是Android3.0开始引入的，相比传统动画，他可以做到View的颜色切换动画，3D动画效果，动画完成时属性也跟着改变的动画效果；
     如果需要在3.0以下使用，则需要导入nineoldandroids-xxx.jar这个包，

     属性动画 VS 传统动画：
     相较于传统动画，属性动画有很多优势。那是否意味着属性动画可以完全替代传统动画呢。其实不然，两种动画都有各自的优势，属性动画如此强大，也不是没有缺点。
     1.传统动画实际上只是改变了其控件的显示位置，其属性实际没变，而属性动画不仅改变了其显示位置，还改变了其属性
       (比如: 一个图片向右位移200像素，通过传统动画实现，点击其200像素位置，无任何反应，点击其原始位置，则会触发监听，而属性动画是200像素有反应，原始位置无反应)
     2.当动画的repeatCount设置为无限循环时，如果在Activity退出时没有及时将动画停止，属性动画会导致Activity无法释放而导致内存泄漏，而补间动画却没有问题。
       因此，使用属性动画时切记在Activity执行 onStop 方法时顺便将动画停止。（对这个怀疑的同学可以自己通过在动画的Update 回调方法打印日志的方式进行验证）。
     3.xml文件实现的补间动画，复用率极高。在Activity切换，窗口弹出时等情景中有着很好的效果
     4.使用帧动画时需要注意，不要使用过多特别大的图，容易导致内存不足。


 ※ 属性动画的使用

    //旋转效果
    ObjectAnimator.ofFloat(imageView, "rotation", 0f, 360f).setDuration(500).start();


    //淡入淡出动画
    ObjectAnimator anim = ObjectAnimator.ofFloat(myView, "alpha", 1.0f, 0.8f, 0.6f, 0.4f, 0.2f, 0.0f);
    anim.setRepeatCount(-1);
    anim.setRepeatMode(ObjectAnimator.REVERSE);
    anim.setDuration(2000);
    anim.start();


    //组合使用 同时播放，异步的，不用担心阻塞问题
    ObjectAnimator.ofFloat(imageView, "rotation", 0, 360F).setDuration(500).start(); //在X轴上平移200个像素
    ObjectAnimator.ofFloat(imageView, "translationX", 0, 200F).setDuration(500).start(); //在X轴上平移200个像素
    ObjectAnimator.ofFloat(imageView, "translationY", 0, 200F).setDuration(500).start(); //在X轴上平移200个像素


    //组合使用 按序或同时播放(可以控制动画播放顺序)
    AnimatorSet set = new AnimatorSet();
    set.playSequentially(alphaAnim, scaleXAnim, scaleYAnim, rotateAnim, transXAnim, transYAnim); //控制动画按顺序播放
//  set.playTogether(alphaAnim, scaleXAnim, scaleYAnim, rotateAnim, transXAnim, transYAnim); //控制动画一起播放
    set.setDuration(3000);
    set.start();

    //更复杂的控制
    set.play(animator2).with(animator3);
    set.play(animator1).after(animator2);


    //优化组合使用 谷歌对这种方式进行了优化
    PropertyValuesHolder p1 = PropertyValuesHolder.ofFloat("rotation", 0, 360F);
    PropertyValuesHolder p2 = PropertyValuesHolder.ofFloat("translationX", 0, 200F);
    PropertyValuesHolder p3 = PropertyValuesHolder.ofFloat("translationY", 0, 200F);
    ObjectAnimator.ofPropertyVlauesHolder(imageView, p1, p2, p3).setDuration(500).start();


 ※ 插值器 控制动画过程的变化速率
    TranslateAnimation translate = new TranslateAnimation(0,100,0,100);
    AccelerateInterpolator interpolator = new AccelerateInterpolator();
    translate.setInterpolator(interpolator);

    AccelerateDecelerateInterpolator 慢 - 快- 慢
    AccelerateInterpolator 慢 - 快
    DecelerateInterpolator 快 - 慢
    AnticipateInterpolator 开始的时候向后然后向前甩
    AnticipateOvershootInterpolator 开始的时候向后然后向前甩一定值后返回最后的值
    BounceInterpolator 动画结束的时候弹起
    CycleInterpolator 动画循环播放特定的次数，速率改变沿着正弦曲线
    LinearInterpolator 以常量速率改变
    OvershootInterpolator 向前甩一定值后再回到原来位置


 ※ 图片自转动画(适合一些等待的旋转图片)
   animator = ObjectAnimator.ofFloat(mIvIcon, "rotation", 0f, 360f);
   animator.setDuration(1000);
   animator.setRepeatCount(ValueAnimator.INFINITE);
   animator.setRepeatMode(ValueAnimator.RESTART);
   animator.setInterpolator(new LinearInterpolator());
   animator.addListener(new AnimatorListenerAdapter() {
       @Override
       public void onAnimationEnd(Animator animation) {
                mIvIcon.setRotation(0);
       }
   });
   animator.start();

 ※ 自定义属性动画 - ValueAnimator 数值发生器，属性动画的根本
    实现动画的原理：通过不断控制 值 的变化，再不断 手动 赋给对象的属性，从而实现动画效果

    ValueAnimator有3个方法:
      ValueAnimator.ofInt（int values）
      ValueAnimator.ofFloat（float values）
      ValueAnimator.ofObject（int values）

    例子：实现一个计时器动画
    Button button = (Button)findViewById(R.id.btn);
    ValueAnimator valueAnimator = ValueAnimator.ofInt(0, 100);
    valueAnimator.addUpdateListener(new ...){
	@Ovrride
	public void onAnimationUpdate(ValueAnimator animator){
		Integer value = animator.getAnimatedValue();
		button.setText(value + "");
	}
    });
    valueAnimator.setDuration(1000);
    valueAnimator.start();


    例子：数值增长器
    final TextView txt = (TextView)findViewById(R.id.txt_number);
    ValueAnimator anim = ValueAnimator.ofFloat(0, 2000);
    anim.setDuration(2000);
    anim.setInterpolator(new LinearInterpolator());
    anim.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
        @Override
        public void onAnimationUpdate(ValueAnimator valueAnimator) {
            float value = (float)valueAnimator.getAnimatedValue();
            txt.setText(format.format(value));
        }
    });
    anim.start();


    例子：Path路径动画
    Path path = new Path();
    path.moveTo(100, 100);
    path.quadTo(screenWidth - 300, 200, screenWidth - 100, screenHeight - 600);

    ObjectAnimator animator = ObjectAnimator.ofFloat(iv, View.X, View.Y, path);
    animator.setDuration(2000);
    animator.setRepeatCount(1);
    animator.setRepeatMode(ValueAnimator.REVERSE);
    animator.start();


 ※ 参考
     http://blog.csdn.net/lmj623565791/article/details/38067475
     Android 动画总结 https://www.jianshu.com/p/420629118c10


----------------------------------------------------------------------------------------------------------------------------------


CircularReveral 揭露效果动画
----------------------------------------------------------------------------------------------------------------------------------

 ※ 介绍
    Android5.0推出的新的动画框架，可以给View做一个揭露效果


 ※ 使用
    //从(0,0) 圆形扩展 到整张图
    Animator anim = ViewAnimationUtils.createCircularReveal(rect, 0, 0, 0, (float) Math.hypot(rect.getWidth(), rect.getHeight()));
    animator2.setDuration(2000);
    animator2.start();

    //整张图 圆形收缩 到没有
    Animator anim = ViewAnimationUtils.createCircularReveal(oval, oval.getWidth() / 2, oval.getHeight() / 2, oval.getWidth(), 0);
    anim.setDuration(2000);
    anim.start();



----------------------------------------------------------------------------------------------------------------------------------



Activity 转场动画
----------------------------------------------------------------------------------------------------------------------------------

 ※ 介绍
    用于Activity之间切换时的动画，需要写在startActivit或finish之后


 ※ 使用
    <?xml version="1.0" encoding="utf-8"?>
    <set xmlns:android="http://schemas.android.com/apk/res/android">
       <translate android:fromXDelta="100%"
               android:toXDelta="0%"
               android:duration="500" />
    </set>

    <?xml version="1.0" encoding="utf-8"?>
    <set xmlns:android="http://schemas.android.com/apk/res/android">
      <translate android:fromXDelta="0%"
               android:toXDelta="-40%"
               android:duration="500" />
    </set>


    //代码编写
    startActivity(new Intent(this, Activity2.class));
    //参数1：进入的Activity动画，参数1：退出的Activity动画
    overridePendingTransition(R.anim.slide_right_in, R.anim.slide_left_out);


 ※ 注意点
    1.它必需紧挨着startActivity()或者finish()函数之后调用”
    2.它只在android2.0以及以上版本上适用(待考证)
    3.如果不想要过渡动画的效果，则设置overridePendingTransition(0,0)
    4.如果想实现5.0共享视图过渡动画的效果，则可以将前一个Activity的对应视图的坐标通过Bundle传递给下一个Activity，
      且需要做到3点：1.界面二背景透明 2.跳转无过渡动画，3.将对应视图的坐标移动到指定位置后


----------------------------------------------------------------------------------------------------------------------------------



Android 5.0新转场动画
----------------------------------------------------------------------------------------------------------------------------------

 ※ 介绍
    5.0新的转场动画分为4种，Explode、Slide、Fade、Share，传统的转场动画只能作用于整个页面，不能对页面中的单个元素做控制，
    而5.0新转场动画可以控制页面中的每个元素，根据元素动画方式，分为4大类。

    Explode：下一个页面的元素从四面八方进入，最终形成完整的页面
    Slide：下一个页面元素从底部依次向上运动，最终形成完整的页面
    Fade： 下一个页面元素渐变出现，最终形成完整的页面
    Share：在跳转的两个Activity之间，如果有相同的View元素，那么，两个元素就可以设置成共享状态，
           在跳转时，这个View就会从第一个Activity的显示状态过渡到第二个Activity的显示状态，
	   给用户的感觉仿佛是两个Activity共享一个View。

 ※ 方式




----------------------------------------------------------------------------------------------------------------------------------


