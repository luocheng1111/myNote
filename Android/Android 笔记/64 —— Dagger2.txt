


Dagger2
----------------------------------------------------------------------------------------------------------------------------------------

 ※ 介绍
    Dagger是安卓界最棒的依赖注入框架，第一代由大名鼎鼎的Square公司共享出来，第二代则是由谷歌接手后推出的
    Dagger2利用注解而不是采用了反射，完全不影响性能
    Dagger的好处：
    这里举个例子，比如有个类A，他的构造函数需要传入B,C；然后代码里有10个地方实例化了A，此时如果功能更改，A的构造函数改成了只有B，
    这个时候，你是不是要去这10个地方一个一个的改？如果是100个地方，你是不是要吐血？！如果采用dagger2，这样的需求只需要改1-2个地方



----------------------------------------------------------------------------------------------------------------------------------------




ButterKnife
----------------------------------------------------------------------------------------------------------------------------------------

 ※ 介绍:
    来自Jakewharton大神的力作，特点是接入简单，依赖一个库就好了。另外在Android Studio上还有提供一个插件，自动生成注解与类属性。

    支持的注解: 
    1、View绑定(Bind)
    2、资源绑定(BindBool, BindColor, BindDimen, BindDrawble, BindInt, BindString)，
    3、事件绑定(OnCheckedChanged, OnClick, OnEditorAction, OnFocusChange, OnItemClick, OnItemLongClick, OnItemSelected, OnLongClick, OnPageChange, OnTextChanged, OnTouch)。

    优点:
    在性能上，ButterKnife并不会影响到app，Butterknife自动生产的代码也不多，也不会对程序的包大小有什么影响


 ※ 上手使用
    1.添加依赖
      compile 'com.jakewharton:butterknife:8.8.1'
      annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'

    2.在代码中使用
      class ExampleActivity extends Activity {
        //第二步: 控件绑定
	@BindView(R.id.title)  
	TextView title;

        @Override 
        public void onCreate(Bundle savedInstanceState) {
          super.onCreate(savedInstanceState);
          setContentView(R.layout.simple_activity);

	  //第一步: 绑定activity
          ButterKnife.bind(this);
          // TODO Use fields...
        }
       
        //事件绑定
        @OnClick(R.id.submit) 
        public void submit(View view) {
	  // TODO submit data to server...
	}


 ※ 其他使用方式   
    //属性绑定
    @BindString(R.string.app_name)  
    String appName;//sting  
    @BindDrawable(R.mipmap.ic_launcher)  
    Drawable drawable;//drawble  

    //多控件绑定
    @BindViews({ R.id.button1, R.id.button2,  R.id.button3 })
    public List<Button> buttonList;
    
    //事件绑定参数可选
    @OnClick(R.id.submit) 
    public void submit() {
	// TODO submit data to server...
    }

    //事件绑定指定一个特定的类型
    @OnClick(R.id.submit) 
    public void submit(Button button) {
	// TODO submit data to server...
    }

    //多事件绑定
    @OnClick({ R.id.door1, R.id.door2, R.id.door3 })
    public void pickDoor(DoorView door) {
	// TODO submit data to server...
    }

    
 ※ Fragment绑定和Adapter的资源绑定写法
    资源绑定的写法是一样的,区别就是
    ButterKnife.bind(this); 变成 ButterKnife.bind(this, view);
    注意点:
    Fragment的生命周期与Activity不同。所以如果在onCreateView中使用绑定，
    那么你需要在onDestroyView中设置所有view为null。unbinder.unbind();
    
    public class FancyFragment extends Fragment {
      @BindView(R.id.button1) Button button1;
      @BindView(R.id.button2) Button button2;
      private Unbinder unbinder;

      @Override 
      public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fancy_fragment, container, false);
        unbinder = ButterKnife.bind(this, view);
        ...

      @Override public void onDestroyView() {
        super.onDestroyView();
        unbinder.unbind();
     ...



 ※ Zelezny插件的使用
    安装:在AndroidStudio->File->Settings->Plugins->搜索Zelezny下载添加就行 ，可以快速生成对应组件的实例对象，不用手动写
    使用:在要导入注解的Activity 或 Fragment 或 ViewHolder的layout资源代码上，右键――>Generate――Generate ButterKnife Injections



 ※ 注意点
    1.Activity ButterKnife.bind(this);必须在setContentView();之后，且父类bind绑定后，子类不需要再bind
    2.Fragment和Adapter ButterKnife.bind(this, mRootView); 且Fragment需要unbind();\
    3.属性布局不能用private or static 修饰，否则会报错
    4.setContentView()不能通过注解实现。（其他的有些注解框架可以）



 ※ 参考
     https://www.jianshu.com/p/9ad21e548b69
     http://blog.csdn.net/itjianghuxiaoxiong/article/details/50177549
     https://www.cnblogs.com/zhaoyanjun/p/6016341.html
     

----------------------------------------------------------------------------------------------------------------------------------------



Dagger2
----------------------------------------------------------------------------------------------------------------------------------------

 ※ 介绍:
    Dagger2是Dagger的升级版，是一个依赖注入框架，现在由Google接手维护。

    什么是依赖注入?
     依赖注入是面向对象编程的一种设计模式，其目的是为了降低程序耦合，这个耦合就是类之间的依赖引起的。


 ※ 上手使用
    1.引入Dagger2
      1).配置apt插件(在build.gradle(Project:xxx)中添加如下代码)
        dependencies {
	   classpath 'com.android.tools.build:gradle:2.3.3'
	   //添加apt插件
	   classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
	}
      2).添加依赖(在build.gradle(Module:app)中添加如下代码)
        apply plugin: 'com.android.application'
        //添加如下代码，应用apt插件
        apply plugin: 'com.neenbedankt.android-apt'
        ...
        dependencies {
	   ...
	   compile 'com.google.dagger:dagger:2.9'
	   apt 'com.google.dagger:dagger-compiler:2.9'
	   //java注解
	   compile 'org.glassfish:javax.annotation:10.0-b28'
	   ...
	}


    2.在代码中使用
      


 ※ 其他使用方式   

     ...





 ※ 注意点
  


 ※ 参考
     https://www.jianshu.com/p/39d1df6c877d
     

----------------------------------------------------------------------------------------------------------------------------------------





