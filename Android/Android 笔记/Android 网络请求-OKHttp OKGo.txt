

网络请求发展史
----------------------------------------------------------------------------------------------------------------------------------

※ 网络请求发展史
   在没有OkHttp的日子, 我们使用的是HttpURLConnection或者HttpClient. 那么这两者都有什么优缺点呢? 为什么不在继续使用下去呢?
   HttpClient是Apache基金会的一个开源网络库, 功能十分强大, API数量众多, 但是正是由于庞大的API数量使得我们很难在不破坏兼容性的情况下对它进行升级和扩展,
   所以Android团队在提升和优化HttpClient方面的工作态度并不积极.
   HttpURLConnection是一种多用途, 轻量极的HTTP客户端, 提供的API比较简单, 可以容易地去使用和扩展. 不过在Android 2.2版本之前,
   HttpURLConnection一直存在着一些令人厌烦的bug. 比如说对一个可读的InputStream调用close()方法时，就有可能会导致连接池失效了。那么我们通常的解决办法就是直接禁用掉连接池的功能：
   因此, 一般的推荐是在2.2之前, 使用HttpClient, 因为其bug较少. 在2.2之后, 推荐使用HttpURLConnection, 因为API简单, 体积小, 并且有压缩和缓存机制, 并且Android团队一致在优化HttpURLConnection.
   后来, OkHttp出现了,OkHttp对比上面两个库显得强大很多, 因为OkHttp不仅具有高效的请求效率, 并且提供了很多开箱即用的网络疑难杂症解决方案.
   再后来, 从Android 4.4起, 其HttpURLConnection的内部实现已经变为OkHttp


----------------------------------------------------------------------------------------------------------------------------------



OKHttp3
----------------------------------------------------------------------------------------------------------------------------------

※ OKHttp介绍
   OKHttp是一个第三方类库，用于android中请求网络。

   这是一个开源项目,是安卓端最火热的轻量级框架,由移动支付Square公司贡献(该公司还贡献了Picasso和LeakCanary)
   用于替代HttpUrlConnection和Apache HttpClient(android API23 里已移除HttpClient)


※ 使用 Get请求（ OKHttp进行网络请求支持两种方，一种是同步请求，一种是异步请求 ）
   1.添加依赖
     compile 'com.squareup.okhttp3:okhttp:3.9.1'
   2.添加权限
     <uses-permission android:name="android.permission.INTERNET"/>

   3.Get 异步请求
     //1.创建okHttpClient对象
     OkHttpClient mOkHttpClient = new OkHttpClient();

     //2.构建Request
     Request request = new Request.Builder()
          .url("https://www.baidu.com/") //请求接口。如果需要传参拼接到接口后面。
          .build();

     //3.将Request封装为Call
     mOkHttpClient.newCall(request).enqueue(new Callback() {
         @Override
         public void onFailure(Call call, IOException e) {}

         @Override
         public void onResponse(Call call, Response response) throws IOException {
             //此时还是在子线程 且response.body()方法也必须放在子线程中
             final String res = response.body().string();
             if(response.isSuccessful()){
                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        tv.setText(res);
                    }
                });
             }
   3.Get 同步请求
     new Thread(new Runnable() {
       @Override
       public void run() {
        try {
            OkHttpClient client = new OkHttpClient();//创建OkHttpClient对象
            Request request = new Request.Builder()
                    .url("http://www.baidu.com")//请求接口。如果需要传参拼接到接口后面。
                    .build();//创建Request 对象
            Response response = null;
            response = client.newCall(request).execute();//得到Response 对象
            if (response.isSuccessful()) {
            Log.d("kwwl","response.code()=="+response.code());
            Log.d("kwwl","response.message()=="+response.message());
            Log.d("kwwl","res=="+response.body().string());
            //此时的代码执行在子线程，修改UI的操作请使用handler跳转到UI线程。
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
      }).start();
    }


  说明
   1.使用OKHttp进行网络请求支持两种方式，一种是同步请求，一种是异步请求
     同步Get mOkHttpClient.newCall(request).execute(...);
     异步Get mOkHttpClient.newCall(request).enqueue(...);

     注意事项：
     1. Response.code是http响应行中的code，如果访问成功则返回200.这个不是服务器设置的，而是http协议中自带的。res中的code才是服务器设置的。注意二者的区别。
     2. response.body().string()本质是输入流的读操作，所以它还是网络请求的一部分，所以这行代码必须放在子线程
     3. response.body().string()只能调用一次，在第一次时有返回值，第二次再调用时将会返回null。
        原因是：response.body().string()的本质是输入流的读操作，必须有服务器的输出流的写操作时客户端的读操作才能得到数据。而服务器的写操作只执行一次，所以客户端的读操作也只能执行一次，第二次将返回null。
     4.onFailure方法和onResponse执行在子线程。response.body().string()方法也必须放在子线程中。当执行这行代码得到结果后，再跳转到UI线程修改UI。



※ 使用 Post请求 （Post请求也分同步和异步两种方式，同步与异步的区别和get方法类似，所以此时只讲解post异步请求的使用方法）
   1.Post 异步请求
     OkHttpClient client = new OkHttpClient();//创建OkHttpClient对象。
     FormBody.Builder formBody = new FormBody.Builder();//创建表单请求体
     formBody.add("username","zhangsan");//传递键值对参数
     Request request = new Request.Builder()//创建Request 对象。
        .url("http://www.baidu.com")
        .post(formBody.build())//传递请求体
        .build();
     client.newCall(request).enqueue(new Callback() {。。。});//回调方法的使用与get异步请求相同，此时略。

  说明
   1.OKHttp默认是Get请求,当在Request.Builder对象创建时把请求方式修改为POST。此时就为POST请求。


  Post传递键值对参数
    OkHttpClient client = new OkHttpClient();//创建OkHttpClient对象。
    FormBody.Builder formBody = new FormBody.Builder();//创建表单请求体
    formBody.add("username","zhangsan");//传递键值对参数
    Request request = new Request.Builder()//创建Request 对象。
        .url("http://www.baidu.com")
        .post(formBody.build())//传递请求体
        .build();
    client.newCall(request).enqueue(new Callback() {。。。});//此处省略回调方法。


  Post传递Json对象
    ...
    MediaType jsonType = MediaType.parse("application/json; charset=utf-8");//数据类型为json格式，
    String jsonStr = "{\"username\":\"lisi\",\"nickname\":\"李四\"}";//json数据.
    RequestBody body = RequestBody.create(jsonType, josnStr);
    ...


  Post上传File对象
    ...
    MediaType fileType = MediaType.parse("File/*");
    File file = new File("path");//file对象.
    RequestBody body = RequestBody.create(fileType, file);
    ...


  Post上传多个File对象及多个值
    ...
    MultipartBody multipartBody =new MultipartBody.Builder()
     .setType(MultipartBody.FORM)
     .addFormDataPart("groupId",""+groupId)//添加键值对参数
     .addFormDataPart("title","title")
     .addFormDataPart("file",file.getName(),RequestBody.create(MediaType.parse("file/*"), file))//添加文件
     .build();
    ...


  自定义RequestBody实现流的上传
    RequestBody body = new RequestBody() {
      @Override
      public MediaType contentType() {
        return null;
      }

      @Override
      public void writeTo(BufferedSink sink) throws IOException {//重写writeTo方法
        FileInputStream fio= new FileInputStream(new File("fileName"));
        byte[] buffer = new byte[1024*8];
        if(fio.read(buffer) != -1){
           sink.write(buffer);
        }
      }
    };

   .....


※ OKHttp的初始化
    1.常见的初始化方式 并设置超时时间  OKHttp默认支持https和失败重连
      OkHttpClient.Builder builder = new OkHttpClient.Builder();
      //设置超时
      builder.connectTimeout(15, TimeUnit.SECONDS);
      builder.readTimeout(20, TimeUnit.SECONDS);
      builder.writeTimeout(20, TimeUnit.SECONDS);
      OkHttpClient mOkHttpClient=builder.build();

    2.设置请求头
      Request request = new Request.Builder()
         .url("https://api.github.com/repos/square/okhttp/issues")
         .header("User-Agent", "OkHttp Headers.java")
         .addHeader("Accept", "application/json; q=0.5") //如果想继续添加头部则使用addHeader
         .addHeader("Accept", "application/vnd.github.v3+json")
         .build();

    3.添加拦截器
      OkHttpClient okHttpClient = new OkHttpClient.Builder()
          .addInterceptor(appInterceptor)//Application拦截器
          .addNetworkInterceptor(networkInterceptor)//Network拦截器
          .build();

    4.设置Cookie持久化管理
      不带持久化的话，每次重启App都会需要重新登录，不可取。
      带持久化的写法:
      CookieHandler cookieHandler = new CookieManager(new PersistentCookieStore(context), CookiePolicy.ACCEPT_ALL);
      builder.cookieJar(new JavaNetCookieJar(cookieHandler));
      参数解释:
      JavaNetCookieJar:对CookieJar的封装实现，里面实现了对Cookie持久化存储和获取的调用逻辑，OkHttp已经帮我们实现了这个类，
                       需要引入下面这个包:compile 'com.squareup.okhttp3:okhttp-urlconnection:3.5.0'
      PersistentCookieStore:具体实现Cookie持久化的类，使用的是SharedPreferences，如果你想通过数据库实现持久化，也可以自己封装一个类似的类去实现。

      更加推荐: 一个Cookie持久化的第三方库（推荐）
      ClearableCookieJar cookieJar = new PersistentCookieJar(new SetCookieCache(), new SharedPrefsCookiePersistor(context));
      builder.cookieJar(cookieJar);
      需引入包: 1.在Project的build中的allprojects中添加 maven { url "https://jitpack.io" }
                2.在Modul的build添加 compile 'com.github.franmontiel:PersistentCookieJar:v1.0.0


※ OKHttp 下载文件
  在OKHttp中并没有提供下载文件的功能，但是在Response中可以获取流对象，有了流对象我们就可以自己实现文件的下载。代码如下：
  这段代码写在回调接口CallBack的onResponse方法中：
  try{
    InputStream  is = response.body().byteStream();//从服务器得到输入流对象
    long sum = 0;
    File dir = new File(mDestFileDir);
    if (!dir.exists()){
       dir.mkdirs();
    }
    File file = new File(dir, mdestFileName);//根据目录和文件名得到file对象
    FileOutputStream  fos = new FileOutputStream(file);
    byte[] buf = new byte[1024*8];
    int len = 0;
    while ((len = is.read(buf)) != -1){
       fos.write(buf, 0, len);
    }
    fos.flush();
    return file;
  }


※ OKHttp 的封装 已经加入到King-Tv的base中
     1.Get请求
     2.Post请求 键值对
     3.Post请求 Json数据
     4.上传文件
     5.下载文件   包含进度
     6.下载大文件  包含进度



※ demo位置: /demo/OkHttpdemo.zip
     1.Get请求
     2.Post方式请求 提交键值对格式的数据
     3.Post方式请求 提交Json格式的数据
     4.Post方式请求 提交流格式的数据 提交单个文件
     5.上传表单数据 有时上传文件同时还需要传其他类型的字段
     6.下载文件


 ※ 参考
    https://www.jianshu.com/p/2663ce3da0db
    http://blog.csdn.net/itachi85/article/details/51190687
    http://blog.csdn.net/my_rabbit/article/details/70213975


----------------------------------------------------------------------------------------------------------------------------------





OKHttp的 拦截器
----------------------------------------------------------------------------------------------------------------------------------

※ 介绍:
   拦截器是一种强大的机制,可以监视、重写和重试调用。
   我们可以用拦截器 添加我们自己的头部信息，设置有网请求，没网走缓存等。
   OkHttp中的拦截器有两种，一种是应用拦截器(Application Interception)，一种是网络拦截器(Network Interception)，
   Application Interceptor: 是在请求执行刚开始，还没有执行OkHttp的核心代码前进行拦截，
   Network Interception: 是在连接网络之前

   实际流程(自己测试):
    1.没有网络,没有请求过此接口, ->执行应用拦截器中request之后,response之前的代码 ->Get请求->结束  没有网络不会进入到网络拦截器
    2.有网络, ->执行应用拦截器中的request之后,response之前的代码 ->Get请求 ->执行完网络拦截器的request,response代码
              ->输入请求结果 -> 执行应用拦截器中esponse之后的代码 ->结束
    3.没有网络,已经请求过此接口, ->执行应用拦截器中request之后,response之前的代码 ->Get请求 ->执行网络拦截器的request之后,response之前的代码
              -> 报错 ->结束

    结论:
     1.没有网络时,不会进入应用拦截器和网络拦截器的response之后的代码

   根据上面的流程,在对应拦截器适合做的事情
    1.可以在网络数据请求之前, 在应用拦截器中修改request中的参数或者重定向
    2.在请求网络数据后,可以观察在网络上传输的数据. 可以对数据进行修改. 可以影响网络数据的请求结果
    3.可以对数据进行保存和缓存

   实例化一个拦截器
   Interceptor appInterceptor = new Interceptor() {
        @Override
        public Response intercept(Chain chain) throws IOException {
            Request request = chain.request();
            //---------请求之前------------
            Response response = chain.proceed(request1);
            //---------请求之后------------
            return response;
        }
   };


   拦截器的实际运用
    1、对所有的请求做统一的日志记录，不需要在每个请求开始或者结束的位置都添加一个日志操作。
    2、同意添加响应头 对请求参数进行统一加密处理。
    3、对请求或者返回参数设置统一的编码方式
    4、进行请求的重定向和重试
    5、一次性对请求的参数和返回的结果进行编码，比如统一设置为UTF-8.


   添加一个日志拦截器(官方已经写好了,所以自己不需要写什么处理)
   1.添加build
     compile 'com.squareup.okhttp3:logging-interceptor:3.8.1'
   2.添加代码
     HttpLoggingInterceptor logging = new HttpLoggingInterceptor();
     logging.setLevel(HttpLoggingInterceptor.Level.BODY);
     builder.addInterceptor(logging);


 ※ 参考
    http://blog.csdn.net/qq_30806949/article/details/52494414
    http://blog.csdn.net/muyi_amen/article/details/58586823


----------------------------------------------------------------------------------------------------------------------------------



OKHttp Cache
----------------------------------------------------------------------------------------------------------------------------------

※ OKHttp Cache
   OKHttp缓存, 在OKHttp中,我们可以通过拦截器实现数据缓存,并设置缓存时效,
   在规定时间内，客户端不再向远程请求数据，而是直接从本地缓存中取数据。
   这样一来提高了响应速度，二来节省了网络带宽

   案例:当有网络时,读取网络数据,并缓存数据,没有网络时,读取本地数据
    1.OKhttp 设置缓存文集及缓存大小,这里设置为10M,并添加拦截器
      Cache cache = new Cache(context.getCacheDir(), 10 * 1024 * 1024);
      builder.cache(cache);
      builder.addNetworkInterceptor(new NetCacheInterceptor());
      builder.addInterceptor(new LocalCacheInterceptor());

    2.本地缓存拦截器，请求前根据网络情况设置缓存是从本地缓存读取还是从网络请求获取
      public class LocalCacheInterceptor implements Interceptor {
        @Override
        public Response intercept(Chain chain) throws IOException {
            //如果没有网络,则设置数据从本地缓存读取,如果有网络,则清除Cache-Control,让数据从网络获取
            if (!NetworkUtil.isNetworkConnected(context)) {
                CacheControl cacheControl = new CacheControl.Builder().maxAge(Integer.MAX_VALUE, TimeUnit.SECONDS).maxStale(Integer.MAX_VALUE, TimeUnit.SECONDS).build();
                Request request = chain.request().newBuilder().cacheControl(cacheControl).build();
                return chain.proceed(request);
            }else{
                Request request = chain.request().newBuilder().removeHeader("Cache-Control").build();
                return chain.proceed(request);
            }
         }
      }

    3.网络缓存拦截器，设置缓存是从本地缓存读取还是从网络请求获取
    * 此方法主要用于请求数据后修改Cache-Control配置信息, 因为请求数据后,此数据有可能被更改,需要重新设置
      public class NetCacheInterceptor implements Interceptor {
        @Override
        public Response intercept(Chain chain) throws IOException {
            Response response = chain.proceed(chain.request());
           // max-age: 设置时间后, 代表这段时间内不管有没有网, 都读缓存
           // max-stale 设置网络未连接的情况下缓存时间
            CacheControl cacheControl = new CacheControl.Builder().maxAge(0, TimeUnit.SECONDS).maxStale(5, TimeUnit.DAYS).build();
            return response.newBuilder()
                    .header("Cache-Control", cacheControl.toString())
                    .removeHeader("Pragma").build();
        }
      }



 ※ 参考
    https://www.jianshu.com/p/3b8cf45a5be7


----------------------------------------------------------------------------------------------------------------------------------




okhttp-OkGo 3.0
----------------------------------------------------------------------------------------------------------------------------------

※ 介绍
   基于Http协议，封装了OkHttp的网络请求框架，
   比Retrofit更简单易用，支持 RxJava，RxJava2，支持自定义缓存，支持批量断点下载管理和批量上传管理功能

   项目：https://github.com/jeasonlzy/okhttp-OkGo
   文档：https://github.com/jeasonlzy/okhttp-OkGo/wiki


 ※ 使用
    1.build.gradle导入
      //必须使用
      compile 'com.lzy.net:okgo:3.0.4'

      //以下按需添加，okrx和okrx2不能同时使用
      compile 'com.lzy.net:okrx:1.0.2'
      compile 'com.lzy.net:okrx2:2.0.2'
      compile 'com.lzy.net:okserver:2.0.5' //OkGo上传下载扩展库


    2.OkGo全局配置
      一般在Aplication，或者基类中配置，只需要调用一次即可
      可以配置Log拦截器、全局的超时时间、全局cookie管理策略、
      Https证书配置、超时重连次数、公共的请求头和请求参数等信息

      OkHttpClient.Builder builder = new OkHttpClient.Builder();
      builder.connectTimeout(10000, TimeUnit.MILLISECONDS); //全局的连接超时时间
      builder.readTimeout(10000, TimeUnit.MILLISECONDS);    //全局的读取超时时间
      builder.writeTimeout(10000, TimeUnit.MILLISECONDS);   //全局的写入超时时间 对这三种时间的详细解释见
      builder.cookieJar(new CookieJarImpl(new MemoryCookieStore())); //使用内存保持cookie，APP退出后，cookie消失
      builder.retryOnConnectionFailure(true);

      //---------这里给出的是示例代码,告诉你可以这么传,实际使用的时候,根据需要传,不需要就不传-------------//
      HttpHeaders headers = new HttpHeaders();
      headers.put("commonHeaderKey1", "commonHeaderValue1");    //header不支持中文，不允许有特殊字符
      headers.put("commonHeaderKey2", "commonHeaderValue2");
      HttpParams params = new HttpParams();
      params.put("commonParamsKey1", "commonParamsValue1");     //param支持中文,直接传,不要自己编码
      params.put("commonParamsKey2", "这里支持中文参数");
      //-------------------------------------------------------------------------------------//

      OkGo.getInstance().init(AppContext.sInstance)
          .setOkHttpClient(builder.build())
          .setCacheMode(CacheMode.NO_CACHE)  //全局统一缓存模式，默认不使用缓存，可以不传
          .setRetryCount(1);                 //全局统一超时重连次数，默认为三次，那么最差的情况会请求4次(一次原始请求，三次重连请求)，不需要可以设置为0
      //  .addCommonHeaders(headers)         //全局公共头
      //  .addCommonParams(params);          //全局公共参数

    3.Get与Post请求
      OkGo.<String>get(Urls.URL_REDIRECT)//
                .tag(this)//
                .headers("header1", "headerValue1")//
                .params("param1", "paramValue1")//
                .execute(new StringCallback(this) {
                    @Override
                    public void onSuccess(Response<String> response) {
                        handleResponse(response);
                        responseData.setText("注意看请求头的url和响应头的url是不一样的！\n这代表了在请求过程中发生了重定向，" +//
                                             "okhttp默认将重定向封装在了请求内部，只有最后一次请求的数据会被真正的请求下来触发回调，中间过程" +//
                                             "是默认实现的，不会触发回调！");
                    }

                    @Override
                    public void onError(Response<String> response) {
                        handleError(response);
                    }
                });


       OkGo.<String>post(Urls.URL_METHOD)//
                        .tag(this)//
                        .headers("header1", "headerValue1")//
                        .params("param1", "paramValue1")//
                        .params("param2", "paramValue2")//
                        .params("param3", "paramValue3")//
                        .execute(Response<String> response) {
                            @Override
                            public void onSuccess(Response<String> response) {
                                handleResponse(response);
                            }

                            @Override
                            public void onError(Response<String> response) {
                                handleError(response);
                            }
                        });



 ※ OkGo上传下载扩展库介绍：
   下载扩展库：OkDownload与OkGo的区别就是，OkGo只是简单的做一个下载功能，不具备断点下载，暂停等操作，但是这在很多时候已经能满足需要了。
             而有些app需要有一个下载列表的功能，就像迅雷下载一样，每个下载任务可以暂停，可以继续，可以重新下载，可以有下载优先级，这时候OkDownload就有用了。
   上传扩展库：OkUpload与OkGo的区别就是，OkGo只是简单的做一个上传功能。OkUpload是具有上传管理功能，可以让很多任务有序上传，并且能记录上传状态

   PostRequest<String> postRequest = OkGo.<String>post("http://www.mytoday.net/api/public/?service=Video.uploadvideo")
                .params("uid", "13640")
                .params("token", "0e6371c5a642e8b48748a4d994303473")
                .params("file", videoUploadBean.getVideoFile())
                .params("file1", videoUploadBean.getImageFile())
                .converter(new StringConvert());
   UploadTask<String> mTask = OkUpload.request(TAG, postRequest)
                .save()
                .register(new UploadListener<String>(TAG) {
                    @Override
                    public void onStart(Progress progress) {
                        L.e(TAG, "onStart------progress----->" + progress.fraction * 100);
                    }

                    @Override
                    public void onProgress(Progress progress) {
                        L.e(TAG, "onProgress------progress----->" + progress.fraction * 100);
                    }

                    @Override
                    public void onError(Progress progress) {
                        L.e(TAG, "onProgress------progress----->" + progress.fraction * 100);
                    }

                    @Override
                    public void onFinish(String s, Progress progress) {
                        L.e(TAG, "onFinish------progress----->" + progress.fraction * 100);
                        L.e(TAG, "onFinish------s----->" + s);

                    }

                    @Override
                    public void onRemove(Progress progress) {
                        L.e(TAG, "onRemove------progress----->" + progress);
                        if (callback != null) {
                            callback.onFailure();
                        }
                    }
                });
        mTask.start();

----------------------------------------------------------------------------------------------------------------------------------


网络抓包 https://github.com/jeasonlzy/okhttp-OkGo/wiki#%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85