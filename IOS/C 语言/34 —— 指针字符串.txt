




指针字符串的声明.
-------------------------------------------------------------------------------------------------------------------

※ 指针字符串的声明有两种方式

      char name[] = "jack"; // 字符数组声明字符串
      char *name = "jack";  // 字符指针声明

      printf("name=%s\n", name); //name=jack




※ 两种方式的区别

   1).局部变量时.
       char name1[] = "jack";
       char *name2  = "rose";

      1.name1 声明在栈区. 每1个元素存储在这个字符数据中。
      2.name2 声明在栈区，字符串数据存储在常量区


   2).全局变量时.
       char name1[] = "jack";
       char *name2  = "rose";

      1.name1 存储在常量区 .每1个元素存储在这个字符数据中。
      2.name2 存储在常量区，字符串数据存储在常量区
        name2 指针中存储的是"rose"这个字符串在常量区的地址。




※ 指针字符串 的 原理
    1).当用指针字符串创建字符串时，并不是直接将字符串存储到常量区。
       而是先检查常量区是否有相同内容字符串，
       如果有，直接将这个字符串的地址拿过来返回。
       如果没有，才会将这个字符串数据存储在常量区

       char *name1 = "jack";
       char *name2 = "jack";
       char *name3 = "jack"; //name1、name2、name3的地址一样


    2) 当我们重新为字符指针初始化1个字符串的时候，并不是修改原来的字符串。
       而是重新的创建1个字符串，然后把这个新的字符串的地址赋值给它。

       char *name = "jack";
       name = "rose"; 这样是可以的。但不是把"jack"改成了"rose",
	              而是重新创建了1个"rose"，把"rose",赋值给name


    3)容易蒙圈的地方

        a. char *name = "jack";
	         *name = "rose"; //会报错。这样是不可以的
           name = "rose";  //这样是可以的

	b. char name[] = "jack";
	   name = "rose"; //报错。name是数组名 代表数组的地址。不能为数组名赋值。



※ 指针字符串优势。
    1.长度不固定。可以任意改变其存储的值



※ 面试题。找出e有多少个
   char *str = "edasfweasejwiejwehajhfajf";
   int count = 0;
   int i++;
   while(*(str+i) != '\0'){
      if(str[i] == 'e'){ //*(str+1)等于str[i]
         count++;

      }
      i++;
   }
   printf("count = %d\b", count);


-------------------------------------------------------------------------------------------------------------------
