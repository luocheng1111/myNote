


结构体
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

※ 为什么会有结构体？ 他是干什么的？
   我们学习了很多数据类型，int、char、float、数组、指针。。。
   不同的数据类型是用来保存不同类型的数据，
   比如，年龄，int age = 18;
        身高. float hight = 1.76;
	    一组数字. int nums = [20,30,40,66];
    
   但现在我想表示1个学生，发现上面的类都用不上，
   于是乎，结构体的作用体现了出来。。。


※ 结构体的声明和赋值
    方式一：
     struct Student  {
	   char *name;
	   int age;
	   int score;
	   float height;
     }
    
     //结构体的声明
     struct Student jackStu; //这个stu变量类型是struct Student而不是Student

     //结构体的初始化，赋值
     stu.name = "jack";
     stu.age = 16;
     stu.score = 100;
     stu.height = 1.72;
    
     //结构体值的使用
     print("姓名:%s, 年龄:%d", jackStu.name, jackStu.age);

    方式二：创建的同时声明变量
     struct Computer  {
        char *logo;
        char *cpuModel;
        int memSize;
        int *brand;
     } iMac, lenvol, hp, dell;

     iMac.logo = "Mac";
     iMac.cpuModel = "i7";
     ...

     lenvol.logo = "lenvol";
     ...

    方式三：匿名结构体
    struct {
        char *logo;
        char *cpuModel;
        int memSize;
        int *brand;
    } hp, dell;

    hp.logo = "hp";
    hp.cpuModel = "i7";
    ...
    


※ 结构体的几种初始化方式
   1.先声明变量，再1个1个为成员变量赋值
     struct Student jackStu;
     stu.name = "jack";
     stu.age = 16;
     stu.score = 92;

   2.声明的同时厨初始化
     struct Student stu = {"小花", 17, 88};
     struct Student stu = {"李雪"}; //后面其他的数值会默认初始化为0

   3.指定成员初始化
     struct Student stu = {.name="吉姆", .age=17, .score=100};
 


 ※ 结构体成员变量的默认值
    1.声明1个结构体变量，如果没有为其成员变量赋值，那么成员变量默认是辣鸡值
    2.只要在声明结构体变量的同时，只要初始化1个成员，其他成员即使没给值，也会被初始化为0。


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




结构体数组
-------------------------------------------------------------------------------------------------------------------

※ 结构体数组有什么用？什么时候可以用到
  当我们想同时声明多个学生时就会用到结构体数组


※ 结构体数组 的 使用
    struct Student  {
	   char *name;
	   int age;
	   int score;
    }
    
    struct Student s1 = {"小明1", 16, 56};
    struct Student s2 = {"小明2", 15, 76};
    struct Student s3 = {"小明3", 17, 83};
    
    struct Student students[3];
    students[0] = s1;
    students[1] = s2;
    students[2] = s3;


※ 结构体数组 的 初始化方式
    1).声明后挨个赋值
       例子见上方
    
    2).声明的时候赋值
       struct Student students[] ={
           {"小明1", 16, 56},
	       {"小明2", 15, 76},
	       {"小明3", 17, 83}
       };
    
    3).先声明在赋值
       struct Student students[3];
       students[0] = (struct Student){"小明1", 16, 56};
       students[1] = (struct Student){"小明2", 15, 76};
       students[2] = (struct Student){"小明3", 17, 83};


※ 结构体数组 的 长度计算
    int len = sizeof(students)/sizeof(struct Student);


-------------------------------------------------------------------------------------------------------------------



结构体指针
-------------------------------------------------------------------------------------------------------------------

※ 结构体指针 的 使用
    struct Student  {
	   char *name;
	   int age;
	   int score;
    }
    
    struct Student xiaoMing = {"小明1", 16, 56};
    struct Student *pStu = &xiaoMing;
    
    //方式一：因为小数点优先级高，所以要加()
    (*pStu).age = 18;

    //方式二：
    pSt->age = 19;
    
    printf("age = &d\n", xiaoMing.age);


-------------------------------------------------------------------------------------------------------------------



结构体与函数
-------------------------------------------------------------------------------------------------------------------

※ 结构体与函数
   1.结构体作为函数的参数
   2.结构体作为函数的返回值
    


※ 结构体 作为 函数的参数
    值传递
    如果想在参数内部改变值，则可以使用结构体指针作为参数



※ 结构体 为函数的 返回值
    可以直接返回

    struct Student getRoseStudent(){
        struct Student s1 = {"rose", 16, 100};
	   return s1;
    }

    int main(){
	   struct Student s1 = getRoseStudent();
	   printf("name = &s\n", s1.name);
	   return 0;
    }


-------------------------------------------------------------------------------------------------------------------
