




原码、反码、补码
-------------------------------------------------------------------------------------------------------------------

※ 原码、反码、补码介绍
   1.无论任何数据，在内存中存储的时候都是以二进制的形式存储的。
     原码、反码、补码都是二进制，只不过是二进制的不同的表示形式。
     数据是以补码的二进制存储的。

   2.1个int类型的变量，在内存中占据4个字节，32位.
     00000000 00000000 00000000 00000000

     最高位表示正负性
     如果最高位是0，表示这个数是1个正数
     如果最高位是1，表示这个数是1个负数
     所以，来表示数据的只有31位，所以，1个int类型的变量。
     最小值是: -2147483648 最大值是:2147483648 （2^31）



 ※ 原码
     最高位表示符号位. 剩下的位数. 是这个数的绝对值的二进制

     10的原码.
      00000000 00000000 00000000 00001010

     -8的原码.
      10000000 00000000 00000000 00001000

     -20的原码.
      10000000 00000000 00000000 00010100


 ※ 反码
     正数的反码就是其原码.
     负数的反码就是在其原码的基础上 符号位不变,其他位取反.

     10的原码：00000000 00000000 00000000 00001010
     10的反码：01111111 11111111 11111111 11110101


     -8的原码：10000000 00000000 00000000 00001000
     -8的反码：11111111 11111111 11111111 11110111

     -20的原码：10000000 00000000 00000000 00010100
     -20的反码：11111111 11111111 11111111 11101011


 ※ 补码
     正数的补码就是其原码.
     负数的补码就是在其反码的基础上+1

     10的原码：00000000 00000000 00000000 00001010
     10的反码：00000000 00000000 00000000 00001010
     10的补码：00000000 00000000 00000000 00001010

     -8的原码：10000000 00000000 00000000 00001000
     -8的反码：11111111 11111111 11111111 11110111
     -8的反码：11111111 11111111 11111111 11111000

     -20的原码：10000000 00000000 00000000 00010100
     -20的反码：11111111 11111111 11111111 11101011
     -20的反码：11111111 11111111 11111111 11101100



 ※ 为什么数据要以补码的形式存储呢？
     因为计算机中只有加法没有减法，为了更加低成本的计算出结果，所以使用补码来存储数据。
     这样计算的效率最好，对比如下

     计算机会把3-2当作3+(-2)来理解，来计算

     效率对比：

     原码计算：
      3的原码  00000000 00000000 00000000 00000011
     -2的原码  10000000 00000000 00000000 00000010
    ----------------------------------------------
       结果    10000000 00000000 00000000 00000101 结果是1个负数，明显结果不对



     反码计算：
      3的反码  00000000 00000000 00000000 00000011
     -2的反码  11111111 11111111 11111111 11111101
    ----------------------------------------------
       结果    00000000 00000000 00000000 00000000 结果是0，结果不对



     补码计算：
      3的补码  00000000 00000000 00000000 00000011
     -2的补码  11111111 11111111 11111111 11111110
    ----------------------------------------------
       结果    10000000 00000000 00000000 00000001 结果是1，


    因为计算机中只有加法没有减法，为了更加低成本的计算出结果，所以使用补码来存储数据。
    这样计算的效率最好


-------------------------------------------------------------------------------------------------------------------
