




-------------------------------------------------------------------------------------------------------------------

※ 字节是什么？存储的最小基本单位
    内存是由一个一个的二进制位组成的，每一个二进制位只能存储0或者1.
    如果我们使用1个二进制位来存储数据的话，这样的话，每1个二进制位只能表示2个数据。
    科学家为了能够更加方便的存储更多的数据。
    他们就把内存中的8个二进制位分为1组，叫做1个字节。
    做为存储数据的最小基本单位

    如果你要往内存中存储数据的话，就至少要使用1个字节。也就是8个二进制位。
    这个时候，1个字节最多表示256种数据，那么使用字节来存储数据的话，存储的数据就会多1些了

    重点：
     内存是由一个一个的二进制位组成的，，每1个二进制位只能存储0或者1，只能表示2个数据，
     为了更加方便的存储数据，科学家将将8个二进制位分为1组，作为存储数据的最小基本单位。叫做字节。
     1个字节最多表示256种数据。



 ※ 单位换算
     8bit = 1个字节. byte
     1024字节 = 1KB
     1024KB = 1MB
     1024MB = 1GB
     1024GB = 1TB

     8G: 8 * 1024 *1024 * 1024 * 8 bit




※ 变量的地址 - 变量在内存中的存储方式.
    变量的地址都是唯一的，一个地址代表1个字节，地址是16进制表示，比如0x123af
    1.在为变量分配字节空间的时候，分配的顺序是从高到低地址分配，分配连续的指定字节数空间
      比如int就分配4个连续的地址,分配的顺序从高到低

    2.存储的数据是以二进制不嘛的形式存储进去的。
      存储的时候，是低位存储在低字节，高位存储在高字节
      10的补码：
       00000000 00000000 00000000 00001010 右边是低位，左边是高位

      假设空间有10个地址为0x121到0x12d
      那么10存储的数据是
      00000000 地址是 0x12d
      00000000 地址是 0x129
      00000000 地址是 0x125
      00001010 地址是 0x121

      但取地址是10的地址取最低位，10的地址是0x127


※ 变量在内存中的存储方式
    1.不同类型的变量在内存中占据不同的字节数。
      1个变量占用的字节一定是连续的。
      int    占4个字节
      float  占4个字节
      double 占8个字节
      char   占1个字节

    2.在为变量分配字节空间的时候，是从高地址向低地址分配的连续空间。
      先声明的变量是在高字节，后声明的变量是在低字节

    3.任何数据在内存中都是以其二进制的补码存储的。
      低位存储在低字节。高位存储在高字节

    4.每1个字节在内存中都有1个地址，16进制数。
      变量的地址：是组成这个变量的低字节的地址

    5.使用&取地址运算符可以直接拿到变量的地址

    6.使用%p打印地址类型的数据。



 ※ 取出变量的地址
     int num1 = 10;
     int num2 = 20;
     char ch = 'a';
     printf("num1的地址是:%p\n", &num1); //num1的地址是:0x127
     printf("num2的地址是:%p\n", &num2); //num2的地址是:0x123
     printf("ch的地址是:%p\n", &ch); //ch的地址是:0x122

     理想情况下。上面的地址是这样分配的
     但实际上，由于程序在运行时或许自己会声明其他的变量，所以上面的地址只是理想情况下。
     但思路是这个思路没错了



-------------------------------------------------------------------------------------------------------------------

