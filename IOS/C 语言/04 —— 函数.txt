



函数
-------------------------------------------------------------------------------------------------------------------

※ 介绍
   类似于方法，语法为
   函数返回值类型 函数名(形参列表){
	   ....
   }


※ 栗子：
    int add(int num1, int num2, int num3)
    {
       int num = num1+num2+num3;
       return num;
    };


    int main(){
       int count = add(10, 20, 30);
       printf("总和是:%d", count);
    }

-------------------------------------------------------------------------------------------------------------------



函数声明
----------------------------------------------------------------------------------------------------------------------------------------

※ 介绍
  因为程序从上往下运行，如果在函数在调用的后面，程序就会找不到这个方法。导致报错，所以需要函数声明


※ 函数的声明：
    #include <stdio.h>

    //1.函数的声明
    int add(int num1, int num2, int num3);

    int main(...){
	     int count = add(10, 20, 30);
	     printf("总和是:%d", count);
    }

    //2.函数的实现
    int add(int num1, int num2, int num3){
       int num = num1+num2+num3;
       return num;
    };


----------------------------------------------------------------------------------------------------------------------------------------



内部函数、外部函数
----------------------------------------------------------------------------------------------------------------------------------------
  ※ 介绍
      内部函数：static修饰的函数，该函数只能被当前源文件中的其他函数所调用，这种函数称为内部函数
      外部函数：extern修饰的函数，默认不加就是这种函数，它可以被任何源文件中的函数调用，这种函数称为外部函数


  ※ 例：外部函数
      //PrintFunction.m 文件
      extern void printRect(int msg){
         .....
      }

      //PrintMain.m 文件
      int main(int argc, char *argv[]){
        //声明
        void printRect(int);
        //调用
        printRect(7);
      }


----------------------------------------------------------------------------------------------------------------------------------------



函参的传递
----------------------------------------------------------------------------------------------------------------------------------------

※ 介绍
   函参传值有两种模式：值传递、地址传递

   值传递：函参传递是一个 复制值 的过程，是将实参的值复制给形参，不管函数内部对这个参数怎样操作，都对实参没有任何影响
         值传递的数据类型有：数据基本类型(int、float、double、char)、结构体、枚举。

   地址传递：函参传递了实参的地址，如果函数内部对参数的值进行修改，实参的值也进行了修改
           地址传递的数据类型有：数组、指针。


   a.当函数的参数类型是 int char float double的时候，参数传递是值传递
   b.但函数的参数类型是 数组的时候，参数的传递是地址传递
   c.但函数的参数类型是 指针的时候，参数的传递是地址传递


----------------------------------------------------------------------------------------------------------------------------------------





全局变量和局部变量
----------------------------------------------------------------------------------------------------------------------------------------

※ 介绍
    局部变量：定义在函数内部的变量，叫做局部变量
    全局变量：定义在函数外部的变量，叫做全局变量



※ 区别
    相同点：
      都是变量，都是在内存中开辟一块空间来存储数据。

    不同点：
     1.声明位置不同：
       局部声明在函数内部, 而全局变量声明在函数的外面

     2.作用域不同：
       局部变量：只能在当前函数内部访问
       全局变量：从定义这个全局变量的地方开始，后面所有的函数中都可以反问这个全局变量

     3.默认值不同：
       如果他们都没设置初始值，
       局部变量默认值则是1个垃圾数(随机数)，
       全局变量如果是的默认值 int的默认值是0，double和float是0.000000,char是ASCII码0

     4.创建和回收的时间不同
       局部变量：CPU执行到局部变量时，才会在内存中声明，当作用域结束以后，就会自动回收
       全局变量：程序一起动，就在内存中创建全局变量。程序结束的时候，全局变量才会被回收



----------------------------------------------------------------------------------------------------------------------------------------














