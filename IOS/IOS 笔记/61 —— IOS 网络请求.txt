


IOS网络请求
----------------------------------------------------------------------------------------------------------------------------------------

※ 介绍
   IOS网络请求目前有NSURLConnection/NSSession/AFNetwork 3种网络请求方式

   NSSession：在iOS9.0之后，NSSession替代以前使用的NSURLConnection，NSURLConnection退出历史舞台
   AFNetwork：AFNetworking是一个开源的第三方轻量级网络通信库。它建立在NSURLConnection和NSOperation等类库的基础上，让很多网络通信功能的实现变得十分简单。
              它支持HTTP请求和基于REST的网络服务（包括GET、POST、 PUT、DELETE等）。支持ARC。


※ GET请求和POST请求的区别：
   1.GET请求的接口会包含参数部分，参数会作为网址的一部分，服务器地址与参数之间通过 ? 来间隔。
     POST请求会将服务器地址与参数分开，请求接口中只有服务器地址，而参数会作为请求的一部分，提交后台服务器。
   2.GET请求参数会出现在接口中，不安全。而POST请求相对安全。
   3.虽然GET请求和POST请求都可以用来请求和提交数据，但是一般的GET多用于从后台请求数据，
     POST多用于向后台提交数据。


※ 同步和异步的区别：
   同步链接：主线程去请求数据，当数据请求完毕之前，其他线程一律不响应，会造成程序就假死现象。
   异步链接：会单独开一个线程去处理网络请求，主线程依然处于可交互状态,程序运行流畅。



※ NSURLSession 网络数据的写法  Demo见：\Demo\NSURLSession
   1.在配置文件中加请求网络权限
   2.编写代码

   GET请求：
     NSURL *url = [NSURL URLWithString:@"http://www.weather.com.cn/data/sk/101010100.html"];
     NSURLRequest *request = [NSURLRequest requestWithURL:url];
     NSURLSessionDataTask *dataTask = [[NSURLSession sharedSession] dataTaskWithRequest:request completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) {
        //获取的内容是字符串
        NSString *str=[[NSString alloc]initWithData:data encoding:NSUTF8StringEncoding];
        NSLog(@"%@",str);
     }];
     [dataTask resume];


   POST请求：
     NSURL *url = [NSURL URLWithString:@"http://121.43.59.5:8011/httptest.aspx"];
     NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
     request.HTTPMethod = @"POST";
     request.HTTPBody = nil;

     NSURLSessionDataTask *dataTask = [[NSURLSession sharedSession] dataTaskWithRequest:request completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) {
        if(error == nil){
            NSString *result = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
            NSLog(@"%@", result);
        }
     }];

     [dataTask resume];



※ AFNetwork 网络请求 第三方库的使用
   1.在配置文件中加请求网络权限
   2.导入AFNetwork文件，可以去 Github地址：https://github.com/AFNetworking/AFNetworking 下载
     然后将AFNetworking文件夹复制到项目中就可以使用了
   3.#import AFNetworking.h
   写法见 Demo \Demo\AFNetwork_study01


   GET请求：
     AFHTTPSessionManager *manager =[AFHTTPSessionManager manager];
     NSDictionary *dict = @{
        @"username":@"520it",
        @"pwd":@"520it"
        };
     //添加请求Head
     manager.requestSerializer = [AFJSONRequestSerializer serializer];
     [manager.requestSerializer setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
     [manager GET:@"http://120.25.226.186:32812/login" parameters:dict progress:^(NSProgress * _Nonnull downloadProgress) {
        //进度
        //进度
     } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        // task 我们可以通过task拿到响应头
        // responseObject:请求成功返回的响应结果（AFN内部已经把响应体转换为OC对象，通常是字典或数组)

        //根据状态吗

     } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        // error 错误信息
     }];



   POST请求：
    AFHTTPSessionManager *manager =[AFHTTPSessionManager manager];
    NSDictionary *dict = @{
                           @"username":@"520it",
                           @"pwd":@"520it"
                           };
    [manager POST:@"http://120.25.226.186:32812/login" parameters:dict progress:^(NSProgress * _Nonnull downloadProgress) {
        // 进度
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        // 请求成功
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        // 请求失败
    }];





   文件下载：
    // 1.创建一个管理者
    AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];
    // 2. 创建请求对象
    NSURL *url = [NSURL URLWithString:@"http://120.25.226.186:32812/resources/images/minion_03.png"];
    NSURLRequest *request =[NSURLRequest requestWithURL:url];
    // 3. 下载文件
    NSURLSessionDownloadTask *downloadTask = [manager downloadTaskWithRequest:request progress:^(NSProgress * _Nonnull downloadProgress) {
    // downloadProgress.completedUnitCount 当前下载大小
    // downloadProgress.totalUnitCount 总大小
    NSLog(@"%f", 1.0 * downloadProgress.completedUnitCount / downloadProgress.totalUnitCount);
    } destination:^NSURL * _Nonnull(NSURL * _Nonnull targetPath, NSURLResponse * _Nonnull response) {
        // targetPath  临时存储地址
        NSLog(@"targetPath:%@",targetPath);
        NSString *path =[NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) lastObject];
        NSString *filePath = [path stringByAppendingPathComponent:response.suggestedFilename];
        NSURL *url = [NSURL fileURLWithPath:filePath];
        NSLog(@"path:%@",filePath);
        // 返回url 我们想要存储的地址
        // response 响应头
        return url;
    } completionHandler:^(NSURLResponse * _Nonnull response, NSURL * _Nullable filePath, NSError * _Nullable error) {
        // 下载完成之后调用
        // response 响应头
        // filePath 下载存储地址
        NSLog(@"filePath:%@",filePath);
    }];
    // 需要手动开启
    [downloadTask resume];


   注意点：
   1.AFNetwork默认提交请求的数据是二进制的,返回格式是JSON
     如果需要更改，则设置如下属性
     // 设置请求格式
     manager.requestSerializer = [AFJSONRequestSerializer serializer];
     // 设置返回格式
     manager.responseSerializer = [AFHTTPResponseSerializer serializer];

    请求格式
     AFHTTPRequestSerializer            二进制格式
     AFJSONRequestSerializer            JSON
     AFPropertyListRequestSerializer    PList(是一种特殊的XML,解析起来相对容易)

    返回格式
     AFHTTPResponseSerializer           二进制格式
     AFJSONResponseSerializer           JSON
     AFXMLParserResponseSerializer      XML,只能返回XMLParser,还需要自己通过代理方法解析
     AFXMLDocumentResponseSerializer (Mac OS X)
     AFPropertyListResponseSerializer   PList
     AFImageResponseSerializer          Image
     AFCompoundResponseSerializer       组合


※ 学习：
   NSURLSession和AFN请求 http://www.jianshu.com/p/28cc386fd460
   为什么要使用NSURLSession而不是NSURLConnection http://www.cocoachina.com/ios/20160202/15211.html

   AFNetwork请求的写法
    http://www.jianshu.com/p/d94cb6b58573
    http://blog.csdn.net/codywangziham01/article/details/38088017

----------------------------------------------------------------------------------------------------------------------------------------
