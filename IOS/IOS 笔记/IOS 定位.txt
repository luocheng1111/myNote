


IOS 定位
----------------------------------------------------------------------------------------------------------------------------------------

※ 介绍
   用的是高德的定位API，高德定位有两种写法，一种是单次定位 一种是连续定位 两种方式的写法有些许区别
   单次定位一般用于不是结合地图使用，而是仅需要获取当前用户的位置的需求
   连续定位一般结合地图使用，此功能高德地图API小蓝点已结合实现了此功能
   开发指南：http://lbs.amap.com/api/ios-location-sdk/guide/additional-func/local-geofence
   控制台：http://lbs.amap.com/dev/key/app


※ 获取当前经纬度 单次定位
    1.配置SDK和权限
      1.安装CocoaPods
      2.使用CocoaPods 安装相关SDK
        target ‘XXX’ do

        #3D地图SDK
        pod 'AMap3DMap'

        #地图SDK搜索功能
        pod 'AMapSearch'

        #定位SDK
        pod 'AMapLocation'

        end
      3.项目的info.plist中添加 4个权限相关的设置以及网络权限
        Required background modes
           Item 0                                                     App registers for location updates
        Privacy - Location Always Usage Description                   AMapLocationKit需要定位权限才可以使用
        Privacy - Location Always and When In Use Usage  Description  AMapLocationKit需要定位权限才可以正常使用，如果您需要使用后台定位功能请选择“始终允许”。
        Privacy - Location When In Use Usage Description              AMapLocationKit需要定位权限才可以正常使用
        App Transport Security Settings
           Allow Arbitrary Loads                                      YES

    2.单次定位并显示在地图上
      1.添加配置高德Key
        AppDelegate.m文件
        #import <AMapFoundationKit/AMapFoundationKit.h>
        - (BOOL)application: didFinishLaunchingWithOptions: {
             [[AMapServices sharedServices] setEnableHTTPS:YES];
             [AMapServices sharedServices].apiKey = @"9fab196b7d1441f322e524cce50548d8"; //在http://lbs.amap.com/dev/key/app 申请
             return YES;
        }

      2.单次定位
        ViewController.m文件
        #import <AMapFoundationKit/AMapFoundationKit.h>
        #import <AMapLocationKit/AMapLocationKit.h>
        - (void)viewDidLoad{
            [super viewDidLoad];

            self.locationManager = [[AMapLocationManager alloc] init];
            [self.locationManager setDelegate:self];
            //设置期望定位精度
            [self.locationManager setDesiredAccuracy:kCLLocationAccuracyHundredMeters];
            //设置不允许系统暂停定位
            [self.locationManager setPausesLocationUpdatesAutomatically:NO];
            //设置允许在后台定位
            [self.locationManager setAllowsBackgroundLocationUpdates:YES];
            //设置定位超时时间
            [self.locationManager setLocationTimeout:10];
            //设置逆地理超时时间
            [self.locationManager setReGeocodeTimeout:5];

            //开始定位 YES：代表返回具体的地理信息 NO：只会返回经纬度信息
            [self.locationManager requestLocationWithReGeocode:YES completionBlock:^(CLLocation *location, AMapLocationReGeocode *regeocode, NSError *error) {
                if (error != nil && error.code == AMapLocationErrorLocateFailed){
                    //定位错误：此时location和regeocode没有返回值，不进行annotation的添加
                    NSLog(@"定位错误:{%ld - %@};", (long)error.code, error.localizedDescription);
                    return;
                }
                else if (error != nil
                    && (error.code == AMapLocationErrorReGeocodeFailed
                        || error.code == AMapLocationErrorTimeOut
                        || error.code == AMapLocationErrorCannotFindHost
                        || error.code == AMapLocationErrorBadURL
                        || error.code == AMapLocationErrorNotConnectedToInternet
                        || error.code == AMapLocationErrorCannotConnectToHost))
                {
                    //逆地理错误：在带逆地理的单次定位中，逆地理过程可能发生错误，此时location有返回值，regeocode无返回值，进行annotation的添加
                    NSLog(@"逆地理错误:{%ld - %@};", (long)error.code, error.localizedDescription);
                }else if (error != nil && error.code == AMapLocationErrorRiskOfFakeLocation){
                    //存在虚拟定位的风险：此时location和regeocode没有返回值，不进行annotation的添加
                    NSLog(@"存在虚拟定位的风险:{%ld - %@};", (long)error.code, error.localizedDescription);
                    return;
                }else{
                    //没有错误：location有返回值，regeocode是否有返回值取决于是否进行逆地理操作，进行annotation的添加
                }

                if (regeocode){
                    NSLog(@"%@ \n %@-%@-%.2fm", regeocode.formattedAddress,regeocode.citycode, regeocode.adcode, location.horizontalAccuracy);
                }else{
                    NSLog(@"lat:%f;lon:%f \n accuracy:%.2fm", , location.coordinate.latitude, location.coordinate.longitude, location.horizontalAccuracy);
                }

                //如何想将定位点显示在地图上，可在此后续添加相应代码
                [... addAno...];
            }];
        }



※ 连续定位(注：地图API的小蓝底已带此功能)
    1.配置SDK和权限
        ...(与单次定位一样)

    2.单次定位并显示在地图上
      1.添加配置高德Key
        ...(与单次定位一样)

      2.连续定位
        ViewController.m文件
        #import <AMapFoundationKit/AMapFoundationKit.h>
        #import <AMapLocationKit/AMapLocationKit.h>
        - (void)viewDidLoad{
            [super viewDidLoad];

            self.mapView = [[MAMapView alloc] initWithFrame:self.view.bounds];
            [self.mapView setDelegate:self];
            [self.view addSubview:self.mapView];

            //连续定位
            self.locationManager = [[AMapLocationManager alloc] init];
            [self.locationManager setDelegate:self];
            //设置不允许系统暂停定位
            [self.locationManager setPausesLocationUpdatesAutomatically:NO];
            //设置允许在后台定位
            [self.locationManager setAllowsBackgroundLocationUpdates:YES];
            //设置允许连续定位逆地理
            [self.locationManager setLocatingWithReGeocode:YES];
            //开始定位
            [self.locationManager startUpdatingLocation];
        }


        //定位成功回调
        - (void)amapLocationManager:(AMapLocationManager *)manager didUpdateLocation:(CLLocation *)location reGeocode:(AMapLocationReGeocode *)reGeocode{
            NSLog(@"location:{lat:%f; lon:%f; accuracy:%f; reGeocode:%@}", location.coordinate.latitude, location.coordinate.longitude, location.horizontalAccuracy, reGeocode.formattedAddress);

            //获取到定位信息，更新annotation
            if (self.pointAnnotaiton == nil){
                self.pointAnnotaiton = [[MAPointAnnotation alloc] init];
                [self.pointAnnotaiton setCoordinate:location.coordinate];

                [self.mapView addAnnotation:self.pointAnnotaiton];
            }

            [self.pointAnnotaiton setCoordinate:location.coordinate];

            [self.mapView setCenterCoordinate:location.coordinate];
            [self.mapView setZoomLevel:15.1 animated:NO];
        }

        //定位失败回调
        - (void)amapLocationManager:(AMapLocationManager *)manager didFailWithError:(NSError *)error{
            NSLog(@"%s, amapLocationManager = %@, error = %@", __func__, [manager class], error);
        }


        //定位按钮样式
        - (MAAnnotationView *)mapView:(MAMapView *)mapView viewForAnnotation:(id<MAAnnotation>)annotation{
            if ([annotation isKindOfClass:[MAPointAnnotation class]]){
                static NSString *pointReuseIndetifier = @"pointReuseIndetifier";

                MAPinAnnotationView *annotationView = (MAPinAnnotationView *)[mapView dequeueReusableAnnotationViewWithIdentifier:pointReuseIndetifier];
                if (annotationView == nil){
                    annotationView = [[MAPinAnnotationView alloc] initWithAnnotation:annotation reuseIdentifier:pointReuseIndetifier];
                }

                annotationView.canShowCallout   = NO;
                annotationView.animatesDrop     = NO;
                annotationView.draggable        = NO;
                annotationView.image            = [UIImage imageNamed:@"icon_location.png"];

                return annotationView;
            }

            return nil;
        }





----------------------------------------------------------------------------------------------------------------------------------------
