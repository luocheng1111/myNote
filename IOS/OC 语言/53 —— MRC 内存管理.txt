


MRC 内存管理
--------------------------------------------------------------------------------------------------------

※ MRC介绍
    MRC：Manual Reference Counting 手动引用计数。手动内存管理
         当多1个人使用对象的时候，要求程序员手动的发送retain消息。
	 当少1个人使用对象的时候，要求程序员手动的发送relase消息。



 ※ 第一个MRC程序
    IOS5开始。Xcode4.2开始就支持ARC。Xcode7 默认支持ARC开发。
    默认使用的开发方式就是ARC的模式
    
    1.关闭ARC开启MRC
      项目->Build Settings->Objective-C ARC yes换成no
    
    2.重写dealloc方法,只要这个方法被执行，就代表当前这个对象被回收了。
      - (void)dealloc
      {
         NSLog(@"名字叫做 %@ 的人挂了", _name);
	 [supper dealloc];
      }
    
    3.实际运用
      int main(...){
	 Person *p1 = [[Person alloc] init];
	 p1.name = @"小明";

	 NSUInteger count = [p1 retainCount];
         NSLog(@"count = %lu ", count); //count = 1

	 [p1 release];
      }



 ※ MRC模式下 set及dealloc写法
   - (void)setCar:(Car *)car
    {
	if(_car != car)
	{
	   [_car release];
	   _car = [car retaom];
	}
    }

    还要重写dealloc方法。
    - (void)dealloc
    {
	[_car release];
 	[super delloc];
    }
   


 ※ MRC下，对象回收机制
    当对象的引用计数器变为0的时候，系统会自动回收对象。
    当系统回收对象的时候，会自动调用对象的dealloc方法。



 ※ 内存管理的重点
    1. 有一个对象的创建，就要匹配一个对象的release

    2. retain的次数和release的次数要匹配

    3. 谁用谁retain. 谁不用谁release
       谁负责retain. 谁就负责release
    
    4. 只有在多1个人用的时候才retain 少1个使用的时候才release

    有始有终，有加就有减，有retain就应该匹配1个release 一定要平衡。



 ※ MRC模式下 循环retain问题
    循环retain:当两个对象相互引用，A对象的属性是B对象 B对象的属性是A对象。
               这个时候 如果两边都使用retain 那么就会发生内存泄漏
    解决方案：1端使用retain 另外1端使用assign 使用assign的那1端在dealloc中不再需要release了


--------------------------------------------------------------------------------------------------------



内存泄漏与单个对象的内存泄漏
--------------------------------------------------------------------------------------------------------
 
 ※ 内存泄漏
    指的是1个对象没有被及时的回收。在该回收的时候而没有被回收
    一直驻留在内存中，直到程序结束的时候才回收


 ※ 单个对象的内存泄露的情况。
    1). 有对象的创建，而没有对应的relase
    2). retain的次数和relase的次数不匹配
    3). 在不适当的时候，为指针赋值为nil
    4). 在方法中为传入的对象进行不适当的retain


 ※ 如何保证单个对象可以被回收
    1). 有对象的创建，就必要匹配1个relase
    2). retain的次数和relase的次数一定要匹配
    3). 只有在指针称为野指针的时候才赋值为nil
    4). 在方法中不要随意的为传入的对象retain
   
--------------------------------------------------------------------------------------------------------


