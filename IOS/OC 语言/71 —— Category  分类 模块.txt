


Category 分类 模块
--------------------------------------------------------------------------------------------------------

 ※ Category 分类 模块？
    将1个类分成多个模块，每个模块负责一些方法.
    解决代码的臃肿，方便代码的维护和管理
    
    比如一个学生类：类有很多方法
    吃、喝、拉、撒、睡.....
    学习、敲代码、写书.....
    玩Dota、玩LOL、玩CF.....
    爬山、跑步.....
    踢足球.....
    ..... 
    
    默认情况下，上面的类独占学生类，我们将学生类分为很多模块，
    将功能相似的方法定义在同1个模块中，这样就方便代码的维护和管理
    

 ※ 如何为类添加分类？
    1).新建文件, 选择Category
    2).会生成1个.h和.m的文件
       文件名为: 本类名+分类名.h 本类名+分类名.m
    3).其中的代码为
       @interface 本类名(分类名)

       @end
       
       代表不是新创建1个类，而是对已有的类添加1个分类，小括弧中写上这个分类的名字。
       因为1个类可以添加多个分类，为了区分没1个分类，所以分类要取名字。


 ※ 分类的使用
    导入分类的头文件，就可以直接使用这个类中的方法
    
    #import <Foundation/Foundation.h>
    #import "Student.h"
    #import "Student+xiao.h"
    #import "Student+sb.h"

    int main(int argc, const char * argv[]){
       Student *s1 = [Student new];
	     [s1 haha];
	     [s1 hehe];
	     [s1 tsb];

	     return 0;
    }



 ※ 分类的几个注意点
    1.分类只能增加方法，不能增加属性
    2.如果在分类中写了 @property, 则只会生成getter setter的声明，不会自动生成私有属性和setter getter的实现
      所以，如果写了 @property 则需要自己定义属性，自己写setter getter的实现
    3.分类的方法不能直接访问本类的私有属性，如果想访问，可以使用getter setter来访问
    4.分类中可存在和本类同名方法
      当方法名相同，程序会优先调用分类的方法，哪怕没有引入分类的头文件。
      如果多个分类中有相同的方法，优先调用最后编译的分类


 ※ 分类的应用
    1.将臃肿的类分为多个模块 方便管理。  
    2.扩展类，可以为系统的类写1个分类，扩展系统类
    

--------------------------------------------------------------------------------------------------------
