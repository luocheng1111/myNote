


异常处理
--------------------------------------------------------------------------------------------------------


 ※ 目的：为了让程序在执行的时候如果发生了异常而不崩溃 而是继续往下执行


 ※ 什么是异常
    程序可以编译 链接 执行。
    当程序在执行的时候 处于某种特定条件下 程序的执行就会终止。
 

 ※ 语法
    
     @try
     {
	....
     }
     @catch(NSException *ex)
     {
	NSLog("%@", ex);
     }
     @finally
     {
	....
     }

     将有可能的代码放在 @try中。
     如果发生异常，则程序不会崩溃，而是跳到 @catch中，执行其中的代码
     如果没有发生异常，执行玩 @try中代码后，就会略过 @catch中的代码继续执行下面的代码
     且最后都会执行finally中的代码，也可以省略 @finally不写


※ 注意点
   @try.. @catch并不是万能的，不是所有的运行时错误都可以处理的。比如 10/0 即使在 @try里面，
   运行时，依旧会报错。
   ※所以，在实际的开发过程中 使用 @try用的相对比较少
   ※避免异常我们最常用的方式还是逻辑判断。


   下面两个例子。
   运行时依旧会导致程序崩溃，不会到  @catch

   例一：依旧崩溃
    @try
     {
	int num1 = 10;
	int num2 = 20;
	int num3 = num1/num2;
	NSLog(@"num3 = %d", num3);
     }
     @catch(NSException *ex)
     {
	NSLog(@"发生异常了");
     }


   例二：依旧崩溃
    @try
     {
	Person *p = nil;
	p->_name = @"jack";
     }
     @catch(NSException *ex)
     {
	NSLog(@"发生异常了");
     }

--------------------------------------------------------------------------------------------------------