


ARC 内存管理
--------------------------------------------------------------------------------------------------------

 ※ ARC介绍
    ARC：Automatic Reference Counting. 自动引用计数
    原理：当ARC开启时，编译器会自动的在合适的地方插入retain、release、autorelease代码。
          编译器自动为对象做引用计数。而作为开发者，完全不需要担心编译器会做错(除非开发者自己错用了ARC)。


※ 如何确保程序开启ARC机制。
   1.默认情况下，Xcode会默认开启ARC机制。
   2.在ARC机制下，是不允许调用retain、relase、retainCount、autorelease方法。
   3.在dealloc中，是不允许调用[supper dealloc];
  

※ 第一个ARC程序
    int main(int argc, const char* argv[])
    {
	@autoreleasepool
	{
	    Person *p1 = [Person new]; //p1是1个强指针
	    //因为我们说过，每1个指针变量默认情况下都是1个强指针变量。
	    NSLog(@"-------");
	}  //当执行到这里的时候 .p1指针被回收，那么Person对象就没有任何强指针指向它了，对象就在这被回收。
	return 0;
    }
    


※ ARC下，对象回收机制，对象何时被释放
   没有任何强指针指向对象的时候，对象就会被释放。
   如果这个时候有弱指针指向，也会被释放。

--------------------------------------------------------------------------------------------------------



ARC下 单个对象的内存管理
--------------------------------------------------------------------------------------------------------

 ※ ARC下的单个对象的内存管理
    在ARC的机制下：当1个对象没有任何的强指针指向它的时候 这个对象就会被立即回收。

    1).当指向对象的所有的强指针被回收的时候，对象就会被立即回收。
    int main(int argc, const char* argv[])
    {
	@autoreleasepool
	{
	    Person *p1 = [Person new]; //p1是1个强指针
	    Person *p2 = p1; //p2也是个强指针，p1和p2都指向Person对象。
	    //因为我们说过，每1个指针变量默认情况下都是1个强指针变量。
	    NSLog(@"-------");
	} //当执行到这里的时候 .p1指针被回收，那么Person对象就没有任何强指针指向它了，对象就在这被回收。
	return 0;
    }
   
    
    2).将所有指向对象的强指针赋值为nil的时候。对象就会被立即回收。
    int main(int argc, const char* argv[])
    {
	@autoreleasepool
	{
	    Person *p1 = [Person new]; //p1是1个强指针
	    //因为我们说过，每1个指针变量默认情况下都是1个强指针变量。

	    p1 = nil;//当执行到这句话的是，p1赋值为nil。
	    //p1指针不再执行Person对象。
	    //Person对象没有被任何的指向所指向，所以.Person对象在这里被释放。
	    NSLog(@"-------");
	} 
	return 0;
    }

    这两种情况就叫做没有任何强指针指向对象。
    1). 指向对象的所有强指针被回收掉
    2). 指向对象的所有的强指针赋值为nil
 

--------------------------------------------------------------------------------------------------------



ARC下 集合的内存管理
--------------------------------------------------------------------------------------------------------

 ※ 集合
    NAArray集合、NSDictionary字典集合 就叫做集合。


 ※ 集合的内存管理
    1. 在MRC的模式下 将1个对象存储到集合中，会不会影响对象的引用计数器。
       将对象存储到集合之中，会为这个对对想引用计数器+1
       当集合销毁的时候 就会像存储在集合中的所有的对象发送1条release消息

    2. 使用 @[]或者 @{}创建的集合已经是被autorelease过的了。
       直接调用和类同名的类方法创建的对象 也是被autorelese过的了.


 ※ 在ARC的模式下，集合的元素是1个强类型的指针。
    Person *p = [Person new];
    NSLog(@"%lu", p1.retainCount); //1
    NSArray *arr = @[p1];
    NSLog(@"%lu", p1.retainCount); //2
  
    [arr release];
    NSLog(@"%lu", p1.retainCount); //1

    [p1 release];


--------------------------------------------------------------------------------------------------------
