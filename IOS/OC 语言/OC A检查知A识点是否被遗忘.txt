


-------------------------------------

版本声明：
  此版本的主要作用是检查知识点是否被遗忘
  知识点没必要知道的很详细，但是大致的知识点不能遗忘


-------------------------------------



OC介绍
-------------------------------------

1.OC相对与C
  3点改进
  引申：面向过程和面向对象
  引申：#import
        NSLog
	NSString
	BOOL
	block
	Foundation框架
2.C、OC、C++的关系
3.OC中为什么用两个文件编译


面向过程和面向对象
  1.介绍 面向过程和面向对象 编程思想
  2.举例说明
  3.优缺点对比


-------------------------------------



OC 新增数据类型
-------------------------------------

NSString
 1.介绍
 2.赋值和输出
   引申： @符号的含义


BOOL
 1.介绍
 2.OC中的真假


block
  1.block的介绍
  2.block的声明、使用及简写方式 1+(typedef)1+1'
  3.block中变量使用的注意点 2'
  4.block 应用 2'
  5.block与函数的区别 3'


-------------------------------------



Foundation框架
-------------------------------------

Foundation框架
  1.Foundation框架介绍
    引申： 什么是框架


NSString和NSMutableString
  1.两者介绍
  2.NSString的存储原理
       1.NSString *str = [NSString stringWithFormat:@"jack"];
         和 NSString *str = @"jack";
  3.NSString和NSMutableString的一些方法
       1.NSString和NSMutableString的创建
       引申：NSRange
             引申：CGPoint、CGSize、CGRect


NSArray和NSMutableArray
  1.两者介绍
  2.NSArray和NSMutableArray的创建
      1.创建NAArray的 3种方式
      2.NSArray数组的注意点 2'
  3.数组的遍历



NSDictionary和NSMutableDictionary
  1.两者介绍
  2.NSDictionary和NSMutableDictionary的创建 2种方式
  3.字典的遍历 key和value
  引申：NSNumber、NSValue


NSDate
  1.NSDate类介绍
  2.NSDate 得到当前时间
  3.时间的格式化 2种


NSFileManager
  1.NSFileManager类介绍
  2.NSFileManager的创建


NSRange
  1.介绍 第一个值、第二个值介绍
  2.初始化赋值 3种方式


CGPoint
  1.介绍 第一个值、第二个值介绍
  2.初始化赋值 3种方式


CGSize
  1.介绍 第一个值、第二个值介绍
  2.初始化赋值 3种方式


CGRect
  1.介绍 第一个值、第二个值介绍
  2.初始化赋值 3种方式
  3.一个注意点


NSNumber
  1.介绍及原理
  2.NSNumber的使用方式及及1个注意点 2+1'


NSValue
  1.介绍
  2.NSValue的使用

-------------------------------------



OC main函数 介绍
-------------------------------------

main函数：
 1.编写并解释每一行代码
 2.引申：#import指令
         NSLog函数
	 @autoreleasepool{}
	 NS前缀和 @符号


#import指令
  1.介绍
  2.相对于#include指令 1'


NSLog函数
  1.介绍
  2.相对于printf函数 3'


-------------------------------------



类与对象
-------------------------------------

类与对象
 1.什么是类，什么的对象


类
 1.类的声明
 2.类的实现
 3.类的实例化 2'
   引申：Person new和Person alloc init的区别
   引申：构造方法 写法、规范


类的成员变量
 1.成员变量写法
 2.成员变量赋值
 3.成员变量的规范 3'
   扩展：成员变量修饰符 4


类的属性 @property
 1. @property介绍
 2. @property的参数 4组
    1.第二组 4条结论
    扩展：浅复制和深复制
    扩展：为什么NSString要使用copy
    扩展：NSObject类、NSObject协议


类的方法
 1.方法的写法、使用
 2.方法的分类
 3.什么时候定义类方法


方法与函数的对比
  1.各自的写法
  2.相同点和区别 3'


-------------------------------------



面向对象
-------------------------------------

封装
  1.什么的封装
     1.介绍
  2.封装的应用
     1.访问修饰符 4
     2.setter、getter封装
     3.真丶私有属性和私有方法


继承
  1.什么是继承
  2.继承的写法
  3.OC继承的特点，相对于Java
    扩展：NSObject类、NSObject协议


多态
  1.什么是多态
  2.举例说明多态
  2.相对于Java，OC的多态

-------------------------------------



分类(Category)、延展(Extension)、协议(Protocol)
-------------------------------------

Category分类
  1.什么是分类
  2.添加分类文件、及使用
     1.步骤
     2.生成的文件和代码
  3.分类的注意点 2'
  4.分类的应用 2'


Extension 延展
  1.什么是Extension延展
  2.添加延展文件、及使用
  3.延展的使用
  4.延展与分类的区别 3'


Protocol 协议
  1.Protocol 协议的介绍
  2.添加协议文件、及使用
  3.协议方法修饰符
  3.协议的特点
  扩展：1.NSObject协议
	2.写一个委托协议protocol的回调


-------------------------------------



内存管理 MRC&ARC
-------------------------------------

内存管理
  1.内存管理介绍
      1.分类及如何操作
  2.内存区域介绍，我们主要管理什么？
  3.内存回收机制
  4.内存管理精髓


引用计数器
  1.什么是引用计数器，他用来做什么？
  2.具体怎么操作？
       1.3步
       2.如何获得引用计数器的值
       3.当对象被回收时


MRC 内存管理
  1.写一个MRC程序 3'
  2.MRC内存回收机制


ARC 内存管理
  1.写一个ARC程序 1'
    引申： @autoreleasepool
  2.ARC的对象回收机制
    引申： 强指针和弱指针


ARC 强指针和弱指针
 1.强指针和弱指针介绍
 2.弱指针的意义？


ARC @autoreleasepool 自动释放池
 1.介绍
 2.如何将对象存储到自动释放池之中
 3.实际情况

-------------------------------------


其他
-------------------------------------

static的关键字 (OC中)
  1.C中是static关键字
  2.OC中的static关键字 1点区别


NSObject指针 和 id指针
  1.两个的对比 相同点、不 同点
  2.id指针的注意点


单例模式 instancetype 关键字
  1.instancetype介绍及使用场景
  1.单例模式的写法
  2.单例模式的规范


@class
  1. @class的使用场景
  2. @class的作用


NSObjct介绍
  NSObject类
    1.介绍
    2.为什么要继承这个类
  NSObjct协议
    1.介绍
    2.注意点


new 和 alloc init
  1.原理及区别


深拷贝、浅拷贝
  1.什么是深拷贝、什么是浅拷贝


构造方法
  1.介绍
  2.重写构造方法
      1.写法、格式
  3.自定义构造方法

-------------------------------------