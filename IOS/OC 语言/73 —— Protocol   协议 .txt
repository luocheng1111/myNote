


Protocol 协议
--------------------------------------------------------------------------------------------------------

 ※ protocol 协议
    protocol协议专门用来写方法声明的。(只能用来声明方法，不能声明属性，也不能实现方法).
    只要某个类遵守了这个协议，就相当于拥有这个协议中的所有方法声明


 ※ 如何创建一个协议？
    1).新建文件, 选择Protocol
    2).仅仅会生成1个.h文件
       文件名为: 本类名_协议名.h 
    3).其中的代码为
      @protocol 协议名称 <NSObject>
      方法的声明;
      @end
       
     
      
 ※ 协议的使用，让类遵守协议
    语法：
    @interface 类名:父类名 <协议名称1，协议名称2.......>

    @end

    如果类遵守了协议，那么就相当于这个类拥有了协议定义的所有的方法的声明
    只是拥有了协议中的方法声明，没有实现，所以，这个类，就应该实现协议中的方法。
    如果没有实现协议中的方法，调用时就会报错。。
    
    NSObject<StudyProtocol> *obj = [Student new];
    NSObject<StudyProtocol, SBProtocol> *obj1 = [Student new];
    id<StudyProtocol, SBProtocol> *obj1 = [Student new];
    



 ※ 协议的特点
    1个类只能有1个父类,但是1个类可以同时遵守多个协议。
    类是单继承，但是协议可以多遵守。
    

--------------------------------------------------------------------------------------------------------



协议中方法的修饰符
--------------------------------------------------------------------------------------------------------

 ※ @required与 @optional 
    @required与 @optional 这两个修饰符是专门用来修饰协议中的方法的。
    
    在协议中，如果方法的声明被 @required修饰，那么遵守这个协议的类必须要实现这个方法，否则编译会发出警告
    在协议中，如果方法的声明被 @optional修饰，那么遵守这个协议的类如果不实现这个方法，编译也不会发出警告

    主要的作用：
    这两个的区别在于警告不警告，主要的作用在于程序员沟通，告诉遵守协议的类，哪些方法是必须要实现的

    默认的是 @required
   

--------------------------------------------------------------------------------------------------------



协议的应用-委托协议protocol的回调
--------------------------------------------------------------------------------------------------------

 ※ 协议的声明,可以写在两个文件任何一个中
@protocol ViewSelectedDelegate <NSObject>  
  
- (void)viewSelectedAtIndex:(int)index;  
  
@end  



 ※ FirstViewController.h文件
@interface FirstViewController : UIViewController<ViewSelectedDelegate>

@end



 ※ FirstViewController.m文件
- (void)viewDidLoad {  
    [super viewDidLoad];  

    self.secondView = [[SecondViewController alloc] initWithNibName:@"SecondViewController" bundle:nil];  
    self.secondView.m_delegate = self;  
}  

//协议的实现
- (void)viewSelectedAtIndex:(int)index{  
    NSLog(@"select view at index %d", index);  
}  



 ※ SecondViewController.h文件
@interface SecondViewController : UIViewController  
  @property (strong, nonatomic) id<ViewSelectedDelegate> m_delegate;  

  - (IBAction)clickTheBtn:(id)sender;  
@end



 ※ SecondViewController.m文件
@implementation SecondViewController  
  

- (IBAction)clickTheBtn:(id)sender {  
    //协议的回调
    [self.m_delegate viewSelectedAtIndex:1];  
}  
@end

--------------------------------------------------------------------------------------------------------
