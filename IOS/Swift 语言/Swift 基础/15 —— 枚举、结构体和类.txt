


Enum 枚举
---------------------------------------------------------------------------------------------------
※ 什么是枚举，为什么要用枚举
    枚举：用以描述一个事物它已知的几个种类，是一个范围控制解决方案，
    枚举可以防止一些意外情况的发生,
    假如规定好　North=1，South＝2，East=3，West=4 有可能有人会定义写出　var direction = 5
    有时候会出现拼写错误，var direction = "Noth",
    有时候会出现拼写习惯不一致，var direction = "south", var direction = "South",


※ 枚举的语法
   enum Direction{
	case East
	case West
	case South
	case North
   }
   或写成
   enum Direction{
	case East, West, South, North
   }

   let curDirection = Direction.East  //Direction.East
   let curDirection:Direction = .East //如果已知是枚举类型，则可以用此省略写法


※ 枚举定义一个原始值 rawValue
   enum Month:Int{ //这个Int必须要写
       case Jan = 1
       case Feb
       case Mar
   }

   let curDirection = Direction.Mar.rawValue()   //3 (输出其对应的值,Int会自动推断前后的值)
   let curDirection = Direction.Mar.hasValue()   //1 (索引)

   Int枚举原始值
    会自动推断前后的值，如果全不写初始值，则第一个为0, 若只写第一个，后面则会自动累加1值 
   String枚举 
    不写值的话，默认值与其名字相同 比如上面若为String类型枚举 则Feb的值为"Feb"
   如果原始值类型不为Int、String，而且其他类型，Swift则无法推断枚举的原始值，因此必须给每个枚举指定原始值。


※ 枚举关联值(相关值) Swift创新 Associate Value
   enum BarCode{
       case UPCA(Int,Int,Int,Int)
       case QRcode(String)
   }


※ 枚举的一些方法
   let curMonth:Month = Month.Feb
   curMonth.hasValue --> 1  //对应的索引值
   curMonth.rawValue --> 2  //对应的值

   let curMonth:Month? = Month(rawValue:3)
   curMonth.hasValue --> 2
   curMonth.rawValue --> 3

---------------------------------------------------------------------------------------------------



结构体
---------------------------------------------------------------------------------------------------

※ 如何创建一个结构体
   struct Location { 
    var latitude : Double
    var longitude : Double
   }
   
   let appleHeadLocation = Location(latitude:37.3230, longitude:-122.0322)
   

※ 结构体的构造函数
    用于完成实例属性的初始化。
    系统最多为结构体提供2个构造器。无参的构造器和初始化需要初始值实例的构造器
    1.所有实例存储属性指定了初始值或可选类型，且没提供构造器时，系统会提供一个无参构造器和所有属性实例构造器，？
    2.若有实例存储属性没指定值时，且没提供构造器时，系统只会提供所有一个属性实例构造器，
    3.当自定义了构造器时，系统不会提供任何构造器


※ 可能失败的构造器
    如果传入的参数不合法，则可以返回nil
    init?(age:Int){
      if age>120 && age<0{
	return nil;
      }
      self.age = age;
    }
     
---------------------------------------------------------------------------------------------------


类
---------------------------------------------------------------------------------------------------

※ 如何定义一个类
   class Person {
    var firstName : String
    var lastName : String

    init(firstName:String, lastName:String){
      self.firstName = firstName;
      self.lastName = lastName;
    }
   } 



※ 类的构造函数
    系统只为类定义一个构造器，无参构造器。
    1.所有实例存储属性指定了初始值或可选类型，且没有提供构造器时，系统会提供一个无参构造器
    2.当类中有需要初始化的实例时，则必须由自己定义一个构造器，能够初始化所有值


※ 可能失败的构造器
    如果传入的参数不合法，则可以返回nil
    init?(age:Int){
      if age>120 && age<0{
	return nil;
      }
      self.age = age;
    }


---------------------------------------------------------------------------------------------------



类 VS 结构体
---------------------------------------------------------------------------------------------------

※ 什么时候用结构体？什么时候用类？
    1.可以把结构体看做值，比如：位置经纬度、坐标、温度...
      可以把类看做物体，比如：人、车、动物、商店....
    2.结构体是值类型，类是引用类型
    3.类是可以被继承的，当需要继承时，应该选择类
    4.结构体比类更"轻量级",结构体效率更高 (堆、栈)


※ 二者区别：
    1.类的对象是引用类型，而结构体是值类型。所以类的引用赋值是传递引用，结构体则是传值
    2.类可以继承，结构体不可以
    3.类的实例可以反初始化，释放存储空间，结构体做不到
    4.类的实例才能被称为对象，枚举、结构体的实例只能被称为实例，不能称为对象

---------------------------------------------------------------------------------------------------

