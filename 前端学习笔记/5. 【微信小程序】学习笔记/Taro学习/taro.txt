- [ ] Taro
Taro是一个多个小程序跨平台解决方案，支持使用React/Vue/Vue3来编写
使用Taro开发后，通过编译转换，可以转换到一些平台的代码，然后运行
目标支持转换的平台有 H5/微信小程序/ 京东小程序/ 百度小程序/ 支付宝小程序/ 字节跳动小程序/ QQ小程序 / RN 等应用。
官方网址：https://taro-docs.jd.com/taro/docs/README


环境
1.node环境 版本>=12.0.0.
2.使用 npm或yarn 安装 @tarojs/cli
$ npm install -g @tarojs/cli (会全局安装最新版本)
   如果要指定版本例如3.1.4版本 则npm install -g @tarojs/cli@3.1.4
   如果安装过程出现sass相关的安装错误，请在安装 mirror-config-china 后重试 命令：$ npm install -g mirror-config-china
3.在终端输入命令 taro，如果出现内容就说明安装成功了
创建一个项目并运行到微信小程序运

创建项目并编译成微信小程序代码
1.在终端里cd到需要创建的文件夹下，之后输入命令创建项目： taro init myApp，再选择相应选项后即项目创建成功
2.使用编译器WebStorm或VSCode  打开项目
3.进行包安装工作 打开编译器里的命令行工具，输入npm install
4.将项目编译成微信小程序：npm run dev:weapp或npm run build:weapp
运行到微信小程序上
1.使用微信开发者工具打开项目：打开时需要输入AppID,注册一个测试号即可，测试号会填写关于小程序的信息
2.发布小程序：先在手机上先预览实际效果.如果可以的话，则点击上传，上传后用管理员进入微信开发者平台，点击审核后，等审核通过后即可发布成功
   (注：测试的程序不能提交审核，如果多次提交测试的程序，则会有些惩罚，必须是完整的内容才能提交)



编辑器
推荐使用 WebStorm或 VSCode 
WebStorm编辑器是收费的，适合Java开发者，因为他和Android Studio编译器风格，快捷键几乎一样
VSCode编辑器是免费的，很多前端人员用这款软件，但安装时需要进行一些配置和插件安装
编辑器插件：
 插件推荐 ESLint 插件https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint，
 如果你使用 TypeScript，别忘了配置 eslint.probe 参数。
如果使用VSCode，推荐安装 ESLint 插件https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint，
 如果你使用 TypeScript，别忘了配置 eslint.probe 参数。如果使用 Vue，推荐安装 Vetur https://marketplace.visualstudio.com/items?itemName=octref.vetur 插件。
如果你愿意花钱又懒得折腾可以选择 WebStorm（或其它支持 Web 开发的 Jetbrains IDE），基本不需要配置。
不管使用 VSCode 还是 WebStrom，安装了上述插件之后使用 Taro 都实现自动补全和代码实时检查（linting）的功能。




Taro项目目录介绍

├── config                    # 项目编译配置目录
    ├── dev.js                 # 开发环境时配置
    ├── index.js               # 默认配置
    └── prod.js               # 生产环境时配置
|
├── dist                        # 编译结果目录
|
├── node_modules        # node 打包目录
|
├── src                              # 源码目录
    ├── pages                     # 页面文件目录
        ├── index                   # index 页面目录
            ├── index.config.js  # index 页面配置
            ├── index.css          # index 页面样式
            └── index.js            # index 页面逻辑
    ├── app.config.js            # 项目入口配置
    ├── app.css                    # 全局 CSS
    ├── app.js                      # **项目入口组件**
    ├── index.html                # H5 入口 HTML
|
├── package.json                
├── project.config.json         # 微信小程序项目配置 https://developers.weixin.qq.com/miniprogram/dev/devtools/projectconfig.html?search-key=%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE
├── babel.config.js             # Babel 配置
├── .eslintrc.js                # ESLint 配置

见https://taro-docs.jd.com/taro/docs/folder
【最终摘抄文档】



配置文件介绍：
项目编译配置：
编译配置存放于项目根目录下的 config 目录中，包含三个文件：
index.js 是通用配置
dev.js 是项目预览时的配置
prod.js 是项目打包时的配置
用于配置整个项目的入口出口目录、环境变量等

微信小程序项目配置：
project.config.json文件，如果是其他小程序，则需要新增对应配置文件，此文件主要用于设置小程序id，小程序源码目录，小程序项目名称及一些小程序设置等等
微信小程序配置详情见：https://developers.weixin.qq.com/miniprogram/dev/devtools/projectconfig.html

项目页面配置：
app.config.json文件，每个小程序页面都可以使用.config.js 文件来对本页面的窗口表现进行配置
此配置文件，主要用于配置所有页面对应的目录，导航栏及tabbar的设定


编译配置详情：https://taro-docs.jd.com/taro/docs/config-detail/


//小程序全局配置


入口组件及对应的全局配置文件
app.js              入口组件   可以在入口组件中设置全局状态/全局生命周期
app.config.js  一个全局配置文件  可以在全局配置文件中设置页面组件的路径、全局窗口、路由等信息

页面组件
每一个页面都会单独在pages下面
Index.vue 页面组件，页面是怎么显示的
Index.config.js  页面组件的配置文件，可以设置此页面的导航栏、背景颜色等参数


Taro相关链接：
Trao命令
https://taro-docs.jd.com/taro/docs/cli
Taro npm包介绍
https://taro-docs.jd.com/taro/docs/CONTRIBUTING
Taro 版本介绍
https://taro-docs.jd.com/taro/docs/version
Taro 编译配置文件属性介绍
https://taro-docs.jd.com/taro/docs/config


微信小程序项目配置：

项目配置 project.config.json文件
https://developers.weixin.qq.com/miniprogram/dev/devtools/projectconfig.html?search-key=%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE
主要用于指定项目源码的路径miniprogramRoot，项目的 appid，项目名称projectname，项目描述description及项目打包时打而一些配置选项

编译配置：
https://taro-docs.jd.com/taro/docs/config-detail
主要用于项目编译时的输入输出文件，及编译时的一些配置
config/index.js

const config = {
  // 项目名称
  projectName: 'Awesome Next',
  // 项目创建日期
  date: '2020-6-2',
  // 设计稿尺寸
  designWidth: 750,
  // 设计稿尺寸换算规则
  deviceRatio: {
    640: 2.34 / 2,
    750: 1,
    828: 1.81 / 2
  },
  // 项目源码目录
  sourceRoot: 'src',
  // 项目产出目录
  outputRoot: 'dist',
  // Taro 插件配置
  plugins: [],
  // 用于配置一些全局变量供代码中进行使用。
  defineConstants: {},
  // 文件 copy 配置 用于把文件从源码目录直接拷贝到编译后的生产目录。
  copy: {
    patterns: [
    ],
    options: {
    }
  },
  // 框架，react，nerv，vue, vue3 等
  framework: 'react',
  // 小程序端专用配置
  mini: {
    postcss: {
      autoprefixer: {
        enable: true
      },
      // 小程序端样式引用本地资源内联配置
      url: {
        enable: true,
        config: {
          limit: 10240
        }
      },
      cssModules: {
        enable: false, // 默认为 false，如需使用 css modules 功能，则设为 true
        config: {
          namingPattern: 'module', // 转换模式，取值为 global/module
          generateScopedName: '[name]__[local]___[hash:base64:5]'
        }
      }
    },
    // 自定义 Webpack 配置
    webpackChain (chain, webpack) {}
  },
  // H5 端专用配置
  h5: {
    publicPath: '/',
    staticDirectory: 'static',
    postcss: {
      autoprefixer: {
        enable: true
      },
      cssModules: {
        enable: false, // 默认为 false，如需使用 css modules 功能，则设为 true
        config: {
          namingPattern: 'module', // 转换模式，取值为 global/module
          generateScopedName: '[name]__[local]___[hash:base64:5]'
        }
      }
    },
    // 自定义 Webpack 配置
    webpackChain (chain, webpack) {},
    devServer: {}
  }
};

module.exports = function(merge) {
  if (process.env.NODE_ENV === 'development') {
    return merge({}, config, require('./dev'));
  }
  return merge({}, config, require('./prod'));
};

app.config.js
//用于每个页面信息的设置及配置


常见问题：
1.保持 CLI 的版本与各端依赖版本一致
在使用 Taro 进行多端开发中，请保持 Taro CLI 的版本与你项目的依赖版本一致，否则可能会出现编译错误或者运行时错误。
比如 Taro CLI 版本为 3.0.9，而项目里使用的依赖版本为 3.0.10，则有可能会出现问题
解决方案：手动安装相应版本的CLI 或 修改package.json依赖版本号
// 手动安装相应版本的CLI
$ npm install -g @tarojs/cli@1.3.9


若使用 微信小程序预览模式 ，则需下载并使用微信开发者工具添加项目进行预览，此时需要注意微信开发者工具的项目设置
* 需要设置关闭 ES6 转 ES5 功能，开启可能报错
* 需要设置关闭上传代码时样式自动补全，开启可能报错
* 需要设置关闭代码压缩上传，开启可能报错

学习：
基础教程
https://taro-docs.jd.com/taro/docs/guide/

安装及使用及常见问题
https://taro-docs.jd.com/taro/docs/GETTING-STARTED